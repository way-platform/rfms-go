// Package apiv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apiv2

import (
	"time"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for AlternatorStatus.
const (
	AlternatorStatusCHARGING     AlternatorStatus = "CHARGING"
	AlternatorStatusERROR        AlternatorStatus = "ERROR"
	AlternatorStatusNOTAVAILABLE AlternatorStatus = "NOT_AVAILABLE"
	AlternatorStatusNOTCHARGING  AlternatorStatus = "NOT_CHARGING"
)

// Defines values for DoorEnabledStatus.
const (
	DoorEnabledStatusDISABLED     DoorEnabledStatus = "DISABLED"
	DoorEnabledStatusENABLED      DoorEnabledStatus = "ENABLED"
	DoorEnabledStatusERROR        DoorEnabledStatus = "ERROR"
	DoorEnabledStatusNOTAVAILABLE DoorEnabledStatus = "NOT_AVAILABLE"
)

// Defines values for DoorLockStatus.
const (
	DoorLockStatusERROR        DoorLockStatus = "ERROR"
	DoorLockStatusLOCKED       DoorLockStatus = "LOCKED"
	DoorLockStatusNOTAVAILABLE DoorLockStatus = "NOT_AVAILABLE"
	DoorLockStatusUNLOCKED     DoorLockStatus = "UNLOCKED"
)

// Defines values for DoorOpenStatus.
const (
	DoorOpenStatusCLOSED       DoorOpenStatus = "CLOSED"
	DoorOpenStatusERROR        DoorOpenStatus = "ERROR"
	DoorOpenStatusNOTAVAILABLE DoorOpenStatus = "NOT_AVAILABLE"
	DoorOpenStatusOPEN         DoorOpenStatus = "OPEN"
)

// Defines values for DriverAuthenticationType.
const (
	COMPANYCARD       DriverAuthenticationType = "COMPANY_CARD"
	CONTROLCARD       DriverAuthenticationType = "CONTROL_CARD"
	DRIVERCARD        DriverAuthenticationType = "DRIVER_CARD"
	MANUFACTURINGCARD DriverAuthenticationType = "MANUFACTURING_CARD"
	MOTIONSENSOR      DriverAuthenticationType = "MOTION_SENSOR"
	RESERVED          DriverAuthenticationType = "RESERVED"
	VEHICLEUNIT       DriverAuthenticationType = "VEHICLE_UNIT"
)

// Defines values for DriverWorkingState.
const (
	DriverWorkingStateDRIVE           DriverWorkingState = "DRIVE"
	DriverWorkingStateDRIVERAVAILABLE DriverWorkingState = "DRIVER_AVAILABLE"
	DriverWorkingStateERROR           DriverWorkingState = "ERROR"
	DriverWorkingStateNOTAVAILABLE    DriverWorkingState = "NOT_AVAILABLE"
	DriverWorkingStateREST            DriverWorkingState = "REST"
	DriverWorkingStateWORK            DriverWorkingState = "WORK"
)

// Defines values for Status2OfDoors.
const (
	Status2OfDoorsALLDOORSDISABLED      Status2OfDoors = "ALL_DOORS_DISABLED"
	Status2OfDoorsATLEASTONEDOORENABLED Status2OfDoors = "AT_LEAST_ONE_DOOR_ENABLED"
	Status2OfDoorsERROR                 Status2OfDoors = "ERROR"
	Status2OfDoorsNOTAVAILABLE          Status2OfDoors = "NOT_AVAILABLE"
)

// Defines values for TellTaleState.
const (
	INFO         TellTaleState = "INFO"
	NOTAVAILABLE TellTaleState = "NOT_AVAILABLE"
	OFF          TellTaleState = "OFF"
	RED          TellTaleState = "RED"
	RESERVED4    TellTaleState = "RESERVED_4"
	RESERVED5    TellTaleState = "RESERVED_5"
	RESERVED6    TellTaleState = "RESERVED_6"
	YELLOW       TellTaleState = "YELLOW"
)

// Defines values for TellTaleType.
const (
	ABSTRAILER                      TellTaleType = "ABS_TRAILER"
	ACC                             TellTaleType = "ACC"
	ADBLUELEVEL                     TellTaleType = "ADBLUE_LEVEL"
	ADVANCEDEMERGENCYBREAKING       TellTaleType = "ADVANCED_EMERGENCY_BREAKING"
	AIRBAG                          TellTaleType = "AIRBAG"
	AIRFILTERCLOGGED                TellTaleType = "AIR_FILTER_CLOGGED"
	ANTILOCKBRAKEFAILURE            TellTaleType = "ANTI_LOCK_BRAKE_FAILURE"
	ARTICULATION                    TellTaleType = "ARTICULATION"
	AUXILLARYAIRPRESSURE            TellTaleType = "AUXILLARY_AIR_PRESSURE"
	BATTERYCHARGINGCONDITION        TellTaleType = "BATTERY_CHARGING_CONDITION"
	BRAKELIGHTS                     TellTaleType = "BRAKE_LIGHTS"
	BRAKEMALFUNCTION                TellTaleType = "BRAKE_MALFUNCTION"
	BUSSTOPBRAKE                    TellTaleType = "BUS_STOP_BRAKE"
	COOLINGAIRCONDITIONING          TellTaleType = "COOLING_AIR_CONDITIONING"
	EBS                             TellTaleType = "EBS"
	EBSTRAILER12                    TellTaleType = "EBS_TRAILER_1_2"
	ENGINECOMPARTMENTTEMPERATURE    TellTaleType = "ENGINE_COMPARTMENT_TEMPERATURE"
	ENGINECOOLANTLEVEL              TellTaleType = "ENGINE_COOLANT_LEVEL"
	ENGINECOOLANTTEMPERATURE        TellTaleType = "ENGINE_COOLANT_TEMPERATURE"
	ENGINEEMISSIONFAILURE           TellTaleType = "ENGINE_EMISSION_FAILURE"
	ENGINEMILINDICATOR              TellTaleType = "ENGINE_MIL_INDICATOR"
	ENGINEOIL                       TellTaleType = "ENGINE_OIL"
	ENGINEOILLEVEL                  TellTaleType = "ENGINE_OIL_LEVEL"
	ENGINEOILTEMPERATURE            TellTaleType = "ENGINE_OIL_TEMPERATURE"
	ESCINDICATOR                    TellTaleType = "ESC_INDICATOR"
	ESCSWITCHEDOFF                  TellTaleType = "ESC_SWITCHED_OFF"
	FRONTFOGLIGHT                   TellTaleType = "FRONT_FOG_LIGHT"
	FUELFILTERDIFFPRESSURE          TellTaleType = "FUEL_FILTER_DIFF_PRESSURE"
	FUELLEVEL                       TellTaleType = "FUEL_LEVEL"
	GENERALFAILURE                  TellTaleType = "GENERAL_FAILURE"
	HATCHOPEN                       TellTaleType = "HATCH_OPEN"
	HAZARDWARNING                   TellTaleType = "HAZARD_WARNING"
	HEIGHTCONTROL                   TellTaleType = "HEIGHT_CONTROL"
	HIGHBEAMMAINBEAM                TellTaleType = "HIGH_BEAM_MAIN_BEAM"
	KNEELING                        TellTaleType = "KNEELING"
	LANEDEPARTUREINDICATOR          TellTaleType = "LANE_DEPARTURE_INDICATOR"
	LANEDEPARTUREWARNINGSWITCHEDOFF TellTaleType = "LANE_DEPARTURE_WARNING_SWITCHED_OFF"
	LOWBEAMDIPPEDBEAM               TellTaleType = "LOW_BEAM_DIPPED_BEAM"
	LOWERING                        TellTaleType = "LOWERING"
	OEMSPECIFICTELLTALE             TellTaleType = "OEM_SPECIFIC_TELL_TALE"
	PARKINGBRAKE                    TellTaleType = "PARKING_BRAKE"
	PARKINGHEATER                   TellTaleType = "PARKING_HEATER"
	POSITIONLIGHTS                  TellTaleType = "POSITION_LIGHTS"
	PRAMREQUEST                     TellTaleType = "PRAM_REQUEST"
	PROVISIONINGHANDICAPPEDPERSON   TellTaleType = "PROVISIONING_HANDICAPPED_PERSON"
	RAISING                         TellTaleType = "RAISING"
	REARFOGLIGHT                    TellTaleType = "REAR_FOG_LIGHT"
	RETARDER                        TellTaleType = "RETARDER"
	SEATBELT                        TellTaleType = "SEAT_BELT"
	SERVICECALLFORMAINTENANCE       TellTaleType = "SERVICE_CALL_FOR_MAINTENANCE"
	STEERINGFAILURE                 TellTaleType = "STEERING_FAILURE"
	STEERINGFLUIDLEVEL              TellTaleType = "STEERING_FLUID_LEVEL"
	STOPREQUEST                     TellTaleType = "STOP_REQUEST"
	TACHOGRAPHINDICATOR             TellTaleType = "TACHOGRAPH_INDICATOR"
	TIREMALFUNCTION                 TellTaleType = "TIRE_MALFUNCTION"
	TRAILERCONNECTED                TellTaleType = "TRAILER_CONNECTED"
	TRANSMISSIONFLUIDTEMPERATURE    TellTaleType = "TRANSMISSION_FLUID_TEMPERATURE"
	TRANSMISSIONMALFUNCTION         TellTaleType = "TRANSMISSION_MALFUNCTION"
	TURNSIGNALS                     TellTaleType = "TURN_SIGNALS"
	WINDSCREENWASHERFLUID           TellTaleType = "WINDSCREEN_WASHER_FLUID"
	WORNBRAKELININGS                TellTaleType = "WORN_BRAKE_LININGS"
)

// Defines values for TriggerType.
const (
	DISTANCETRAVELLED          TriggerType = "DISTANCE_TRAVELLED"
	DRIVER1WORKINGSTATECHANGED TriggerType = "DRIVER_1_WORKING_STATE_CHANGED"
	DRIVER2WORKINGSTATECHANGED TriggerType = "DRIVER_2_WORKING_STATE_CHANGED"
	DRIVERLOGIN                TriggerType = "DRIVER_LOGIN"
	DRIVERLOGOUT               TriggerType = "DRIVER_LOGOUT"
	ENGINEOFF                  TriggerType = "ENGINE_OFF"
	ENGINEON                   TriggerType = "ENGINE_ON"
	IGNITIONOFF                TriggerType = "IGNITION_OFF"
	IGNITIONON                 TriggerType = "IGNITION_ON"
	PTODISABLED                TriggerType = "PTO_DISABLED"
	PTOENABLED                 TriggerType = "PTO_ENABLED"
	TELLTALE                   TriggerType = "TELL_TALE"
	TIMER                      TriggerType = "TIMER"
)

// Accumulated defines model for Accumulated.
type Accumulated struct {
	AccelerationClass                     *FromToClasses `json:"AccelerationClass,omitempty"`
	AccelerationDuringBrakeClass          *FromToClasses `json:"AccelerationDuringBrakeClass,omitempty"`
	AccelerationPedalPositionClass        *FromToClasses `json:"AccelerationPedalPositionClass,omitempty"`
	BrakePedalCounterSpeedOverZero        *int64         `json:"BrakePedalCounterSpeedOverZero,omitempty"`
	ChairliftCounter                      *int64         `json:"ChairliftCounter,omitempty"`
	CurrentGearClass                      *LabelClasses  `json:"CurrentGearClass,omitempty"`
	DistanceBrakePedalActiveSpeedOverZero *int64         `json:"DistanceBrakePedalActiveSpeedOverZero,omitempty"`
	DistanceCruiseControlActive           *int64         `json:"DistanceCruiseControlActive,omitempty"`
	DrivingWithoutTorqueClass             *LabelClasses  `json:"DrivingWithoutTorqueClass,omitempty"`
	DurationCruiseControlActive           *int64         `json:"DurationCruiseControlActive,omitempty"`
	DurationWheelbaseSpeedOverZero        *int64         `json:"DurationWheelbaseSpeedOverZero,omitempty"`
	DurationWheelbaseSpeedZero            *int64         `json:"DurationWheelbaseSpeedZero,omitempty"`
	EngineSpeedClass                      *FromToClasses `json:"EngineSpeedClass,omitempty"`
	EngineTorqueAtCurrentSpeedClass       *FromToClasses `json:"EngineTorqueAtCurrentSpeedClass,omitempty"`
	EngineTorqueClass                     *FromToClasses `json:"EngineTorqueClass,omitempty"`
	FuelConsumptionCruiseControlActive    *int64         `json:"FuelConsumptionCruiseControlActive,omitempty"`
	FuelWheelbaseSpeedOverZero            *int64         `json:"FuelWheelbaseSpeedOverZero,omitempty"`
	FuelWheelbaseSpeedZero                *int64         `json:"FuelWheelbaseSpeedZero,omitempty"`
	HighAccelerationClass                 *FromToClasses `json:"HighAccelerationClass,omitempty"`
	KneelingCounter                       *int64         `json:"KneelingCounter,omitempty"`
	PramRequestCounter                    *int64         `json:"PramRequestCounter,omitempty"`
	PtoActiveClass                        *LabelClasses  `json:"PtoActiveClass,omitempty"`
	RetarderTorqueClass                   *FromToClasses `json:"RetarderTorqueClass,omitempty"`
	SelectedGearClass                     *LabelClasses  `json:"SelectedGearClass,omitempty"`
	StopRequestCounter                    *int64         `json:"StopRequestCounter,omitempty"`
	VehicleSpeedClass                     *FromToClasses `json:"VehicleSpeedClass,omitempty"`
}

// AlternatorInfo defines model for AlternatorInfo.
type AlternatorInfo struct {
	AlternatorNumber *int64           `json:"AlternatorNumber,omitempty"`
	AlternatorStatus AlternatorStatus `json:"AlternatorStatus"`
}

// AlternatorStatus defines model for AlternatorStatus.
type AlternatorStatus string

// DoorEnabledStatus defines model for DoorEnabledStatus.
type DoorEnabledStatus string

// DoorLockStatus defines model for DoorLockStatus.
type DoorLockStatus string

// DoorOpenStatus defines model for DoorOpenStatus.
type DoorOpenStatus string

// DoorStatus defines model for DoorStatus.
type DoorStatus struct {
	DoorEnabledStatus *DoorEnabledStatus `json:"DoorEnabledStatus,omitempty"`
	DoorLockStatus    *DoorLockStatus    `json:"DoorLockStatus,omitempty"`
	DoorNumber        *int64             `json:"DoorNumber,omitempty"`
	DoorOpenStatus    *DoorOpenStatus    `json:"DoorOpenStatus,omitempty"`
}

// DriverAuthenticationType defines model for DriverAuthenticationType.
type DriverAuthenticationType string

// DriverId defines model for DriverId.
type DriverId struct {
	OemDriverIdentification   *OemDriverIdentification   `json:"OemDriverIdentification,omitempty"`
	TachoDriverIdentification *TachoDriverIdentification `json:"TachoDriverIdentification,omitempty"`
}

// DriverWorkingState defines model for DriverWorkingState.
type DriverWorkingState string

// FromToClass defines model for FromToClass.
type FromToClass struct {
	From        *float64 `json:"From,omitempty"`
	Meters      *int64   `json:"Meters,omitempty"`
	MilliLitres *int64   `json:"MilliLitres,omitempty"`
	Seconds     *int64   `json:"Seconds,omitempty"`
	To          *float64 `json:"To,omitempty"`
}

// FromToClasses defines model for FromToClasses.
type FromToClasses struct {
	Value *[]FromToClass `json:"Value,omitempty"`
}

// GNSSPosition defines model for GNSSPosition.
type GNSSPosition struct {
	Altitude         *int64    `json:"Altitude,omitempty"`
	Heading          *int32    `json:"Heading,omitempty"`
	Latitude         *float64  `json:"Latitude,omitempty"`
	Longitude        *float64  `json:"Longitude,omitempty"`
	PositionDateTime time.Time `json:"PositionDateTime"`
	Speed            *float64  `json:"Speed,omitempty"`
}

// LabelClass defines model for LabelClass.
type LabelClass struct {
	Label       string `json:"Label"`
	Meters      *int64 `json:"Meters,omitempty"`
	MilliLitres *int64 `json:"MilliLitres,omitempty"`
	Seconds     *int64 `json:"Seconds,omitempty"`
}

// LabelClasses defines model for LabelClasses.
type LabelClasses struct {
	Value *[]LabelClass `json:"Value,omitempty"`
}

// OemDriverIdentification defines model for OemDriverIdentification.
type OemDriverIdentification struct {
	IdType                  *string `json:"IdType,omitempty"`
	OemDriverIdentification string  `json:"OemDriverIdentification"`
}

// ProductionDate defines model for ProductionDate.
type ProductionDate struct {
	Day   *int32 `json:"Day,omitempty"`
	Month *int32 `json:"Month,omitempty"`
	Year  *int32 `json:"Year,omitempty"`
}

// Snapshot defines model for Snapshot.
type Snapshot struct {
	AmbientAirTemperature *float64            `json:"AmbientAirTemperature,omitempty"`
	CatalystFuelLevel     *float64            `json:"CatalystFuelLevel,omitempty"`
	Driver1WorkingState   *DriverWorkingState `json:"Driver1WorkingState,omitempty"`
	Driver2Id             *DriverId           `json:"Driver2Id,omitempty"`
	Driver2WorkingState   *DriverWorkingState `json:"Driver2WorkingState,omitempty"`
	EngineSpeed           *float64            `json:"EngineSpeed,omitempty"`
	FuelLevel1            *float64            `json:"FuelLevel1,omitempty"`
	GNSSPosition          *GNSSPosition       `json:"GNSSPosition,omitempty"`
	TachographSpeed       *float64            `json:"TachographSpeed,omitempty"`
	WheelBasedSpeed       *float64            `json:"WheelBasedSpeed,omitempty"`
}

// Status2OfDoors defines model for Status2OfDoors.
type Status2OfDoors string

// TachoDriverIdentification defines model for TachoDriverIdentification.
type TachoDriverIdentification struct {
	CardIssuingMemberState        string                    `json:"CardIssuingMemberState"`
	CardRenewalIndex              *string                   `json:"CardRenewalIndex,omitempty"`
	CardReplacementIndex          *string                   `json:"CardReplacementIndex,omitempty"`
	DriverAuthenticationEquipment *DriverAuthenticationType `json:"DriverAuthenticationEquipment,omitempty"`
	DriverIdentification          string                    `json:"DriverIdentification"`
}

// TellTaleInfo defines model for TellTaleInfo.
type TellTaleInfo struct {
	State    TellTaleState `json:"State"`
	TellTale TellTaleType  `json:"TellTale"`
}

// TellTaleState defines model for TellTaleState.
type TellTaleState string

// TellTaleType defines model for TellTaleType.
type TellTaleType string

// Trigger defines model for Trigger.
type Trigger struct {
	Context      string          `json:"Context"`
	DriverId     *DriverId       `json:"DriverId,omitempty"`
	PtoId        *string         `json:"PtoId,omitempty"`
	TellTaleInfo *[]TellTaleInfo `json:"TellTaleInfo,omitempty"`
	Trigger      TriggerType     `json:"Trigger"`
	TriggerInfo  *[]string       `json:"TriggerInfo,omitempty"`
}

// TriggerType defines model for TriggerType.
type TriggerType string

// Uptime defines model for Uptime.
type Uptime struct {
	AlternatorInfo                  *[]AlternatorInfo `json:"AlternatorInfo,omitempty"`
	BellowPressureFrontAxleLeft     *int64            `json:"BellowPressureFrontAxleLeft,omitempty"`
	BellowPressureFrontAxleRight    *int64            `json:"BellowPressureFrontAxleRight,omitempty"`
	BellowPressureRearAxleLeft      *int64            `json:"BellowPressureRearAxleLeft,omitempty"`
	BellowPressureRearAxleRight     *int64            `json:"BellowPressureRearAxleRight,omitempty"`
	DurationAtLeastOneDoorOpen      *int64            `json:"DurationAtLeastOneDoorOpen,omitempty"`
	EngineCoolantTemperature        *float64          `json:"EngineCoolantTemperature,omitempty"`
	ServiceBrakeAirPressureCircuit1 *int64            `json:"ServiceBrakeAirPressureCircuit1,omitempty"`
	ServiceBrakeAirPressureCircuit2 *int64            `json:"ServiceBrakeAirPressureCircuit2,omitempty"`
	ServiceDistance                 *int64            `json:"ServiceDistance,omitempty"`
	TellTaleInfo                    *[]TellTaleInfo   `json:"TellTaleInfo,omitempty"`
}

// Vehicle defines model for Vehicle.
type Vehicle struct {
	BodyType            *string         `json:"BodyType,omitempty"`
	Brand               *string         `json:"Brand,omitempty"`
	ChassisType         *string         `json:"ChassisType,omitempty"`
	CustomerVehicleName *string         `json:"CustomerVehicleName,omitempty"`
	DoorConfiguration   *[]int32        `json:"DoorConfiguration,omitempty"`
	EmissionLevel       *string         `json:"EmissionLevel,omitempty"`
	GearboxType         *string         `json:"GearboxType,omitempty"`
	HasRampOrLift       *bool           `json:"HasRampOrLift,omitempty"`
	Model               *string         `json:"Model,omitempty"`
	NoOfAxles           *int32          `json:"NoOfAxles,omitempty"`
	PossibleFuelType    *[]string       `json:"PossibleFuelType,omitempty"`
	ProductionDate      *ProductionDate `json:"ProductionDate,omitempty"`
	TachographType      *string         `json:"TachographType,omitempty"`
	TellTaleCode        *string         `json:"TellTaleCode,omitempty"`
	TotalFuelTankVolume *int64          `json:"TotalFuelTankVolume,omitempty"`
	Type                *string         `json:"Type,omitempty"`
	VIN                 string          `json:"VIN"`
}

// VehiclePosition defines model for VehiclePosition.
type VehiclePosition struct {
	CreatedDateTime  time.Time     `json:"CreatedDateTime"`
	GNSSPosition     *GNSSPosition `json:"GNSSPosition,omitempty"`
	ReceivedDateTime time.Time     `json:"ReceivedDateTime"`
	TachographSpeed  *float64      `json:"TachographSpeed,omitempty"`
	Trigger          Trigger       `json:"Trigger"`
	VIN              string        `json:"VIN"`
	WheelBasedSpeed  *float64      `json:"WheelBasedSpeed,omitempty"`
}

// VehiclePositions defines model for VehiclePositions.
type VehiclePositions struct {
	MoreDataAvailable     *bool              `json:"MoreDataAvailable,omitempty"`
	RequestServerDateTime time.Time          `json:"RequestServerDateTime"`
	VehiclePosition       *[]VehiclePosition `json:"VehiclePosition,omitempty"`
}

// VehicleStatus defines model for VehicleStatus.
type VehicleStatus struct {
	AccumulatedData               *Accumulated    `json:"AccumulatedData,omitempty"`
	CreatedDateTime               time.Time       `json:"CreatedDateTime"`
	DoorStatus                    *[]DoorStatus   `json:"DoorStatus,omitempty"`
	Driver1Id                     *DriverId       `json:"Driver1Id,omitempty"`
	EngineTotalFuelUsed           *int64          `json:"EngineTotalFuelUsed,omitempty"`
	GrossCombinationVehicleWeight *int            `json:"GrossCombinationVehicleWeight,omitempty"`
	HRTotalVehicleDistance        *int64          `json:"HRTotalVehicleDistance,omitempty"`
	ReceivedDateTime              time.Time       `json:"ReceivedDateTime"`
	SnapshotData                  *Snapshot       `json:"SnapshotData,omitempty"`
	Status2OfDoors                *Status2OfDoors `json:"Status2OfDoors,omitempty"`
	TotalEngineHours              *float64        `json:"TotalEngineHours,omitempty"`
	Trigger                       Trigger         `json:"Trigger"`
	UptimeData                    *Uptime         `json:"UptimeData,omitempty"`
	Vin                           string          `json:"Vin"`
}

// VehicleStatuses defines model for VehicleStatuses.
type VehicleStatuses struct {
	MoreDataAvailable     *bool            `json:"MoreDataAvailable,omitempty"`
	RequestServerDateTime time.Time        `json:"RequestServerDateTime"`
	VehicleStatus         *[]VehicleStatus `json:"VehicleStatus,omitempty"`
}

// Vehicles defines model for Vehicles.
type Vehicles struct {
	MoreDataAvailable *bool      `json:"MoreDataAvailable,omitempty"`
	Vehicle           *[]Vehicle `json:"Vehicle,omitempty"`
}

// GetVehiclePosition210UsingGET1Params defines parameters for GetVehiclePosition210UsingGET1.
type GetVehiclePosition210UsingGET1Params struct {
	// Vin Vehicle Identification Number, 17 characters.
	Vin *string `form:"vin,omitempty" json:"vin,omitempty"`

	// Starttime Only the data created/received after this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Starttime *string `form:"starttime,omitempty" json:"starttime,omitempty"`

	// Stoptime Only the data created/received before this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Stoptime *string `form:"stoptime,omitempty" json:"stoptime,omitempty"`

	// Datetype The start/stop times are compared to the created or received time of the position reports. If this isn’t supplied all times are received times.Possible values are: 'created/received'
	Datetype *string `form:"datetype,omitempty" json:"datetype,omitempty"`

	// TriggerFilter Will only return data reports that were triggered by the trigger
	// defined by the filter. Possible values are:
	//  * TIMER
	//  * TELL_TALE
	//  * DRIVER_LOGIN
	//  * DRIVER_LOGOUT
	//  * IGNITION_ON
	//  * IGNITION_OFF
	//  * ENGINE_ON
	//  * ENGINE_OFF
	//  * PTO_ENABLED
	//  * PTO_DISABLED
	//  * DISTANCE_TRAVELLED
	//  * DRIVER_1_WORKING_STATE_CHANGED
	//  * DRIVER_2_WORKING_STATE_CHANGED
	//
	// If several values are used in the filter they should be in
	// a comma-separated list (Ex: triggerFilter=DRIVER_LOGIN,TIMER). If
	// this filter parameter isn’t supplied the returned data reports
	// contain data reports triggered by any trigger.
	TriggerFilter *string `form:"triggerFilter,omitempty" json:"triggerFilter,omitempty"`

	// LatestOnly If this value is set to true only the last vehicle status event is returned for each vehicle in the response. If this value is set to false (or not present) all vehicle status events matching the starttime/stoptime criteria is returned for each vehicle in the response.
	LatestOnly *bool `form:"latestOnly,omitempty" json:"latestOnly,omitempty"`
}

// GetVehicles210UsingGET1Params defines parameters for GetVehicles210UsingGET1.
type GetVehicles210UsingGET1Params struct {
	// LastVin Mandatory if moreDataAvailable parameter was set to true in previous request for vehicles. It should be set to the VIN of the last vehicle in the result set of this message. The response will return the next block of vehicles not including the one with the given VIN. If moreDataAvailable parameter is set to true the VIN of the last item in the vehicle list in the response is set to lastVin parameter in the next call.
	LastVin *string `form:"lastVin,omitempty" json:"lastVin,omitempty"`
}

// GetVehicleStatus210UsingGET1Params defines parameters for GetVehicleStatus210UsingGET1.
type GetVehicleStatus210UsingGET1Params struct {
	// Vin Vehicle Identification Number, 17 characters.
	Vin *string `form:"vin,omitempty" json:"vin,omitempty"`

	// Starttime Only the data created/received after or equal to this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Starttime *string `form:"starttime,omitempty" json:"starttime,omitempty"`

	// Stoptime Only the data created/received before this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Stoptime *string `form:"stoptime,omitempty" json:"stoptime,omitempty"`

	// Datetype The start/stop times are compared to the created or received time of the position reports. If this isn’t supplied all times are received times.Possible values are: 'created/received'
	Datetype *string `form:"datetype,omitempty" json:"datetype,omitempty"`

	// ContentFilter Will only return data reports that contain information in the area
	// defined by the filters. Possible values are:
	// 'SNAPSHOT/ACCUMULATED/UPTIME'. If several values are used in the
	// filter they should be in a comma-separated list (E.g.:
	// contentFilter=ACCUMULATED,SNAPSHOT).  If this filter parameter isn’t
	// supplied the returned reports contain all available blocks.
	//
	// Both sub type ACCUMULATED and UPTIME produces a lot of information in
	// response payload. If such data is not used in consuming application it
	// can be good to optimize requests by not querying such data to reduce
	// data size in payloads and response time. When content filter is used,
	// only data parameters provided at the triggered event is included in
	// content and only triggered events that contains parameters matching
	// the content filter are part of response. When content filter is not
	// used an aggregated view of all parameters and its state at each given
	// event is provided.
	ContentFilter *string `form:"contentFilter,omitempty" json:"contentFilter,omitempty"`

	// TriggerFilter Will only return data reports that were triggered by the trigger
	// defined by the filter. Possible values are:
	//  * TIMER
	//  * TELL_TALE
	//  * DRIVER_LOGIN
	//  * DRIVER_LOGOUT
	//  * IGNITION_ON
	//  * IGNITION_OFF
	//  * ENGINE_ON
	//  * ENGINE_OFF
	//  * PTO_ENABLED
	//  * PTO_DISABLED
	//  * DISTANCE_TRAVELLED
	//  * DRIVER_1_WORKING_STATE_CHANGED
	//  * DRIVER_2_WORKING_STATE_CHANGED
	//
	// If several values are used in the filter they should be in
	// a comma-separated list (Ex: triggerFilter=DRIVER_LOGIN,TIMER). If
	// this filter parameter isn’t supplied the returned data reports
	// contain data reports triggered by any trigger.
	TriggerFilter *string `form:"triggerFilter,omitempty" json:"triggerFilter,omitempty"`

	// LatestOnly If this value is set to true only the last vehicle status event is returned for each vehicle in the response. If this value is set to false (or not present) all vehicle status events matching the starttime/stoptime criteria is returned for each vehicle in the response.
	LatestOnly *bool `form:"latestOnly,omitempty" json:"latestOnly,omitempty"`
}
