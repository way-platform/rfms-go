// Package apiv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apiv2

import (
	"time"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for AlternatorInfoTypeAlternatorStatus.
const (
	AlternatorInfoTypeAlternatorStatusCHARGING     AlternatorInfoTypeAlternatorStatus = "CHARGING"
	AlternatorInfoTypeAlternatorStatusERROR        AlternatorInfoTypeAlternatorStatus = "ERROR"
	AlternatorInfoTypeAlternatorStatusNOTAVAILABLE AlternatorInfoTypeAlternatorStatus = "NOT_AVAILABLE"
	AlternatorInfoTypeAlternatorStatusNOTCHARGING  AlternatorInfoTypeAlternatorStatus = "NOT_CHARGING"
)

// Defines values for DoorStatusTypeDoorEnabledStatus.
const (
	DoorStatusTypeDoorEnabledStatusDISABLED     DoorStatusTypeDoorEnabledStatus = "DISABLED"
	DoorStatusTypeDoorEnabledStatusENABLED      DoorStatusTypeDoorEnabledStatus = "ENABLED"
	DoorStatusTypeDoorEnabledStatusERROR        DoorStatusTypeDoorEnabledStatus = "ERROR"
	DoorStatusTypeDoorEnabledStatusNOTAVAILABLE DoorStatusTypeDoorEnabledStatus = "NOT_AVAILABLE"
)

// Defines values for DoorStatusTypeDoorLockStatus.
const (
	DoorStatusTypeDoorLockStatusERROR        DoorStatusTypeDoorLockStatus = "ERROR"
	DoorStatusTypeDoorLockStatusLOCKED       DoorStatusTypeDoorLockStatus = "LOCKED"
	DoorStatusTypeDoorLockStatusNOTAVAILABLE DoorStatusTypeDoorLockStatus = "NOT_AVAILABLE"
	DoorStatusTypeDoorLockStatusUNLOCKED     DoorStatusTypeDoorLockStatus = "UNLOCKED"
)

// Defines values for DoorStatusTypeDoorOpenStatus.
const (
	DoorStatusTypeDoorOpenStatusCLOSED       DoorStatusTypeDoorOpenStatus = "CLOSED"
	DoorStatusTypeDoorOpenStatusERROR        DoorStatusTypeDoorOpenStatus = "ERROR"
	DoorStatusTypeDoorOpenStatusNOTAVAILABLE DoorStatusTypeDoorOpenStatus = "NOT_AVAILABLE"
	DoorStatusTypeDoorOpenStatusOPEN         DoorStatusTypeDoorOpenStatus = "OPEN"
)

// Defines values for SnapshotTypeDriver1WorkingState.
const (
	SnapshotTypeDriver1WorkingStateDRIVE           SnapshotTypeDriver1WorkingState = "DRIVE"
	SnapshotTypeDriver1WorkingStateDRIVERAVAILABLE SnapshotTypeDriver1WorkingState = "DRIVER_AVAILABLE"
	SnapshotTypeDriver1WorkingStateERROR           SnapshotTypeDriver1WorkingState = "ERROR"
	SnapshotTypeDriver1WorkingStateNOTAVAILABLE    SnapshotTypeDriver1WorkingState = "NOT_AVAILABLE"
	SnapshotTypeDriver1WorkingStateREST            SnapshotTypeDriver1WorkingState = "REST"
	SnapshotTypeDriver1WorkingStateWORK            SnapshotTypeDriver1WorkingState = "WORK"
)

// Defines values for SnapshotTypeDriver2WorkingState.
const (
	SnapshotTypeDriver2WorkingStateDRIVE           SnapshotTypeDriver2WorkingState = "DRIVE"
	SnapshotTypeDriver2WorkingStateDRIVERAVAILABLE SnapshotTypeDriver2WorkingState = "DRIVER_AVAILABLE"
	SnapshotTypeDriver2WorkingStateERROR           SnapshotTypeDriver2WorkingState = "ERROR"
	SnapshotTypeDriver2WorkingStateNOTAVAILABLE    SnapshotTypeDriver2WorkingState = "NOT_AVAILABLE"
	SnapshotTypeDriver2WorkingStateREST            SnapshotTypeDriver2WorkingState = "REST"
	SnapshotTypeDriver2WorkingStateWORK            SnapshotTypeDriver2WorkingState = "WORK"
)

// Defines values for TachoDriverIdentificationTypeDriverAuthenticationEquipment.
const (
	COMPANYCARD       TachoDriverIdentificationTypeDriverAuthenticationEquipment = "COMPANY_CARD"
	CONTROLCARD       TachoDriverIdentificationTypeDriverAuthenticationEquipment = "CONTROL_CARD"
	DRIVERCARD        TachoDriverIdentificationTypeDriverAuthenticationEquipment = "DRIVER_CARD"
	MANUFACTURINGCARD TachoDriverIdentificationTypeDriverAuthenticationEquipment = "MANUFACTURING_CARD"
	MOTIONSENSOR      TachoDriverIdentificationTypeDriverAuthenticationEquipment = "MOTION_SENSOR"
	RESERVED          TachoDriverIdentificationTypeDriverAuthenticationEquipment = "RESERVED"
	VEHICLEUNIT       TachoDriverIdentificationTypeDriverAuthenticationEquipment = "VEHICLE_UNIT"
)

// Defines values for TellTaleInfoTypeState.
const (
	TellTaleInfoTypeStateINFO         TellTaleInfoTypeState = "INFO"
	TellTaleInfoTypeStateNOTAVAILABLE TellTaleInfoTypeState = "NOT_AVAILABLE"
	TellTaleInfoTypeStateOFF          TellTaleInfoTypeState = "OFF"
	TellTaleInfoTypeStateRED          TellTaleInfoTypeState = "RED"
	TellTaleInfoTypeStateRESERVED4    TellTaleInfoTypeState = "RESERVED_4"
	TellTaleInfoTypeStateRESERVED5    TellTaleInfoTypeState = "RESERVED_5"
	TellTaleInfoTypeStateRESERVED6    TellTaleInfoTypeState = "RESERVED_6"
	TellTaleInfoTypeStateYELLOW       TellTaleInfoTypeState = "YELLOW"
)

// Defines values for TellTaleInfoTypeTellTale.
const (
	ABSTRAILER                      TellTaleInfoTypeTellTale = "ABS_TRAILER"
	ACC                             TellTaleInfoTypeTellTale = "ACC"
	ADBLUELEVEL                     TellTaleInfoTypeTellTale = "ADBLUE_LEVEL"
	ADVANCEDEMERGENCYBREAKING       TellTaleInfoTypeTellTale = "ADVANCED_EMERGENCY_BREAKING"
	AIRBAG                          TellTaleInfoTypeTellTale = "AIRBAG"
	AIRFILTERCLOGGED                TellTaleInfoTypeTellTale = "AIR_FILTER_CLOGGED"
	ANTILOCKBRAKEFAILURE            TellTaleInfoTypeTellTale = "ANTI_LOCK_BRAKE_FAILURE"
	ARTICULATION                    TellTaleInfoTypeTellTale = "ARTICULATION"
	AUXILLARYAIRPRESSURE            TellTaleInfoTypeTellTale = "AUXILLARY_AIR_PRESSURE"
	BATTERYCHARGINGCONDITION        TellTaleInfoTypeTellTale = "BATTERY_CHARGING_CONDITION"
	BRAKELIGHTS                     TellTaleInfoTypeTellTale = "BRAKE_LIGHTS"
	BRAKEMALFUNCTION                TellTaleInfoTypeTellTale = "BRAKE_MALFUNCTION"
	BUSSTOPBRAKE                    TellTaleInfoTypeTellTale = "BUS_STOP_BRAKE"
	COOLINGAIRCONDITIONING          TellTaleInfoTypeTellTale = "COOLING_AIR_CONDITIONING"
	EBS                             TellTaleInfoTypeTellTale = "EBS"
	EBSTRAILER12                    TellTaleInfoTypeTellTale = "EBS_TRAILER_1_2"
	ENGINECOMPARTMENTTEMPERATURE    TellTaleInfoTypeTellTale = "ENGINE_COMPARTMENT_TEMPERATURE"
	ENGINECOOLANTLEVEL              TellTaleInfoTypeTellTale = "ENGINE_COOLANT_LEVEL"
	ENGINECOOLANTTEMPERATURE        TellTaleInfoTypeTellTale = "ENGINE_COOLANT_TEMPERATURE"
	ENGINEEMISSIONFAILURE           TellTaleInfoTypeTellTale = "ENGINE_EMISSION_FAILURE"
	ENGINEMILINDICATOR              TellTaleInfoTypeTellTale = "ENGINE_MIL_INDICATOR"
	ENGINEOIL                       TellTaleInfoTypeTellTale = "ENGINE_OIL"
	ENGINEOILLEVEL                  TellTaleInfoTypeTellTale = "ENGINE_OIL_LEVEL"
	ENGINEOILTEMPERATURE            TellTaleInfoTypeTellTale = "ENGINE_OIL_TEMPERATURE"
	ESCINDICATOR                    TellTaleInfoTypeTellTale = "ESC_INDICATOR"
	ESCSWITCHEDOFF                  TellTaleInfoTypeTellTale = "ESC_SWITCHED_OFF"
	FRONTFOGLIGHT                   TellTaleInfoTypeTellTale = "FRONT_FOG_LIGHT"
	FUELFILTERDIFFPRESSURE          TellTaleInfoTypeTellTale = "FUEL_FILTER_DIFF_PRESSURE"
	FUELLEVEL                       TellTaleInfoTypeTellTale = "FUEL_LEVEL"
	GENERALFAILURE                  TellTaleInfoTypeTellTale = "GENERAL_FAILURE"
	HATCHOPEN                       TellTaleInfoTypeTellTale = "HATCH_OPEN"
	HAZARDWARNING                   TellTaleInfoTypeTellTale = "HAZARD_WARNING"
	HEIGHTCONTROL                   TellTaleInfoTypeTellTale = "HEIGHT_CONTROL"
	HIGHBEAMMAINBEAM                TellTaleInfoTypeTellTale = "HIGH_BEAM_MAIN_BEAM"
	KNEELING                        TellTaleInfoTypeTellTale = "KNEELING"
	LANEDEPARTUREINDICATOR          TellTaleInfoTypeTellTale = "LANE_DEPARTURE_INDICATOR"
	LANEDEPARTUREWARNINGSWITCHEDOFF TellTaleInfoTypeTellTale = "LANE_DEPARTURE_WARNING_SWITCHED_OFF"
	LOWBEAMDIPPEDBEAM               TellTaleInfoTypeTellTale = "LOW_BEAM_DIPPED_BEAM"
	LOWERING                        TellTaleInfoTypeTellTale = "LOWERING"
	OEMSPECIFICTELLTALE             TellTaleInfoTypeTellTale = "OEM_SPECIFIC_TELL_TALE"
	PARKINGBRAKE                    TellTaleInfoTypeTellTale = "PARKING_BRAKE"
	PARKINGHEATER                   TellTaleInfoTypeTellTale = "PARKING_HEATER"
	POSITIONLIGHTS                  TellTaleInfoTypeTellTale = "POSITION_LIGHTS"
	PRAMREQUEST                     TellTaleInfoTypeTellTale = "PRAM_REQUEST"
	PROVISIONINGHANDICAPPEDPERSON   TellTaleInfoTypeTellTale = "PROVISIONING_HANDICAPPED_PERSON"
	RAISING                         TellTaleInfoTypeTellTale = "RAISING"
	REARFOGLIGHT                    TellTaleInfoTypeTellTale = "REAR_FOG_LIGHT"
	RETARDER                        TellTaleInfoTypeTellTale = "RETARDER"
	SEATBELT                        TellTaleInfoTypeTellTale = "SEAT_BELT"
	SERVICECALLFORMAINTENANCE       TellTaleInfoTypeTellTale = "SERVICE_CALL_FOR_MAINTENANCE"
	STEERINGFAILURE                 TellTaleInfoTypeTellTale = "STEERING_FAILURE"
	STEERINGFLUIDLEVEL              TellTaleInfoTypeTellTale = "STEERING_FLUID_LEVEL"
	STOPREQUEST                     TellTaleInfoTypeTellTale = "STOP_REQUEST"
	TACHOGRAPHINDICATOR             TellTaleInfoTypeTellTale = "TACHOGRAPH_INDICATOR"
	TIREMALFUNCTION                 TellTaleInfoTypeTellTale = "TIRE_MALFUNCTION"
	TRAILERCONNECTED                TellTaleInfoTypeTellTale = "TRAILER_CONNECTED"
	TRANSMISSIONFLUIDTEMPERATURE    TellTaleInfoTypeTellTale = "TRANSMISSION_FLUID_TEMPERATURE"
	TRANSMISSIONMALFUNCTION         TellTaleInfoTypeTellTale = "TRANSMISSION_MALFUNCTION"
	TURNSIGNALS                     TellTaleInfoTypeTellTale = "TURN_SIGNALS"
	WINDSCREENWASHERFLUID           TellTaleInfoTypeTellTale = "WINDSCREEN_WASHER_FLUID"
	WORNBRAKELININGS                TellTaleInfoTypeTellTale = "WORN_BRAKE_LININGS"
)

// Defines values for VehicleStatusTypeStatus2OfDoors.
const (
	VehicleStatusTypeStatus2OfDoorsALLDOORSDISABLED      VehicleStatusTypeStatus2OfDoors = "ALL_DOORS_DISABLED"
	VehicleStatusTypeStatus2OfDoorsATLEASTONEDOORENABLED VehicleStatusTypeStatus2OfDoors = "AT_LEAST_ONE_DOOR_ENABLED"
	VehicleStatusTypeStatus2OfDoorsERROR                 VehicleStatusTypeStatus2OfDoors = "ERROR"
	VehicleStatusTypeStatus2OfDoorsNOTAVAILABLE          VehicleStatusTypeStatus2OfDoors = "NOT_AVAILABLE"
)

// AccumulatedType defines model for AccumulatedType.
type AccumulatedType struct {
	AccelerationClass                     *FromToClassesType `json:"AccelerationClass,omitempty"`
	AccelerationDuringBrakeClass          *FromToClassesType `json:"AccelerationDuringBrakeClass,omitempty"`
	AccelerationPedalPositionClass        *FromToClassesType `json:"AccelerationPedalPositionClass,omitempty"`
	BrakePedalCounterSpeedOverZero        *int64             `json:"BrakePedalCounterSpeedOverZero,omitempty"`
	ChairliftCounter                      *int64             `json:"ChairliftCounter,omitempty"`
	CurrentGearClass                      *LabelClassesType  `json:"CurrentGearClass,omitempty"`
	DistanceBrakePedalActiveSpeedOverZero *int64             `json:"DistanceBrakePedalActiveSpeedOverZero,omitempty"`
	DistanceCruiseControlActive           *int64             `json:"DistanceCruiseControlActive,omitempty"`
	DrivingWithoutTorqueClass             *LabelClassesType  `json:"DrivingWithoutTorqueClass,omitempty"`
	DurationCruiseControlActive           *int64             `json:"DurationCruiseControlActive,omitempty"`
	DurationWheelbaseSpeedOverZero        *int64             `json:"DurationWheelbaseSpeedOverZero,omitempty"`
	DurationWheelbaseSpeedZero            *int64             `json:"DurationWheelbaseSpeedZero,omitempty"`
	EngineSpeedClass                      *FromToClassesType `json:"EngineSpeedClass,omitempty"`
	EngineTorqueAtCurrentSpeedClass       *FromToClassesType `json:"EngineTorqueAtCurrentSpeedClass,omitempty"`
	EngineTorqueClass                     *FromToClassesType `json:"EngineTorqueClass,omitempty"`
	FuelConsumptionCruiseControlActive    *int64             `json:"FuelConsumptionCruiseControlActive,omitempty"`
	FuelWheelbaseSpeedOverZero            *int64             `json:"FuelWheelbaseSpeedOverZero,omitempty"`
	FuelWheelbaseSpeedZero                *int64             `json:"FuelWheelbaseSpeedZero,omitempty"`
	HighAccelerationClass                 *FromToClassesType `json:"HighAccelerationClass,omitempty"`
	KneelingCounter                       *int64             `json:"KneelingCounter,omitempty"`
	PramRequestCounter                    *int64             `json:"PramRequestCounter,omitempty"`
	PtoActiveClass                        *LabelClassesType  `json:"PtoActiveClass,omitempty"`
	RetarderTorqueClass                   *FromToClassesType `json:"RetarderTorqueClass,omitempty"`
	SelectedGearClass                     *LabelClassesType  `json:"SelectedGearClass,omitempty"`
	StopRequestCounter                    *int64             `json:"StopRequestCounter,omitempty"`
	VehicleSpeedClass                     *FromToClassesType `json:"VehicleSpeedClass,omitempty"`
}

// AlternatorInfoType defines model for AlternatorInfoType.
type AlternatorInfoType struct {
	AlternatorNumber *int64                             `json:"AlternatorNumber,omitempty"`
	AlternatorStatus AlternatorInfoTypeAlternatorStatus `json:"AlternatorStatus"`
}

// AlternatorInfoTypeAlternatorStatus defines model for AlternatorInfoType.AlternatorStatus.
type AlternatorInfoTypeAlternatorStatus string

// DoorStatusType defines model for DoorStatusType.
type DoorStatusType struct {
	DoorEnabledStatus *DoorStatusTypeDoorEnabledStatus `json:"DoorEnabledStatus,omitempty"`
	DoorLockStatus    *DoorStatusTypeDoorLockStatus    `json:"DoorLockStatus,omitempty"`
	DoorNumber        *int64                           `json:"DoorNumber,omitempty"`
	DoorOpenStatus    *DoorStatusTypeDoorOpenStatus    `json:"DoorOpenStatus,omitempty"`
}

// DoorStatusTypeDoorEnabledStatus defines model for DoorStatusType.DoorEnabledStatus.
type DoorStatusTypeDoorEnabledStatus string

// DoorStatusTypeDoorLockStatus defines model for DoorStatusType.DoorLockStatus.
type DoorStatusTypeDoorLockStatus string

// DoorStatusTypeDoorOpenStatus defines model for DoorStatusType.DoorOpenStatus.
type DoorStatusTypeDoorOpenStatus string

// DriverIdType defines model for DriverIdType.
type DriverIdType struct {
	OemDriverIdentification   *OemDriverIdentificationType   `json:"OemDriverIdentification,omitempty"`
	TachoDriverIdentification *TachoDriverIdentificationType `json:"TachoDriverIdentification,omitempty"`
}

// FromToClassType defines model for FromToClassType.
type FromToClassType struct {
	From        *float64 `json:"From,omitempty"`
	Meters      *int64   `json:"Meters,omitempty"`
	MilliLitres *int64   `json:"MilliLitres,omitempty"`
	Seconds     *int64   `json:"Seconds,omitempty"`
	To          *float64 `json:"To,omitempty"`
}

// FromToClassesType defines model for FromToClassesType.
type FromToClassesType struct {
	Value *[]FromToClassType `json:"Value,omitempty"`
}

// GNSSPositionType defines model for GNSSPositionType.
type GNSSPositionType struct {
	Altitude         *int64    `json:"Altitude,omitempty"`
	Heading          *int32    `json:"Heading,omitempty"`
	Latitude         *float64  `json:"Latitude,omitempty"`
	Longitude        *float64  `json:"Longitude,omitempty"`
	PositionDateTime time.Time `json:"PositionDateTime"`
	Speed            *float64  `json:"Speed,omitempty"`
}

// LabelClassType defines model for LabelClassType.
type LabelClassType struct {
	Label       string `json:"Label"`
	Meters      *int64 `json:"Meters,omitempty"`
	MilliLitres *int64 `json:"MilliLitres,omitempty"`
	Seconds     *int64 `json:"Seconds,omitempty"`
}

// LabelClassesType defines model for LabelClassesType.
type LabelClassesType struct {
	Value *[]LabelClassType `json:"Value,omitempty"`
}

// OemDriverIdentificationType defines model for OemDriverIdentificationType.
type OemDriverIdentificationType struct {
	IdType                  *string `json:"IdType,omitempty"`
	OemDriverIdentification string  `json:"OemDriverIdentification"`
}

// ProductionDateType defines model for ProductionDateType.
type ProductionDateType struct {
	Day   *int32 `json:"Day,omitempty"`
	Month *int32 `json:"Month,omitempty"`
	Year  *int32 `json:"Year,omitempty"`
}

// SnapshotType defines model for SnapshotType.
type SnapshotType struct {
	AmbientAirTemperature *float64                         `json:"AmbientAirTemperature,omitempty"`
	CatalystFuelLevel     *float64                         `json:"CatalystFuelLevel,omitempty"`
	Driver1WorkingState   *SnapshotTypeDriver1WorkingState `json:"Driver1WorkingState,omitempty"`
	Driver2Id             *DriverIdType                    `json:"Driver2Id,omitempty"`
	Driver2WorkingState   *SnapshotTypeDriver2WorkingState `json:"Driver2WorkingState,omitempty"`
	EngineSpeed           *float64                         `json:"EngineSpeed,omitempty"`
	FuelLevel1            *float64                         `json:"FuelLevel1,omitempty"`
	GNSSPosition          *GNSSPositionType                `json:"GNSSPosition,omitempty"`
	TachographSpeed       *float64                         `json:"TachographSpeed,omitempty"`
	WheelBasedSpeed       *float64                         `json:"WheelBasedSpeed,omitempty"`
}

// SnapshotTypeDriver1WorkingState defines model for SnapshotType.Driver1WorkingState.
type SnapshotTypeDriver1WorkingState string

// SnapshotTypeDriver2WorkingState defines model for SnapshotType.Driver2WorkingState.
type SnapshotTypeDriver2WorkingState string

// TachoDriverIdentificationType defines model for TachoDriverIdentificationType.
type TachoDriverIdentificationType struct {
	CardIssuingMemberState        string                                                      `json:"CardIssuingMemberState"`
	CardRenewalIndex              *string                                                     `json:"CardRenewalIndex,omitempty"`
	CardReplacementIndex          *string                                                     `json:"CardReplacementIndex,omitempty"`
	DriverAuthenticationEquipment *TachoDriverIdentificationTypeDriverAuthenticationEquipment `json:"DriverAuthenticationEquipment,omitempty"`
	DriverIdentification          string                                                      `json:"DriverIdentification"`
}

// TachoDriverIdentificationTypeDriverAuthenticationEquipment defines model for TachoDriverIdentificationType.DriverAuthenticationEquipment.
type TachoDriverIdentificationTypeDriverAuthenticationEquipment string

// TellTaleInfoType defines model for TellTaleInfoType.
type TellTaleInfoType struct {
	State    TellTaleInfoTypeState    `json:"State"`
	TellTale TellTaleInfoTypeTellTale `json:"TellTale"`
}

// TellTaleInfoTypeState defines model for TellTaleInfoType.State.
type TellTaleInfoTypeState string

// TellTaleInfoTypeTellTale defines model for TellTaleInfoType.TellTale.
type TellTaleInfoTypeTellTale string

// TriggerType defines model for TriggerType.
type TriggerType struct {
	Context      string              `json:"Context"`
	DriverId     *DriverIdType       `json:"DriverId,omitempty"`
	PtoId        *string             `json:"PtoId,omitempty"`
	TellTaleInfo *[]TellTaleInfoType `json:"TellTaleInfo,omitempty"`
	TriggerInfo  *[]string           `json:"TriggerInfo,omitempty"`
	TriggerType  string              `json:"TriggerType"`
}

// UptimeType defines model for UptimeType.
type UptimeType struct {
	AlternatorInfo                  *[]AlternatorInfoType `json:"AlternatorInfo,omitempty"`
	BellowPressureFrontAxleLeft     *int64                `json:"BellowPressureFrontAxleLeft,omitempty"`
	BellowPressureFrontAxleRight    *int64                `json:"BellowPressureFrontAxleRight,omitempty"`
	BellowPressureRearAxleLeft      *int64                `json:"BellowPressureRearAxleLeft,omitempty"`
	BellowPressureRearAxleRight     *int64                `json:"BellowPressureRearAxleRight,omitempty"`
	DurationAtLeastOneDoorOpen      *int64                `json:"DurationAtLeastOneDoorOpen,omitempty"`
	EngineCoolantTemperature        *float64              `json:"EngineCoolantTemperature,omitempty"`
	ServiceBrakeAirPressureCircuit1 *int64                `json:"ServiceBrakeAirPressureCircuit1,omitempty"`
	ServiceBrakeAirPressureCircuit2 *int64                `json:"ServiceBrakeAirPressureCircuit2,omitempty"`
	ServiceDistance                 *int64                `json:"ServiceDistance,omitempty"`
	TellTaleInfo                    *[]TellTaleInfoType   `json:"TellTaleInfo,omitempty"`
}

// VehiclePositionType defines model for VehiclePositionType.
type VehiclePositionType struct {
	CreatedDateTime  time.Time         `json:"CreatedDateTime"`
	GNSSPosition     *GNSSPositionType `json:"GNSSPosition,omitempty"`
	ReceivedDateTime time.Time         `json:"ReceivedDateTime"`
	TachographSpeed  *float64          `json:"TachographSpeed,omitempty"`
	TriggerType      TriggerType       `json:"TriggerType"`
	VIN              string            `json:"VIN"`
	WheelBasedSpeed  *float64          `json:"WheelBasedSpeed,omitempty"`
}

// VehiclePositions defines model for VehiclePositions.
type VehiclePositions struct {
	MoreDataAvailable     *bool                  `json:"MoreDataAvailable,omitempty"`
	RequestServerDateTime time.Time              `json:"RequestServerDateTime"`
	VehiclePosition       *[]VehiclePositionType `json:"VehiclePosition,omitempty"`
}

// VehicleStatusType defines model for VehicleStatusType.
type VehicleStatusType struct {
	AccumulatedData               *AccumulatedType                 `json:"AccumulatedData,omitempty"`
	CreatedDateTime               time.Time                        `json:"CreatedDateTime"`
	DoorStatus                    *[]DoorStatusType                `json:"DoorStatus,omitempty"`
	Driver1Id                     *DriverIdType                    `json:"Driver1Id,omitempty"`
	EngineTotalFuelUsed           *int64                           `json:"EngineTotalFuelUsed,omitempty"`
	GrossCombinationVehicleWeight *int                             `json:"GrossCombinationVehicleWeight,omitempty"`
	HRTotalVehicleDistance        *int64                           `json:"HRTotalVehicleDistance,omitempty"`
	ReceivedDateTime              time.Time                        `json:"ReceivedDateTime"`
	SnapshotData                  *SnapshotType                    `json:"SnapshotData,omitempty"`
	Status2OfDoors                *VehicleStatusTypeStatus2OfDoors `json:"Status2OfDoors,omitempty"`
	TotalEngineHours              *float64                         `json:"TotalEngineHours,omitempty"`
	TriggerType                   TriggerType                      `json:"TriggerType"`
	UptimeData                    *UptimeType                      `json:"UptimeData,omitempty"`
	Vin                           string                           `json:"Vin"`
}

// VehicleStatusTypeStatus2OfDoors defines model for VehicleStatusType.Status2OfDoors.
type VehicleStatusTypeStatus2OfDoors string

// VehicleStatuses defines model for VehicleStatuses.
type VehicleStatuses struct {
	MoreDataAvailable     *bool                `json:"MoreDataAvailable,omitempty"`
	RequestServerDateTime time.Time            `json:"RequestServerDateTime"`
	VehicleStatus         *[]VehicleStatusType `json:"VehicleStatus,omitempty"`
}

// VehicleType defines model for VehicleType.
type VehicleType struct {
	BodyType            *string             `json:"BodyType,omitempty"`
	Brand               *string             `json:"Brand,omitempty"`
	ChassisType         *string             `json:"ChassisType,omitempty"`
	CustomerVehicleName *string             `json:"CustomerVehicleName,omitempty"`
	DoorConfiguration   *[]int32            `json:"DoorConfiguration,omitempty"`
	EmissionLevel       *string             `json:"EmissionLevel,omitempty"`
	GearboxType         *string             `json:"GearboxType,omitempty"`
	HasRampOrLift       *bool               `json:"HasRampOrLift,omitempty"`
	Model               *string             `json:"Model,omitempty"`
	NoOfAxles           *int32              `json:"NoOfAxles,omitempty"`
	PossibleFuelType    *[]string           `json:"PossibleFuelType,omitempty"`
	ProductionDate      *ProductionDateType `json:"ProductionDate,omitempty"`
	TachographType      *string             `json:"TachographType,omitempty"`
	TellTaleCode        *string             `json:"TellTaleCode,omitempty"`
	TotalFuelTankVolume *int64              `json:"TotalFuelTankVolume,omitempty"`
	Type                *string             `json:"Type,omitempty"`
	VIN                 string              `json:"VIN"`
}

// Vehicles defines model for Vehicles.
type Vehicles struct {
	MoreDataAvailable *bool          `json:"MoreDataAvailable,omitempty"`
	Vehicle           *[]VehicleType `json:"Vehicle,omitempty"`
}

// GetVehiclePosition210UsingGET1Params defines parameters for GetVehiclePosition210UsingGET1.
type GetVehiclePosition210UsingGET1Params struct {
	// Vin Vehicle Identification Number, 17 characters.
	Vin *string `form:"vin,omitempty" json:"vin,omitempty"`

	// Starttime Only the data created/received after this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Starttime *string `form:"starttime,omitempty" json:"starttime,omitempty"`

	// Stoptime Only the data created/received before this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Stoptime *string `form:"stoptime,omitempty" json:"stoptime,omitempty"`

	// Datetype The start/stop times are compared to the created or received time of the position reports. If this isn’t supplied all times are received times.Possible values are: 'created/received'
	Datetype *string `form:"datetype,omitempty" json:"datetype,omitempty"`

	// TriggerFilter Will only return data reports that were triggered by the trigger
	// defined by the filter. Possible values are:
	//  * TIMER
	//  * TELL_TALE
	//  * DRIVER_LOGIN
	//  * DRIVER_LOGOUT
	//  * IGNITION_ON
	//  * IGNITION_OFF
	//  * ENGINE_ON
	//  * ENGINE_OFF
	//  * PTO_ENABLED
	//  * PTO_DISABLED
	//  * DISTANCE_TRAVELLED
	//  * DRIVER_1_WORKING_STATE_CHANGED
	//  * DRIVER_2_WORKING_STATE_CHANGED
	//
	// If several values are used in the filter they should be in
	// a comma-separated list (Ex: triggerFilter=DRIVER_LOGIN,TIMER). If
	// this filter parameter isn’t supplied the returned data reports
	// contain data reports triggered by any trigger.
	TriggerFilter *string `form:"triggerFilter,omitempty" json:"triggerFilter,omitempty"`

	// LatestOnly If this value is set to true only the last vehicle status event is returned for each vehicle in the response. If this value is set to false (or not present) all vehicle status events matching the starttime/stoptime criteria is returned for each vehicle in the response.
	LatestOnly *bool `form:"latestOnly,omitempty" json:"latestOnly,omitempty"`
}

// GetVehicles210UsingGET1Params defines parameters for GetVehicles210UsingGET1.
type GetVehicles210UsingGET1Params struct {
	// LastVin Mandatory if moreDataAvailable parameter was set to true in previous request for vehicles. It should be set to the VIN of the last vehicle in the result set of this message. The response will return the next block of vehicles not including the one with the given VIN. If moreDataAvailable parameter is set to true the VIN of the last item in the vehicle list in the response is set to lastVin parameter in the next call.
	LastVin *string `form:"lastVin,omitempty" json:"lastVin,omitempty"`
}

// GetVehicleStatus210UsingGET1Params defines parameters for GetVehicleStatus210UsingGET1.
type GetVehicleStatus210UsingGET1Params struct {
	// Vin Vehicle Identification Number, 17 characters.
	Vin *string `form:"vin,omitempty" json:"vin,omitempty"`

	// Starttime Only the data created/received after or equal to this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Starttime *string `form:"starttime,omitempty" json:"starttime,omitempty"`

	// Stoptime Only the data created/received before this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Stoptime *string `form:"stoptime,omitempty" json:"stoptime,omitempty"`

	// Datetype The start/stop times are compared to the created or received time of the position reports. If this isn’t supplied all times are received times.Possible values are: 'created/received'
	Datetype *string `form:"datetype,omitempty" json:"datetype,omitempty"`

	// ContentFilter Will only return data reports that contain information in the area
	// defined by the filters. Possible values are:
	// 'SNAPSHOT/ACCUMULATED/UPTIME'. If several values are used in the
	// filter they should be in a comma-separated list (E.g.:
	// contentFilter=ACCUMULATED,SNAPSHOT).  If this filter parameter isn’t
	// supplied the returned reports contain all available blocks.
	//
	// Both sub type ACCUMULATED and UPTIME produces a lot of information in
	// response payload. If such data is not used in consuming application it
	// can be good to optimize requests by not querying such data to reduce
	// data size in payloads and response time. When content filter is used,
	// only data parameters provided at the triggered event is included in
	// content and only triggered events that contains parameters matching
	// the content filter are part of response. When content filter is not
	// used an aggregated view of all parameters and its state at each given
	// event is provided.
	ContentFilter *string `form:"contentFilter,omitempty" json:"contentFilter,omitempty"`

	// TriggerFilter Will only return data reports that were triggered by the trigger
	// defined by the filter. Possible values are:
	//  * TIMER
	//  * TELL_TALE
	//  * DRIVER_LOGIN
	//  * DRIVER_LOGOUT
	//  * IGNITION_ON
	//  * IGNITION_OFF
	//  * ENGINE_ON
	//  * ENGINE_OFF
	//  * PTO_ENABLED
	//  * PTO_DISABLED
	//  * DISTANCE_TRAVELLED
	//  * DRIVER_1_WORKING_STATE_CHANGED
	//  * DRIVER_2_WORKING_STATE_CHANGED
	//
	// If several values are used in the filter they should be in
	// a comma-separated list (Ex: triggerFilter=DRIVER_LOGIN,TIMER). If
	// this filter parameter isn’t supplied the returned data reports
	// contain data reports triggered by any trigger.
	TriggerFilter *string `form:"triggerFilter,omitempty" json:"triggerFilter,omitempty"`

	// LatestOnly If this value is set to true only the last vehicle status event is returned for each vehicle in the response. If this value is set to false (or not present) all vehicle status events matching the starttime/stoptime criteria is returned for each vehicle in the response.
	LatestOnly *bool `form:"latestOnly,omitempty" json:"latestOnly,omitempty"`
}
