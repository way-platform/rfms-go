// Package apiv2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package apiv2

import (
	"time"
)

const (
	BasicAuthScopes = "basicAuth.Scopes"
)

// Defines values for AlternatorInfoAlternatorStatus.
const (
	AlternatorInfoAlternatorStatusCHARGING     AlternatorInfoAlternatorStatus = "CHARGING"
	AlternatorInfoAlternatorStatusERROR        AlternatorInfoAlternatorStatus = "ERROR"
	AlternatorInfoAlternatorStatusNOTAVAILABLE AlternatorInfoAlternatorStatus = "NOT_AVAILABLE"
	AlternatorInfoAlternatorStatusNOTCHARGING  AlternatorInfoAlternatorStatus = "NOT_CHARGING"
)

// Defines values for DoorStatusDoorEnabledStatus.
const (
	DoorStatusDoorEnabledStatusDISABLED     DoorStatusDoorEnabledStatus = "DISABLED"
	DoorStatusDoorEnabledStatusENABLED      DoorStatusDoorEnabledStatus = "ENABLED"
	DoorStatusDoorEnabledStatusERROR        DoorStatusDoorEnabledStatus = "ERROR"
	DoorStatusDoorEnabledStatusNOTAVAILABLE DoorStatusDoorEnabledStatus = "NOT_AVAILABLE"
)

// Defines values for DoorStatusDoorLockStatus.
const (
	DoorStatusDoorLockStatusERROR        DoorStatusDoorLockStatus = "ERROR"
	DoorStatusDoorLockStatusLOCKED       DoorStatusDoorLockStatus = "LOCKED"
	DoorStatusDoorLockStatusNOTAVAILABLE DoorStatusDoorLockStatus = "NOT_AVAILABLE"
	DoorStatusDoorLockStatusUNLOCKED     DoorStatusDoorLockStatus = "UNLOCKED"
)

// Defines values for DoorStatusDoorOpenStatus.
const (
	DoorStatusDoorOpenStatusCLOSED       DoorStatusDoorOpenStatus = "CLOSED"
	DoorStatusDoorOpenStatusERROR        DoorStatusDoorOpenStatus = "ERROR"
	DoorStatusDoorOpenStatusNOTAVAILABLE DoorStatusDoorOpenStatus = "NOT_AVAILABLE"
	DoorStatusDoorOpenStatusOPEN         DoorStatusDoorOpenStatus = "OPEN"
)

// Defines values for SnapshotDriver1WorkingState.
const (
	SnapshotDriver1WorkingStateDRIVE           SnapshotDriver1WorkingState = "DRIVE"
	SnapshotDriver1WorkingStateDRIVERAVAILABLE SnapshotDriver1WorkingState = "DRIVER_AVAILABLE"
	SnapshotDriver1WorkingStateERROR           SnapshotDriver1WorkingState = "ERROR"
	SnapshotDriver1WorkingStateNOTAVAILABLE    SnapshotDriver1WorkingState = "NOT_AVAILABLE"
	SnapshotDriver1WorkingStateREST            SnapshotDriver1WorkingState = "REST"
	SnapshotDriver1WorkingStateWORK            SnapshotDriver1WorkingState = "WORK"
)

// Defines values for SnapshotDriver2WorkingState.
const (
	SnapshotDriver2WorkingStateDRIVE           SnapshotDriver2WorkingState = "DRIVE"
	SnapshotDriver2WorkingStateDRIVERAVAILABLE SnapshotDriver2WorkingState = "DRIVER_AVAILABLE"
	SnapshotDriver2WorkingStateERROR           SnapshotDriver2WorkingState = "ERROR"
	SnapshotDriver2WorkingStateNOTAVAILABLE    SnapshotDriver2WorkingState = "NOT_AVAILABLE"
	SnapshotDriver2WorkingStateREST            SnapshotDriver2WorkingState = "REST"
	SnapshotDriver2WorkingStateWORK            SnapshotDriver2WorkingState = "WORK"
)

// Defines values for TachoDriverIdentificationDriverAuthenticationEquipment.
const (
	COMPANYCARD       TachoDriverIdentificationDriverAuthenticationEquipment = "COMPANY_CARD"
	CONTROLCARD       TachoDriverIdentificationDriverAuthenticationEquipment = "CONTROL_CARD"
	DRIVERCARD        TachoDriverIdentificationDriverAuthenticationEquipment = "DRIVER_CARD"
	MANUFACTURINGCARD TachoDriverIdentificationDriverAuthenticationEquipment = "MANUFACTURING_CARD"
	MOTIONSENSOR      TachoDriverIdentificationDriverAuthenticationEquipment = "MOTION_SENSOR"
	RESERVED          TachoDriverIdentificationDriverAuthenticationEquipment = "RESERVED"
	VEHICLEUNIT       TachoDriverIdentificationDriverAuthenticationEquipment = "VEHICLE_UNIT"
)

// Defines values for TellTaleInfoState.
const (
	TellTaleInfoStateINFO         TellTaleInfoState = "INFO"
	TellTaleInfoStateNOTAVAILABLE TellTaleInfoState = "NOT_AVAILABLE"
	TellTaleInfoStateOFF          TellTaleInfoState = "OFF"
	TellTaleInfoStateRED          TellTaleInfoState = "RED"
	TellTaleInfoStateRESERVED4    TellTaleInfoState = "RESERVED_4"
	TellTaleInfoStateRESERVED5    TellTaleInfoState = "RESERVED_5"
	TellTaleInfoStateRESERVED6    TellTaleInfoState = "RESERVED_6"
	TellTaleInfoStateYELLOW       TellTaleInfoState = "YELLOW"
)

// Defines values for TellTaleInfoTellTale.
const (
	ABSTRAILER                      TellTaleInfoTellTale = "ABS_TRAILER"
	ACC                             TellTaleInfoTellTale = "ACC"
	ADBLUELEVEL                     TellTaleInfoTellTale = "ADBLUE_LEVEL"
	ADVANCEDEMERGENCYBREAKING       TellTaleInfoTellTale = "ADVANCED_EMERGENCY_BREAKING"
	AIRBAG                          TellTaleInfoTellTale = "AIRBAG"
	AIRFILTERCLOGGED                TellTaleInfoTellTale = "AIR_FILTER_CLOGGED"
	ANTILOCKBRAKEFAILURE            TellTaleInfoTellTale = "ANTI_LOCK_BRAKE_FAILURE"
	ARTICULATION                    TellTaleInfoTellTale = "ARTICULATION"
	AUXILLARYAIRPRESSURE            TellTaleInfoTellTale = "AUXILLARY_AIR_PRESSURE"
	BATTERYCHARGINGCONDITION        TellTaleInfoTellTale = "BATTERY_CHARGING_CONDITION"
	BRAKELIGHTS                     TellTaleInfoTellTale = "BRAKE_LIGHTS"
	BRAKEMALFUNCTION                TellTaleInfoTellTale = "BRAKE_MALFUNCTION"
	BUSSTOPBRAKE                    TellTaleInfoTellTale = "BUS_STOP_BRAKE"
	COOLINGAIRCONDITIONING          TellTaleInfoTellTale = "COOLING_AIR_CONDITIONING"
	EBS                             TellTaleInfoTellTale = "EBS"
	EBSTRAILER12                    TellTaleInfoTellTale = "EBS_TRAILER_1_2"
	ENGINECOMPARTMENTTEMPERATURE    TellTaleInfoTellTale = "ENGINE_COMPARTMENT_TEMPERATURE"
	ENGINECOOLANTLEVEL              TellTaleInfoTellTale = "ENGINE_COOLANT_LEVEL"
	ENGINECOOLANTTEMPERATURE        TellTaleInfoTellTale = "ENGINE_COOLANT_TEMPERATURE"
	ENGINEEMISSIONFAILURE           TellTaleInfoTellTale = "ENGINE_EMISSION_FAILURE"
	ENGINEMILINDICATOR              TellTaleInfoTellTale = "ENGINE_MIL_INDICATOR"
	ENGINEOIL                       TellTaleInfoTellTale = "ENGINE_OIL"
	ENGINEOILLEVEL                  TellTaleInfoTellTale = "ENGINE_OIL_LEVEL"
	ENGINEOILTEMPERATURE            TellTaleInfoTellTale = "ENGINE_OIL_TEMPERATURE"
	ESCINDICATOR                    TellTaleInfoTellTale = "ESC_INDICATOR"
	ESCSWITCHEDOFF                  TellTaleInfoTellTale = "ESC_SWITCHED_OFF"
	FRONTFOGLIGHT                   TellTaleInfoTellTale = "FRONT_FOG_LIGHT"
	FUELFILTERDIFFPRESSURE          TellTaleInfoTellTale = "FUEL_FILTER_DIFF_PRESSURE"
	FUELLEVEL                       TellTaleInfoTellTale = "FUEL_LEVEL"
	GENERALFAILURE                  TellTaleInfoTellTale = "GENERAL_FAILURE"
	HATCHOPEN                       TellTaleInfoTellTale = "HATCH_OPEN"
	HAZARDWARNING                   TellTaleInfoTellTale = "HAZARD_WARNING"
	HEIGHTCONTROL                   TellTaleInfoTellTale = "HEIGHT_CONTROL"
	HIGHBEAMMAINBEAM                TellTaleInfoTellTale = "HIGH_BEAM_MAIN_BEAM"
	KNEELING                        TellTaleInfoTellTale = "KNEELING"
	LANEDEPARTUREINDICATOR          TellTaleInfoTellTale = "LANE_DEPARTURE_INDICATOR"
	LANEDEPARTUREWARNINGSWITCHEDOFF TellTaleInfoTellTale = "LANE_DEPARTURE_WARNING_SWITCHED_OFF"
	LOWBEAMDIPPEDBEAM               TellTaleInfoTellTale = "LOW_BEAM_DIPPED_BEAM"
	LOWERING                        TellTaleInfoTellTale = "LOWERING"
	OEMSPECIFICTELLTALE             TellTaleInfoTellTale = "OEM_SPECIFIC_TELL_TALE"
	PARKINGBRAKE                    TellTaleInfoTellTale = "PARKING_BRAKE"
	PARKINGHEATER                   TellTaleInfoTellTale = "PARKING_HEATER"
	POSITIONLIGHTS                  TellTaleInfoTellTale = "POSITION_LIGHTS"
	PRAMREQUEST                     TellTaleInfoTellTale = "PRAM_REQUEST"
	PROVISIONINGHANDICAPPEDPERSON   TellTaleInfoTellTale = "PROVISIONING_HANDICAPPED_PERSON"
	RAISING                         TellTaleInfoTellTale = "RAISING"
	REARFOGLIGHT                    TellTaleInfoTellTale = "REAR_FOG_LIGHT"
	RETARDER                        TellTaleInfoTellTale = "RETARDER"
	SEATBELT                        TellTaleInfoTellTale = "SEAT_BELT"
	SERVICECALLFORMAINTENANCE       TellTaleInfoTellTale = "SERVICE_CALL_FOR_MAINTENANCE"
	STEERINGFAILURE                 TellTaleInfoTellTale = "STEERING_FAILURE"
	STEERINGFLUIDLEVEL              TellTaleInfoTellTale = "STEERING_FLUID_LEVEL"
	STOPREQUEST                     TellTaleInfoTellTale = "STOP_REQUEST"
	TACHOGRAPHINDICATOR             TellTaleInfoTellTale = "TACHOGRAPH_INDICATOR"
	TIREMALFUNCTION                 TellTaleInfoTellTale = "TIRE_MALFUNCTION"
	TRAILERCONNECTED                TellTaleInfoTellTale = "TRAILER_CONNECTED"
	TRANSMISSIONFLUIDTEMPERATURE    TellTaleInfoTellTale = "TRANSMISSION_FLUID_TEMPERATURE"
	TRANSMISSIONMALFUNCTION         TellTaleInfoTellTale = "TRANSMISSION_MALFUNCTION"
	TURNSIGNALS                     TellTaleInfoTellTale = "TURN_SIGNALS"
	WINDSCREENWASHERFLUID           TellTaleInfoTellTale = "WINDSCREEN_WASHER_FLUID"
	WORNBRAKELININGS                TellTaleInfoTellTale = "WORN_BRAKE_LININGS"
)

// Defines values for VehicleStatusStatus2OfDoors.
const (
	VehicleStatusStatus2OfDoorsALLDOORSDISABLED      VehicleStatusStatus2OfDoors = "ALL_DOORS_DISABLED"
	VehicleStatusStatus2OfDoorsATLEASTONEDOORENABLED VehicleStatusStatus2OfDoors = "AT_LEAST_ONE_DOOR_ENABLED"
	VehicleStatusStatus2OfDoorsERROR                 VehicleStatusStatus2OfDoors = "ERROR"
	VehicleStatusStatus2OfDoorsNOTAVAILABLE          VehicleStatusStatus2OfDoors = "NOT_AVAILABLE"
)

// Accumulated defines model for Accumulated.
type Accumulated struct {
	AccelerationClass                     *FromToClasses `json:"AccelerationClass,omitempty"`
	AccelerationDuringBrakeClass          *FromToClasses `json:"AccelerationDuringBrakeClass,omitempty"`
	AccelerationPedalPositionClass        *FromToClasses `json:"AccelerationPedalPositionClass,omitempty"`
	BrakePedalCounterSpeedOverZero        *int64         `json:"BrakePedalCounterSpeedOverZero,omitempty"`
	ChairliftCounter                      *int64         `json:"ChairliftCounter,omitempty"`
	CurrentGearClass                      *LabelClasses  `json:"CurrentGearClass,omitempty"`
	DistanceBrakePedalActiveSpeedOverZero *int64         `json:"DistanceBrakePedalActiveSpeedOverZero,omitempty"`
	DistanceCruiseControlActive           *int64         `json:"DistanceCruiseControlActive,omitempty"`
	DrivingWithoutTorqueClass             *LabelClasses  `json:"DrivingWithoutTorqueClass,omitempty"`
	DurationCruiseControlActive           *int64         `json:"DurationCruiseControlActive,omitempty"`
	DurationWheelbaseSpeedOverZero        *int64         `json:"DurationWheelbaseSpeedOverZero,omitempty"`
	DurationWheelbaseSpeedZero            *int64         `json:"DurationWheelbaseSpeedZero,omitempty"`
	EngineSpeedClass                      *FromToClasses `json:"EngineSpeedClass,omitempty"`
	EngineTorqueAtCurrentSpeedClass       *FromToClasses `json:"EngineTorqueAtCurrentSpeedClass,omitempty"`
	EngineTorqueClass                     *FromToClasses `json:"EngineTorqueClass,omitempty"`
	FuelConsumptionCruiseControlActive    *int64         `json:"FuelConsumptionCruiseControlActive,omitempty"`
	FuelWheelbaseSpeedOverZero            *int64         `json:"FuelWheelbaseSpeedOverZero,omitempty"`
	FuelWheelbaseSpeedZero                *int64         `json:"FuelWheelbaseSpeedZero,omitempty"`
	HighAccelerationClass                 *FromToClasses `json:"HighAccelerationClass,omitempty"`
	KneelingCounter                       *int64         `json:"KneelingCounter,omitempty"`
	PramRequestCounter                    *int64         `json:"PramRequestCounter,omitempty"`
	PtoActiveClass                        *LabelClasses  `json:"PtoActiveClass,omitempty"`
	RetarderTorqueClass                   *FromToClasses `json:"RetarderTorqueClass,omitempty"`
	SelectedGearClass                     *LabelClasses  `json:"SelectedGearClass,omitempty"`
	StopRequestCounter                    *int64         `json:"StopRequestCounter,omitempty"`
	VehicleSpeedClass                     *FromToClasses `json:"VehicleSpeedClass,omitempty"`
}

// AlternatorInfo defines model for AlternatorInfo.
type AlternatorInfo struct {
	AlternatorNumber *int64                         `json:"AlternatorNumber,omitempty"`
	AlternatorStatus AlternatorInfoAlternatorStatus `json:"AlternatorStatus"`
}

// AlternatorInfoAlternatorStatus defines model for AlternatorInfo.AlternatorStatus.
type AlternatorInfoAlternatorStatus string

// DoorStatus defines model for DoorStatus.
type DoorStatus struct {
	DoorEnabledStatus *DoorStatusDoorEnabledStatus `json:"DoorEnabledStatus,omitempty"`
	DoorLockStatus    *DoorStatusDoorLockStatus    `json:"DoorLockStatus,omitempty"`
	DoorNumber        *int64                       `json:"DoorNumber,omitempty"`
	DoorOpenStatus    *DoorStatusDoorOpenStatus    `json:"DoorOpenStatus,omitempty"`
}

// DoorStatusDoorEnabledStatus defines model for DoorStatus.DoorEnabledStatus.
type DoorStatusDoorEnabledStatus string

// DoorStatusDoorLockStatus defines model for DoorStatus.DoorLockStatus.
type DoorStatusDoorLockStatus string

// DoorStatusDoorOpenStatus defines model for DoorStatus.DoorOpenStatus.
type DoorStatusDoorOpenStatus string

// DriverId defines model for DriverId.
type DriverId struct {
	OemDriverIdentification   *OemDriverIdentification   `json:"OemDriverIdentification,omitempty"`
	TachoDriverIdentification *TachoDriverIdentification `json:"TachoDriverIdentification,omitempty"`
}

// FromToClass defines model for FromToClass.
type FromToClass struct {
	From        *float64 `json:"From,omitempty"`
	Meters      *int64   `json:"Meters,omitempty"`
	MilliLitres *int64   `json:"MilliLitres,omitempty"`
	Seconds     *int64   `json:"Seconds,omitempty"`
	To          *float64 `json:"To,omitempty"`
}

// FromToClasses defines model for FromToClasses.
type FromToClasses struct {
	Value *[]FromToClass `json:"Value,omitempty"`
}

// GNSSPosition defines model for GNSSPosition.
type GNSSPosition struct {
	Altitude         *int64    `json:"Altitude,omitempty"`
	Heading          *int32    `json:"Heading,omitempty"`
	Latitude         *float64  `json:"Latitude,omitempty"`
	Longitude        *float64  `json:"Longitude,omitempty"`
	PositionDateTime time.Time `json:"PositionDateTime"`
	Speed            *float64  `json:"Speed,omitempty"`
}

// LabelClass defines model for LabelClass.
type LabelClass struct {
	Label       string `json:"Label"`
	Meters      *int64 `json:"Meters,omitempty"`
	MilliLitres *int64 `json:"MilliLitres,omitempty"`
	Seconds     *int64 `json:"Seconds,omitempty"`
}

// LabelClasses defines model for LabelClasses.
type LabelClasses struct {
	Value *[]LabelClass `json:"Value,omitempty"`
}

// OemDriverIdentification defines model for OemDriverIdentification.
type OemDriverIdentification struct {
	IdType                  *string `json:"IdType,omitempty"`
	OemDriverIdentification string  `json:"OemDriverIdentification"`
}

// ProductionDate defines model for ProductionDate.
type ProductionDate struct {
	Day   *int32 `json:"Day,omitempty"`
	Month *int32 `json:"Month,omitempty"`
	Year  *int32 `json:"Year,omitempty"`
}

// Snapshot defines model for Snapshot.
type Snapshot struct {
	AmbientAirTemperature *float64                     `json:"AmbientAirTemperature,omitempty"`
	CatalystFuelLevel     *float64                     `json:"CatalystFuelLevel,omitempty"`
	Driver1WorkingState   *SnapshotDriver1WorkingState `json:"Driver1WorkingState,omitempty"`
	Driver2Id             *DriverId                    `json:"Driver2Id,omitempty"`
	Driver2WorkingState   *SnapshotDriver2WorkingState `json:"Driver2WorkingState,omitempty"`
	EngineSpeed           *float64                     `json:"EngineSpeed,omitempty"`
	FuelLevel1            *float64                     `json:"FuelLevel1,omitempty"`
	GNSSPosition          *GNSSPosition                `json:"GNSSPosition,omitempty"`
	TachographSpeed       *float64                     `json:"TachographSpeed,omitempty"`
	WheelBasedSpeed       *float64                     `json:"WheelBasedSpeed,omitempty"`
}

// SnapshotDriver1WorkingState defines model for Snapshot.Driver1WorkingState.
type SnapshotDriver1WorkingState string

// SnapshotDriver2WorkingState defines model for Snapshot.Driver2WorkingState.
type SnapshotDriver2WorkingState string

// TachoDriverIdentification defines model for TachoDriverIdentification.
type TachoDriverIdentification struct {
	CardIssuingMemberState        string                                                  `json:"CardIssuingMemberState"`
	CardRenewalIndex              *string                                                 `json:"CardRenewalIndex,omitempty"`
	CardReplacementIndex          *string                                                 `json:"CardReplacementIndex,omitempty"`
	DriverAuthenticationEquipment *TachoDriverIdentificationDriverAuthenticationEquipment `json:"DriverAuthenticationEquipment,omitempty"`
	DriverIdentification          string                                                  `json:"DriverIdentification"`
}

// TachoDriverIdentificationDriverAuthenticationEquipment defines model for TachoDriverIdentification.DriverAuthenticationEquipment.
type TachoDriverIdentificationDriverAuthenticationEquipment string

// TellTaleInfo defines model for TellTaleInfo.
type TellTaleInfo struct {
	State    TellTaleInfoState    `json:"State"`
	TellTale TellTaleInfoTellTale `json:"TellTale"`
}

// TellTaleInfoState defines model for TellTaleInfo.State.
type TellTaleInfoState string

// TellTaleInfoTellTale defines model for TellTaleInfo.TellTale.
type TellTaleInfoTellTale string

// Trigger defines model for Trigger.
type Trigger struct {
	Context      string          `json:"Context"`
	DriverId     *DriverId       `json:"DriverId,omitempty"`
	PtoId        *string         `json:"PtoId,omitempty"`
	TellTaleInfo *[]TellTaleInfo `json:"TellTaleInfo,omitempty"`
	Trigger      string          `json:"Trigger"`
	TriggerInfo  *[]string       `json:"TriggerInfo,omitempty"`
}

// Uptime defines model for Uptime.
type Uptime struct {
	AlternatorInfo                  *[]AlternatorInfo `json:"AlternatorInfo,omitempty"`
	BellowPressureFrontAxleLeft     *int64            `json:"BellowPressureFrontAxleLeft,omitempty"`
	BellowPressureFrontAxleRight    *int64            `json:"BellowPressureFrontAxleRight,omitempty"`
	BellowPressureRearAxleLeft      *int64            `json:"BellowPressureRearAxleLeft,omitempty"`
	BellowPressureRearAxleRight     *int64            `json:"BellowPressureRearAxleRight,omitempty"`
	DurationAtLeastOneDoorOpen      *int64            `json:"DurationAtLeastOneDoorOpen,omitempty"`
	EngineCoolantTemperature        *float64          `json:"EngineCoolantTemperature,omitempty"`
	ServiceBrakeAirPressureCircuit1 *int64            `json:"ServiceBrakeAirPressureCircuit1,omitempty"`
	ServiceBrakeAirPressureCircuit2 *int64            `json:"ServiceBrakeAirPressureCircuit2,omitempty"`
	ServiceDistance                 *int64            `json:"ServiceDistance,omitempty"`
	TellTaleInfo                    *[]TellTaleInfo   `json:"TellTaleInfo,omitempty"`
}

// Vehicle defines model for Vehicle.
type Vehicle struct {
	BodyType            *string         `json:"BodyType,omitempty"`
	Brand               *string         `json:"Brand,omitempty"`
	ChassisType         *string         `json:"ChassisType,omitempty"`
	CustomerVehicleName *string         `json:"CustomerVehicleName,omitempty"`
	DoorConfiguration   *[]int32        `json:"DoorConfiguration,omitempty"`
	EmissionLevel       *string         `json:"EmissionLevel,omitempty"`
	GearboxType         *string         `json:"GearboxType,omitempty"`
	HasRampOrLift       *bool           `json:"HasRampOrLift,omitempty"`
	Model               *string         `json:"Model,omitempty"`
	NoOfAxles           *int32          `json:"NoOfAxles,omitempty"`
	PossibleFuelType    *[]string       `json:"PossibleFuelType,omitempty"`
	ProductionDate      *ProductionDate `json:"ProductionDate,omitempty"`
	TachographType      *string         `json:"TachographType,omitempty"`
	TellTaleCode        *string         `json:"TellTaleCode,omitempty"`
	TotalFuelTankVolume *int64          `json:"TotalFuelTankVolume,omitempty"`
	Type                *string         `json:"Type,omitempty"`
	VIN                 string          `json:"VIN"`
}

// VehiclePosition defines model for VehiclePosition.
type VehiclePosition struct {
	CreatedDateTime  time.Time     `json:"CreatedDateTime"`
	GNSSPosition     *GNSSPosition `json:"GNSSPosition,omitempty"`
	ReceivedDateTime time.Time     `json:"ReceivedDateTime"`
	TachographSpeed  *float64      `json:"TachographSpeed,omitempty"`
	Trigger          Trigger       `json:"Trigger"`
	VIN              string        `json:"VIN"`
	WheelBasedSpeed  *float64      `json:"WheelBasedSpeed,omitempty"`
}

// VehiclePositions defines model for VehiclePositions.
type VehiclePositions struct {
	MoreDataAvailable     *bool              `json:"MoreDataAvailable,omitempty"`
	RequestServerDateTime time.Time          `json:"RequestServerDateTime"`
	VehiclePosition       *[]VehiclePosition `json:"VehiclePosition,omitempty"`
}

// VehicleStatus defines model for VehicleStatus.
type VehicleStatus struct {
	AccumulatedData               *Accumulated                 `json:"AccumulatedData,omitempty"`
	CreatedDateTime               time.Time                    `json:"CreatedDateTime"`
	DoorStatus                    *[]DoorStatus                `json:"DoorStatus,omitempty"`
	Driver1Id                     *DriverId                    `json:"Driver1Id,omitempty"`
	EngineTotalFuelUsed           *int64                       `json:"EngineTotalFuelUsed,omitempty"`
	GrossCombinationVehicleWeight *int                         `json:"GrossCombinationVehicleWeight,omitempty"`
	HRTotalVehicleDistance        *int64                       `json:"HRTotalVehicleDistance,omitempty"`
	ReceivedDateTime              time.Time                    `json:"ReceivedDateTime"`
	SnapshotData                  *Snapshot                    `json:"SnapshotData,omitempty"`
	Status2OfDoors                *VehicleStatusStatus2OfDoors `json:"Status2OfDoors,omitempty"`
	TotalEngineHours              *float64                     `json:"TotalEngineHours,omitempty"`
	Trigger                       Trigger                      `json:"Trigger"`
	UptimeData                    *Uptime                      `json:"UptimeData,omitempty"`
	Vin                           string                       `json:"Vin"`
}

// VehicleStatusStatus2OfDoors defines model for VehicleStatus.Status2OfDoors.
type VehicleStatusStatus2OfDoors string

// VehicleStatuses defines model for VehicleStatuses.
type VehicleStatuses struct {
	MoreDataAvailable     *bool            `json:"MoreDataAvailable,omitempty"`
	RequestServerDateTime time.Time        `json:"RequestServerDateTime"`
	VehicleStatus         *[]VehicleStatus `json:"VehicleStatus,omitempty"`
}

// Vehicles defines model for Vehicles.
type Vehicles struct {
	MoreDataAvailable *bool      `json:"MoreDataAvailable,omitempty"`
	Vehicle           *[]Vehicle `json:"Vehicle,omitempty"`
}

// GetVehiclePosition210UsingGET1Params defines parameters for GetVehiclePosition210UsingGET1.
type GetVehiclePosition210UsingGET1Params struct {
	// Vin Vehicle Identification Number, 17 characters.
	Vin *string `form:"vin,omitempty" json:"vin,omitempty"`

	// Starttime Only the data created/received after this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Starttime *string `form:"starttime,omitempty" json:"starttime,omitempty"`

	// Stoptime Only the data created/received before this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Stoptime *string `form:"stoptime,omitempty" json:"stoptime,omitempty"`

	// Datetype The start/stop times are compared to the created or received time of the position reports. If this isn’t supplied all times are received times.Possible values are: 'created/received'
	Datetype *string `form:"datetype,omitempty" json:"datetype,omitempty"`

	// TriggerFilter Will only return data reports that were triggered by the trigger
	// defined by the filter. Possible values are:
	//  * TIMER
	//  * TELL_TALE
	//  * DRIVER_LOGIN
	//  * DRIVER_LOGOUT
	//  * IGNITION_ON
	//  * IGNITION_OFF
	//  * ENGINE_ON
	//  * ENGINE_OFF
	//  * PTO_ENABLED
	//  * PTO_DISABLED
	//  * DISTANCE_TRAVELLED
	//  * DRIVER_1_WORKING_STATE_CHANGED
	//  * DRIVER_2_WORKING_STATE_CHANGED
	//
	// If several values are used in the filter they should be in
	// a comma-separated list (Ex: triggerFilter=DRIVER_LOGIN,TIMER). If
	// this filter parameter isn’t supplied the returned data reports
	// contain data reports triggered by any trigger.
	TriggerFilter *string `form:"triggerFilter,omitempty" json:"triggerFilter,omitempty"`

	// LatestOnly If this value is set to true only the last vehicle status event is returned for each vehicle in the response. If this value is set to false (or not present) all vehicle status events matching the starttime/stoptime criteria is returned for each vehicle in the response.
	LatestOnly *bool `form:"latestOnly,omitempty" json:"latestOnly,omitempty"`
}

// GetVehicles210UsingGET1Params defines parameters for GetVehicles210UsingGET1.
type GetVehicles210UsingGET1Params struct {
	// LastVin Mandatory if moreDataAvailable parameter was set to true in previous request for vehicles. It should be set to the VIN of the last vehicle in the result set of this message. The response will return the next block of vehicles not including the one with the given VIN. If moreDataAvailable parameter is set to true the VIN of the last item in the vehicle list in the response is set to lastVin parameter in the next call.
	LastVin *string `form:"lastVin,omitempty" json:"lastVin,omitempty"`
}

// GetVehicleStatus210UsingGET1Params defines parameters for GetVehicleStatus210UsingGET1.
type GetVehicleStatus210UsingGET1Params struct {
	// Vin Vehicle Identification Number, 17 characters.
	Vin *string `form:"vin,omitempty" json:"vin,omitempty"`

	// Starttime Only the data created/received after or equal to this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Starttime *string `form:"starttime,omitempty" json:"starttime,omitempty"`

	// Stoptime Only the data created/received before this time should be returned. Format: yyyy-MM-dd'T'HH:mm:ss'Z'
	Stoptime *string `form:"stoptime,omitempty" json:"stoptime,omitempty"`

	// Datetype The start/stop times are compared to the created or received time of the position reports. If this isn’t supplied all times are received times.Possible values are: 'created/received'
	Datetype *string `form:"datetype,omitempty" json:"datetype,omitempty"`

	// ContentFilter Will only return data reports that contain information in the area
	// defined by the filters. Possible values are:
	// 'SNAPSHOT/ACCUMULATED/UPTIME'. If several values are used in the
	// filter they should be in a comma-separated list (E.g.:
	// contentFilter=ACCUMULATED,SNAPSHOT).  If this filter parameter isn’t
	// supplied the returned reports contain all available blocks.
	//
	// Both sub type ACCUMULATED and UPTIME produces a lot of information in
	// response payload. If such data is not used in consuming application it
	// can be good to optimize requests by not querying such data to reduce
	// data size in payloads and response time. When content filter is used,
	// only data parameters provided at the triggered event is included in
	// content and only triggered events that contains parameters matching
	// the content filter are part of response. When content filter is not
	// used an aggregated view of all parameters and its state at each given
	// event is provided.
	ContentFilter *string `form:"contentFilter,omitempty" json:"contentFilter,omitempty"`

	// TriggerFilter Will only return data reports that were triggered by the trigger
	// defined by the filter. Possible values are:
	//  * TIMER
	//  * TELL_TALE
	//  * DRIVER_LOGIN
	//  * DRIVER_LOGOUT
	//  * IGNITION_ON
	//  * IGNITION_OFF
	//  * ENGINE_ON
	//  * ENGINE_OFF
	//  * PTO_ENABLED
	//  * PTO_DISABLED
	//  * DISTANCE_TRAVELLED
	//  * DRIVER_1_WORKING_STATE_CHANGED
	//  * DRIVER_2_WORKING_STATE_CHANGED
	//
	// If several values are used in the filter they should be in
	// a comma-separated list (Ex: triggerFilter=DRIVER_LOGIN,TIMER). If
	// this filter parameter isn’t supplied the returned data reports
	// contain data reports triggered by any trigger.
	TriggerFilter *string `form:"triggerFilter,omitempty" json:"triggerFilter,omitempty"`

	// LatestOnly If this value is set to true only the last vehicle status event is returned for each vehicle in the response. If this value is set to false (or not present) all vehicle status events matching the starttime/stoptime criteria is returned for each vehicle in the response.
	LatestOnly *bool `form:"latestOnly,omitempty" json:"latestOnly,omitempty"`
}
