// Package rfmsv4oapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package rfmsv4oapi

// Defines values for DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment.
const (
	DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipmentCOMPANYCARD       DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment = "COMPANY_CARD"
	DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipmentCONTROLCARD       DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment = "CONTROL_CARD"
	DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipmentDRIVERCARD        DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment = "DRIVER_CARD"
	DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipmentMANUFACTURINGCARD DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment = "MANUFACTURING_CARD"
	DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipmentMOTIONSENSOR      DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment = "MOTION_SENSOR"
	DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipmentRESERVED          DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment = "RESERVED"
	DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipmentVEHICLEUNIT       DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment = "VEHICLE_UNIT"
)

// Defines values for DriverWorkingStateProperty.
const (
	DriverWorkingStatePropertyDRIVE           DriverWorkingStateProperty = "DRIVE"
	DriverWorkingStatePropertyDRIVERAVAILABLE DriverWorkingStateProperty = "DRIVER_AVAILABLE"
	DriverWorkingStatePropertyERROR           DriverWorkingStateProperty = "ERROR"
	DriverWorkingStatePropertyNOTAVAILABLE    DriverWorkingStateProperty = "NOT_AVAILABLE"
	DriverWorkingStatePropertyREST            DriverWorkingStateProperty = "REST"
	DriverWorkingStatePropertyWORK            DriverWorkingStateProperty = "WORK"
)

// Defines values for SnapshotDataObjectBatteryPackChargingConnectionStatus.
const (
	SnapshotDataObjectBatteryPackChargingConnectionStatusCONNECTED     SnapshotDataObjectBatteryPackChargingConnectionStatus = "CONNECTED"
	SnapshotDataObjectBatteryPackChargingConnectionStatusCONNECTING    SnapshotDataObjectBatteryPackChargingConnectionStatus = "CONNECTING"
	SnapshotDataObjectBatteryPackChargingConnectionStatusDISCONNECTED  SnapshotDataObjectBatteryPackChargingConnectionStatus = "DISCONNECTED"
	SnapshotDataObjectBatteryPackChargingConnectionStatusDISCONNECTING SnapshotDataObjectBatteryPackChargingConnectionStatus = "DISCONNECTING"
	SnapshotDataObjectBatteryPackChargingConnectionStatusERROR         SnapshotDataObjectBatteryPackChargingConnectionStatus = "ERROR"
	SnapshotDataObjectBatteryPackChargingConnectionStatusNOTAVAILABLE  SnapshotDataObjectBatteryPackChargingConnectionStatus = "NOT_AVAILABLE"
)

// Defines values for SnapshotDataObjectBatteryPackChargingStatus.
const (
	SnapshotDataObjectBatteryPackChargingStatusCHARGING     SnapshotDataObjectBatteryPackChargingStatus = "CHARGING"
	SnapshotDataObjectBatteryPackChargingStatusCHARGINGAC   SnapshotDataObjectBatteryPackChargingStatus = "CHARGING_AC"
	SnapshotDataObjectBatteryPackChargingStatusCHARGINGDC   SnapshotDataObjectBatteryPackChargingStatus = "CHARGING_DC"
	SnapshotDataObjectBatteryPackChargingStatusERROR        SnapshotDataObjectBatteryPackChargingStatus = "ERROR"
	SnapshotDataObjectBatteryPackChargingStatusNOTAVAILABLE SnapshotDataObjectBatteryPackChargingStatus = "NOT_AVAILABLE"
	SnapshotDataObjectBatteryPackChargingStatusNOTCHARGING  SnapshotDataObjectBatteryPackChargingStatus = "NOT_CHARGING"
)

// Defines values for SnapshotDataObjectIgnition.
const (
	SnapshotDataObjectIgnitionERROR        SnapshotDataObjectIgnition = "ERROR"
	SnapshotDataObjectIgnitionNOTAVAILABLE SnapshotDataObjectIgnition = "NOT_AVAILABLE"
	SnapshotDataObjectIgnitionOFF          SnapshotDataObjectIgnition = "OFF"
	SnapshotDataObjectIgnitionON           SnapshotDataObjectIgnition = "ON"
)

// Defines values for SnapshotDataObjectTrailersTrailerType.
const (
	SnapshotDataObjectTrailersTrailerTypeCENTREAXLETRAILER       SnapshotDataObjectTrailersTrailerType = "CENTRE_AXLE_TRAILER"
	SnapshotDataObjectTrailersTrailerTypeCONVERTERDOLLY          SnapshotDataObjectTrailersTrailerType = "CONVERTER_DOLLY"
	SnapshotDataObjectTrailersTrailerTypeFULLTRAILER             SnapshotDataObjectTrailersTrailerType = "FULL_TRAILER"
	SnapshotDataObjectTrailersTrailerTypeLINKTRAILER             SnapshotDataObjectTrailersTrailerType = "LINK_TRAILER"
	SnapshotDataObjectTrailersTrailerTypeSEMITRAILER             SnapshotDataObjectTrailersTrailerType = "SEMI_TRAILER"
	SnapshotDataObjectTrailersTrailerTypeTOWINGCENTREAXLETRAILER SnapshotDataObjectTrailersTrailerType = "TOWING_CENTRE_AXLE_TRAILER"
	SnapshotDataObjectTrailersTrailerTypeTOWINGFULLTRAILER       SnapshotDataObjectTrailersTrailerType = "TOWING_FULL_TRAILER"
	SnapshotDataObjectTrailersTrailerTypeTOWINGSEMITRAILER       SnapshotDataObjectTrailersTrailerType = "TOWING_SEMI_TRAILER"
	SnapshotDataObjectTrailersTrailerTypeUNKNOWN                 SnapshotDataObjectTrailersTrailerType = "UNKNOWN"
)

// Defines values for TellTaleObjectState.
const (
	TellTaleObjectStateINFO         TellTaleObjectState = "INFO"
	TellTaleObjectStateNOTAVAILABLE TellTaleObjectState = "NOT_AVAILABLE"
	TellTaleObjectStateOFF          TellTaleObjectState = "OFF"
	TellTaleObjectStateRED          TellTaleObjectState = "RED"
	TellTaleObjectStateRESERVED4    TellTaleObjectState = "RESERVED_4"
	TellTaleObjectStateRESERVED5    TellTaleObjectState = "RESERVED_5"
	TellTaleObjectStateRESERVED6    TellTaleObjectState = "RESERVED_6"
	TellTaleObjectStateYELLOW       TellTaleObjectState = "YELLOW"
)

// Defines values for TellTaleObjectTellTale.
const (
	TellTaleObjectTellTaleABSTRAILER                      TellTaleObjectTellTale = "ABS_TRAILER"
	TellTaleObjectTellTaleACC                             TellTaleObjectTellTale = "ACC"
	TellTaleObjectTellTaleADBLUELEVEL                     TellTaleObjectTellTale = "ADBLUE_LEVEL"
	TellTaleObjectTellTaleADBLUETAMPERING                 TellTaleObjectTellTale = "ADBLUE_TAMPERING"
	TellTaleObjectTellTaleADVANCEDEMERGENCYBREAKING       TellTaleObjectTellTale = "ADVANCED_EMERGENCY_BREAKING"
	TellTaleObjectTellTaleAIRBAG                          TellTaleObjectTellTale = "AIRBAG"
	TellTaleObjectTellTaleAIRFILTERCLOGGED                TellTaleObjectTellTale = "AIR_FILTER_CLOGGED"
	TellTaleObjectTellTaleANTILOCKBRAKEFAILURE            TellTaleObjectTellTale = "ANTI_LOCK_BRAKE_FAILURE"
	TellTaleObjectTellTaleARTICULATION                    TellTaleObjectTellTale = "ARTICULATION"
	TellTaleObjectTellTaleAUXILLARYAIRPRESSURE            TellTaleObjectTellTale = "AUXILLARY_AIR_PRESSURE"
	TellTaleObjectTellTaleBATTERYCHARGINGCONDITION        TellTaleObjectTellTale = "BATTERY_CHARGING_CONDITION"
	TellTaleObjectTellTaleBATTERYPACK                     TellTaleObjectTellTale = "BATTERY_PACK"
	TellTaleObjectTellTaleBATTERYPACKCOOLING              TellTaleObjectTellTale = "BATTERY_PACK_COOLING"
	TellTaleObjectTellTaleBATTERYPACKTEMPERATURE          TellTaleObjectTellTale = "BATTERY_PACK_TEMPERATURE"
	TellTaleObjectTellTaleBRAKELIGHTS                     TellTaleObjectTellTale = "BRAKE_LIGHTS"
	TellTaleObjectTellTaleBRAKEMALFUNCTION                TellTaleObjectTellTale = "BRAKE_MALFUNCTION"
	TellTaleObjectTellTaleBUSSTOPBRAKE                    TellTaleObjectTellTale = "BUS_STOP_BRAKE"
	TellTaleObjectTellTaleCOOLINGAIRCONDITIONING          TellTaleObjectTellTale = "COOLING_AIR_CONDITIONING"
	TellTaleObjectTellTaleEBS                             TellTaleObjectTellTale = "EBS"
	TellTaleObjectTellTaleEBSTRAILER12                    TellTaleObjectTellTale = "EBS_TRAILER_1_2"
	TellTaleObjectTellTaleELECTRICMOTORFAILURES           TellTaleObjectTellTale = "ELECTRIC_MOTOR_FAILURES"
	TellTaleObjectTellTaleENGINECOMPARTMENTTEMPERATURE    TellTaleObjectTellTale = "ENGINE_COMPARTMENT_TEMPERATURE"
	TellTaleObjectTellTaleENGINECOOLANTLEVEL              TellTaleObjectTellTale = "ENGINE_COOLANT_LEVEL"
	TellTaleObjectTellTaleENGINECOOLANTTEMPERATURE        TellTaleObjectTellTale = "ENGINE_COOLANT_TEMPERATURE"
	TellTaleObjectTellTaleENGINEEMISSIONFAILURE           TellTaleObjectTellTale = "ENGINE_EMISSION_FAILURE"
	TellTaleObjectTellTaleENGINEEMISSIONFILTERSOOTFILTER  TellTaleObjectTellTale = "ENGINE_EMISSION_FILTER_SOOT_FILTER"
	TellTaleObjectTellTaleENGINEMILINDICATOR              TellTaleObjectTellTale = "ENGINE_MIL_INDICATOR"
	TellTaleObjectTellTaleENGINEOIL                       TellTaleObjectTellTale = "ENGINE_OIL"
	TellTaleObjectTellTaleENGINEOILLEVEL                  TellTaleObjectTellTale = "ENGINE_OIL_LEVEL"
	TellTaleObjectTellTaleENGINEOILTEMPERATURE            TellTaleObjectTellTale = "ENGINE_OIL_TEMPERATURE"
	TellTaleObjectTellTaleESCINDICATOR                    TellTaleObjectTellTale = "ESC_INDICATOR"
	TellTaleObjectTellTaleESCSWITCHEDOFF                  TellTaleObjectTellTale = "ESC_SWITCHED_OFF"
	TellTaleObjectTellTaleFRONTFOGLIGHT                   TellTaleObjectTellTale = "FRONT_FOG_LIGHT"
	TellTaleObjectTellTaleFUELFILTERDIFFPRESSURE          TellTaleObjectTellTale = "FUEL_FILTER_DIFF_PRESSURE"
	TellTaleObjectTellTaleFUELLEVEL                       TellTaleObjectTellTale = "FUEL_LEVEL"
	TellTaleObjectTellTaleGENERALFAILURE                  TellTaleObjectTellTale = "GENERAL_FAILURE"
	TellTaleObjectTellTaleHATCHOPEN                       TellTaleObjectTellTale = "HATCH_OPEN"
	TellTaleObjectTellTaleHAZARDWARNING                   TellTaleObjectTellTale = "HAZARD_WARNING"
	TellTaleObjectTellTaleHEIGHTCONTROL                   TellTaleObjectTellTale = "HEIGHT_CONTROL"
	TellTaleObjectTellTaleHIGHBEAMMAINBEAM                TellTaleObjectTellTale = "HIGH_BEAM_MAIN_BEAM"
	TellTaleObjectTellTaleHIGHVOLTAGESYSTEMCAUTION        TellTaleObjectTellTale = "HIGH_VOLTAGE_SYSTEM_CAUTION"
	TellTaleObjectTellTaleKNEELING                        TellTaleObjectTellTale = "KNEELING"
	TellTaleObjectTellTaleLANEDEPARTUREINDICATOR          TellTaleObjectTellTale = "LANE_DEPARTURE_INDICATOR"
	TellTaleObjectTellTaleLANEDEPARTUREWARNINGSWITCHEDOFF TellTaleObjectTellTale = "LANE_DEPARTURE_WARNING_SWITCHED_OFF"
	TellTaleObjectTellTaleLIMITEDPERFORMANCEELECTRICMOTOR TellTaleObjectTellTale = "LIMITED_PERFORMANCE_ELECTRIC_MOTOR"
	TellTaleObjectTellTaleLOWBEAMDIPPEDBEAM               TellTaleObjectTellTale = "LOW_BEAM_DIPPED_BEAM"
	TellTaleObjectTellTaleLOWERING                        TellTaleObjectTellTale = "LOWERING"
	TellTaleObjectTellTaleMULTIPLEXSYSTEM                 TellTaleObjectTellTale = "MULTIPLEX_SYSTEM"
	TellTaleObjectTellTaleOEMSPECIFICTELLTALE             TellTaleObjectTellTale = "OEM_SPECIFIC_TELL_TALE"
	TellTaleObjectTellTalePARKINGBRAKE                    TellTaleObjectTellTale = "PARKING_BRAKE"
	TellTaleObjectTellTalePARKINGHEATER                   TellTaleObjectTellTale = "PARKING_HEATER"
	TellTaleObjectTellTalePOSITIONLIGHTS                  TellTaleObjectTellTale = "POSITION_LIGHTS"
	TellTaleObjectTellTalePRAMREQUEST                     TellTaleObjectTellTale = "PRAM_REQUEST"
	TellTaleObjectTellTalePROVISIONINGHANDICAPPEDPERSON   TellTaleObjectTellTale = "PROVISIONING_HANDICAPPED_PERSON"
	TellTaleObjectTellTaleRAISING                         TellTaleObjectTellTale = "RAISING"
	TellTaleObjectTellTaleREARFOGLIGHT                    TellTaleObjectTellTale = "REAR_FOG_LIGHT"
	TellTaleObjectTellTaleRETARDER                        TellTaleObjectTellTale = "RETARDER"
	TellTaleObjectTellTaleSEATBELT                        TellTaleObjectTellTale = "SEAT_BELT"
	TellTaleObjectTellTaleSERVICECALLFORMAINTENANCE       TellTaleObjectTellTale = "SERVICE_CALL_FOR_MAINTENANCE"
	TellTaleObjectTellTaleSTEERINGFAILURE                 TellTaleObjectTellTale = "STEERING_FAILURE"
	TellTaleObjectTellTaleSTEERINGFLUIDLEVEL              TellTaleObjectTellTale = "STEERING_FLUID_LEVEL"
	TellTaleObjectTellTaleSTOPREQUEST                     TellTaleObjectTellTale = "STOP_REQUEST"
	TellTaleObjectTellTaleTACHOGRAPHINDICATOR             TellTaleObjectTellTale = "TACHOGRAPH_INDICATOR"
	TellTaleObjectTellTaleTIREMALFUNCTION                 TellTaleObjectTellTale = "TIRE_MALFUNCTION"
	TellTaleObjectTellTaleTRAILERCONNECTED                TellTaleObjectTellTale = "TRAILER_CONNECTED"
	TellTaleObjectTellTaleTRANSMISSIONFLUIDTEMPERATURE    TellTaleObjectTellTale = "TRANSMISSION_FLUID_TEMPERATURE"
	TellTaleObjectTellTaleTRANSMISSIONMALFUNCTION         TellTaleObjectTellTale = "TRANSMISSION_MALFUNCTION"
	TellTaleObjectTellTaleTURNSIGNALS                     TellTaleObjectTellTale = "TURN_SIGNALS"
	TellTaleObjectTellTaleWINDSCREENWASHERFLUID           TellTaleObjectTellTale = "WINDSCREEN_WASHER_FLUID"
	TellTaleObjectTellTaleWORNBRAKELININGS                TellTaleObjectTellTale = "WORN_BRAKE_LININGS"
)

// Defines values for TriggerObjectChargingConnectionStatusInfoEvent.
const (
	TriggerObjectChargingConnectionStatusInfoEventCONNECTED     TriggerObjectChargingConnectionStatusInfoEvent = "CONNECTED"
	TriggerObjectChargingConnectionStatusInfoEventCONNECTING    TriggerObjectChargingConnectionStatusInfoEvent = "CONNECTING"
	TriggerObjectChargingConnectionStatusInfoEventDISCONNECTED  TriggerObjectChargingConnectionStatusInfoEvent = "DISCONNECTED"
	TriggerObjectChargingConnectionStatusInfoEventDISCONNECTING TriggerObjectChargingConnectionStatusInfoEvent = "DISCONNECTING"
	TriggerObjectChargingConnectionStatusInfoEventERROR         TriggerObjectChargingConnectionStatusInfoEvent = "ERROR"
)

// Defines values for TriggerObjectChargingStatusInfoEvent.
const (
	TriggerObjectChargingStatusInfoEventCHARGINGCOMPLETED              TriggerObjectChargingStatusInfoEvent = "CHARGING_COMPLETED"
	TriggerObjectChargingStatusInfoEventCHARGINGINTERRUPTED            TriggerObjectChargingStatusInfoEvent = "CHARGING_INTERRUPTED"
	TriggerObjectChargingStatusInfoEventCHARGINGLEVEL                  TriggerObjectChargingStatusInfoEvent = "CHARGING_LEVEL"
	TriggerObjectChargingStatusInfoEventCHARGINGSTARTED                TriggerObjectChargingStatusInfoEvent = "CHARGING_STARTED"
	TriggerObjectChargingStatusInfoEventERROR                          TriggerObjectChargingStatusInfoEvent = "ERROR"
	TriggerObjectChargingStatusInfoEventESTIMATEDCOMPLETIONTIMECHANGED TriggerObjectChargingStatusInfoEvent = "ESTIMATED_COMPLETION_TIME_CHANGED"
	TriggerObjectChargingStatusInfoEventTIMER                          TriggerObjectChargingStatusInfoEvent = "TIMER"
)

// Defines values for UptimeDataObjectAlternatorInfoAlternatorStatus.
const (
	UptimeDataObjectAlternatorInfoAlternatorStatusCHARGING     UptimeDataObjectAlternatorInfoAlternatorStatus = "CHARGING"
	UptimeDataObjectAlternatorInfoAlternatorStatusERROR        UptimeDataObjectAlternatorInfoAlternatorStatus = "ERROR"
	UptimeDataObjectAlternatorInfoAlternatorStatusNOTAVAILABLE UptimeDataObjectAlternatorInfoAlternatorStatus = "NOT_AVAILABLE"
	UptimeDataObjectAlternatorInfoAlternatorStatusNOTCHARGING  UptimeDataObjectAlternatorInfoAlternatorStatus = "NOT_CHARGING"
)

// Defines values for VehicleStatusObjectDoorStatusDoorEnabledStatus.
const (
	VehicleStatusObjectDoorStatusDoorEnabledStatusDISABLED     VehicleStatusObjectDoorStatusDoorEnabledStatus = "DISABLED"
	VehicleStatusObjectDoorStatusDoorEnabledStatusENABLED      VehicleStatusObjectDoorStatusDoorEnabledStatus = "ENABLED"
	VehicleStatusObjectDoorStatusDoorEnabledStatusERROR        VehicleStatusObjectDoorStatusDoorEnabledStatus = "ERROR"
	VehicleStatusObjectDoorStatusDoorEnabledStatusNOTAVAILABLE VehicleStatusObjectDoorStatusDoorEnabledStatus = "NOT_AVAILABLE"
)

// Defines values for VehicleStatusObjectDoorStatusDoorLockStatus.
const (
	VehicleStatusObjectDoorStatusDoorLockStatusERROR        VehicleStatusObjectDoorStatusDoorLockStatus = "ERROR"
	VehicleStatusObjectDoorStatusDoorLockStatusLOCKED       VehicleStatusObjectDoorStatusDoorLockStatus = "LOCKED"
	VehicleStatusObjectDoorStatusDoorLockStatusNOTAVAILABLE VehicleStatusObjectDoorStatusDoorLockStatus = "NOT_AVAILABLE"
	VehicleStatusObjectDoorStatusDoorLockStatusUNLOCKED     VehicleStatusObjectDoorStatusDoorLockStatus = "UNLOCKED"
)

// Defines values for VehicleStatusObjectDoorStatusDoorOpenStatus.
const (
	VehicleStatusObjectDoorStatusDoorOpenStatusCLOSED       VehicleStatusObjectDoorStatusDoorOpenStatus = "CLOSED"
	VehicleStatusObjectDoorStatusDoorOpenStatusERROR        VehicleStatusObjectDoorStatusDoorOpenStatus = "ERROR"
	VehicleStatusObjectDoorStatusDoorOpenStatusNOTAVAILABLE VehicleStatusObjectDoorStatusDoorOpenStatus = "NOT_AVAILABLE"
	VehicleStatusObjectDoorStatusDoorOpenStatusOPEN         VehicleStatusObjectDoorStatusDoorOpenStatus = "OPEN"
)

// Defines values for VehicleStatusObjectStatus2OfDoors.
const (
	VehicleStatusObjectStatus2OfDoorsALLDOORSDISABLED      VehicleStatusObjectStatus2OfDoors = "ALL_DOORS_DISABLED"
	VehicleStatusObjectStatus2OfDoorsATLEASTONEDOORENABLED VehicleStatusObjectStatus2OfDoors = "AT_LEAST_ONE_DOOR_ENABLED"
	VehicleStatusObjectStatus2OfDoorsERROR                 VehicleStatusObjectStatus2OfDoors = "ERROR"
	VehicleStatusObjectStatus2OfDoorsNOTAVAILABLE          VehicleStatusObjectStatus2OfDoors = "NOT_AVAILABLE"
)

// AccumulatedDataObject defines model for AccumulatedDataObject.
type AccumulatedDataObject struct {
	// AccelerationClass In m/s2 Minimum 13 classes. ], -1.1] ]-1.1, -0.9] ]-0.9, -0.7] ]-0.7, -0.5] ]-0.5, -0.3] ]-0.3, -0.1] ]-0.1, 0.1[ [0.1, 0.3[ [0.3, 0.5[ [0.5, 0.7[ [0.7, 0.9[ [0.9, 1.1[ [1.1, [
	AccelerationClass []FromToClassObject `json:"accelerationClass,omitempty"`

	// AccelerationDuringBrakeClass In m/s2 Minimum 13 classes. ], -1.1] ]-1.1, -0.9] ]-0.9, -0.7] ]-0.7, -0.5] ]-0.5, -0.3] ]-0.3, -0.1] ]-0.1, 0.1[ [0.1, 0.3[ [0.3, 0.5[ [0.5, 0.7[ [0.7, 0.9[ [0.9, 1.1[ [1.1, [
	AccelerationDuringBrakeClass []FromToClassObject `json:"accelerationDuringBrakeClass,omitempty"`

	// AccelerationPedalPositionClass In percent. Minimum 5 classes [0, 20[ [20, 40[ [40, 60[ [60, 80[ [80, 100]
	AccelerationPedalPositionClass []FromToClassObject `json:"accelerationPedalPositionClass,omitempty"`

	// BrakePedalCounterSpeedOverZero The total number of times the brake pedal has been used while the vehicle was driving.
	BrakePedalCounterSpeedOverZero *int64 `json:"brakePedalCounterSpeedOverZero,omitempty"`

	// BrakePedalPositionClass In percent. Minimum 5 classes [0, 20[ [20, 40[ [40, 60[ [60, 80[ [80, 100]
	BrakePedalPositionClass []FromToClassObject `json:"brakePedalPositionClass,omitempty"`

	// ChairliftCounter The total number of times the chairlift has been outside the bus. This is mainly used for Buses
	ChairliftCounter *int64 `json:"chairliftCounter,omitempty"`

	// CurrentGearClass The currently used gear One class per gear. Neutral is also a gear. Park is also a gear. This is formatted according to SPN 523, supplied as a decimal value. Example 0 = Neutral, 1 = 1:st gear... This is mainly used for Buses.
	CurrentGearClass []LabelObject `json:"currentGearClass,omitempty"`

	// DistanceBrakePedalActiveSpeedOverZero The total distance the vehicle has driven where the brake pedal has been used. Unit Meters.
	DistanceBrakePedalActiveSpeedOverZero *int64 `json:"distanceBrakePedalActiveSpeedOverZero,omitempty"`

	// DistanceCruiseControlActive The distance the vehicle has been driven with cruise control active
	DistanceCruiseControlActive *int64 `json:"distanceCruiseControlActive,omitempty"`

	// DrivingWithoutTorqueClass Driving without torque, with gear (clutch is engaged) Labels DRIVING_WITHOUT_TORQUE
	DrivingWithoutTorqueClass []LabelObject `json:"drivingWithoutTorqueClass,omitempty"`

	// DurationCruiseControlActive The time the vehicle has been driven with cruise control active
	DurationCruiseControlActive *int64 `json:"durationCruiseControlActive,omitempty"`

	// DurationWheelbasedSpeedOverZero The time the vehicle speed has been over zero.
	DurationWheelbasedSpeedOverZero *int64 `json:"durationWheelbasedSpeedOverZero,omitempty"`

	// DurationWheelbasedSpeedZero The time the vehicle speed has been equal to zero, in seconds. Engine on (RPM>0 or electic motor in crank mode) and no PTO active
	DurationWheelbasedSpeedZero *int64 `json:"durationWheelbasedSpeedZero,omitempty"`

	// ElectricEnergyAux The electric energy the auxiliary systems have consumed, in watt hours. Auxiliary systems are all consumers except electric motor(s) and PTO(s).
	ElectricEnergyAux *int64 `json:"electricEnergyAux,omitempty"`

	// ElectricEnergyConsumptionDuringCruiseActive The electric energy the vehicle has consumed while driven with cruise control active, in watt-hours.
	ElectricEnergyConsumptionDuringCruiseActive *int64 `json:"electricEnergyConsumptionDuringCruiseActive,omitempty"`

	// ElectricEnergyWheelbasedSpeedOverZero The electric energy the vehicle has consumed (including recuperation) while the vehicle speed has been over zero. Electric motor is in crank mode. Unit in watt-hours.
	ElectricEnergyWheelbasedSpeedOverZero *int64 `json:"electricEnergyWheelbasedSpeedOverZero,omitempty"`

	// ElectricEnergyWheelbasedSpeedZero The electric energy the vehicle has consumed while the vehicle speed has been equal to zero. Electric motor is in crank mode and no PTO active. Unit in watt-hours.
	ElectricEnergyWheelbasedSpeedZero *int64 `json:"electricEnergyWheelbasedSpeedZero,omitempty"`

	// ElectricMotorTorqueAtCurrentSpeedClass In percent (Engine Percent Load At Current Speed). Minimum 10 classes [0, 10[ [10, 20[ [20, 30[ [30, 40[ [40, 50[ [50, 60[ [60, 70[ [70, 80[ [80, 90[ [90, 100]
	ElectricMotorTorqueAtCurrentSpeedClass []FromToClassObjectElectrical `json:"electricMotorTorqueAtCurrentSpeedClass,omitempty"`

	// ElectricMotorTorqueClass In percent (Actual Engine-Percent Torque). Minimum 10 classes [0, 10[ [10, 20[ [20, 30[ [30, 40[ [40, 50[ [50, 60[ [60, 70[ [70, 80[ [80, 90[ [90, 100]
	ElectricMotorTorqueClass []FromToClassObjectElectrical `json:"electricMotorTorqueClass,omitempty"`

	// ElectricPowerRecuperationClass Classes refer to the recuperated electric power in kilowatt Minimum 11 classes [0, 100[ [100, 200[ [200, 300[ ... [900, 1000[ [1000, [
	ElectricPowerRecuperationClass []FromToClassObjectElectrical `json:"electricPowerRecuperationClass,omitempty"`

	// EngineSpeedClass Classes refer to the RPM of the combustion engine. Only mandatory if the vehicle has a combustion engine for propulsion. Minimum 10 classes [0, 400[ [400, 800[ [800, 1200[ [1200, 1600[ [1600, 2000[ [2000, 2400[ [2400, 2800[ [2800, 3200[ [3200, 3600[ [3600, [ Note: Engine on (RPM>0 or electric motor in crank mode)
	EngineSpeedClass []FromToClassObject `json:"engineSpeedClass,omitempty"`

	// EngineTorqueAtCurrentSpeedClass In percent based on EEC2 value (Engine Percent Load At Current Speed). Minimum 10 classes [0, 10[ [10, 20[ [20, 30[ [30, 40[ [40, 50[ [50, 60[ [60, 70[ [70, 80[ [80, 90[ [90, 100]
	EngineTorqueAtCurrentSpeedClass []FromToClassObjectCombustion `json:"engineTorqueAtCurrentSpeedClass,omitempty"`

	// EngineTorqueClass In percent based on EEC1 value (Actual Engine-Percent Torque). Minimum 10 classes [0, 10[ [10, 20[ [20, 30[ [30, 40[ [40, 50[ [50, 60[ [60, 70[ [70, 80[ [80, 90[ [90, 100]
	EngineTorqueClass []FromToClassObjectCombustion `json:"engineTorqueClass,omitempty"`

	// FuelConsumptionDuringCruiseActive The fuel the vehicle has consumed while driven with cruise control active, in millilitres
	FuelConsumptionDuringCruiseActive *int64 `json:"fuelConsumptionDuringCruiseActive,omitempty"`

	// FuelConsumptionDuringCruiseActiveGaseous The gas the vehicle has consumed while driven with cruise control active, in kilograms.
	FuelConsumptionDuringCruiseActiveGaseous *int64 `json:"fuelConsumptionDuringCruiseActiveGaseous,omitempty"`

	// FuelWheelbasedSpeedOverZero The fuel the vehicle has consumed while the vehicle speed has been over zero. Engine on (RPM>0). Unit in millilitres.
	FuelWheelbasedSpeedOverZero *int64 `json:"fuelWheelbasedSpeedOverZero,omitempty"`

	// FuelWheelbasedSpeedOverZeroGaseous The gas the vehicle has consumed while the vehicle speed has been over zero. Engine on (RPM>0). Unit in kilograms.
	FuelWheelbasedSpeedOverZeroGaseous *int64 `json:"fuelWheelbasedSpeedOverZeroGaseous,omitempty"`

	// FuelWheelbasedSpeedZero The fuel the vehicle has consumed while the vehicle speed has been equal to zero. Engine on (RPM>0) and no PTO active. Unit in millilitres.
	FuelWheelbasedSpeedZero *int64 `json:"fuelWheelbasedSpeedZero,omitempty"`

	// FuelWheelbasedSpeedZeroGaseous The gas the vehicle has consumed while the vehicle speed has been equal to zero. Engine on (RPM>0) and no PTO active. Unit in kilograms.
	FuelWheelbasedSpeedZeroGaseous *int64 `json:"fuelWheelbasedSpeedZeroGaseous,omitempty"`

	// HighAccelerationClass In m/s2 Minimum 11 classes ], -3.0] ]-3.0, -2.5] ]-2.5, -2.0] ]-2.0, -1.5] ]-1.5, -1.1] ]-1.1, 1.1[ [1.1, 1.5[ [1.5, 2.0[ [2.0, 2.5[ [2.5, 3.0[ [3.0, [
	HighAccelerationClass []FromToClassObject `json:"highAccelerationClass,omitempty"`

	// KneelingCounter The total number of times the bus has knelt.
	KneelingCounter *int64 `json:"kneelingCounter,omitempty"`

	// PramRequestCounter The total number of pram requests made. This is mainly used for Buses
	PramRequestCounter *int64 `json:"pramRequestCounter,omitempty"`

	// PtoActiveClass Label WHEELBASED_SPEED_ZERO
	//  At least one PTO active during wheelbased speed=0
	//  Counters for time (seconds) and consumption (millilitres, kilograms, watt-hours)
	//  Label WHEELBASED_SPEED_OVER_ZERO
	//  At least one PTO active during wheelbased speed>0
	//  Counters for time (seconds), distance (meter) and consumption (millilitres, kilograms, watt-hours)
	PtoActiveClass []LabelObject `json:"ptoActiveClass,omitempty"`

	// RetarderTorqueClass In percent (how the retarder is used as a positive value). Minimum 5 classes ]0, 20[ [20, 40[ [40, 60[ [60, 80[ [80, 100]
	RetarderTorqueClass []FromToClassObject `json:"retarderTorqueClass,omitempty"`

	// SelectedGearClass The currently selected gear One class per gear. Neutral is also a gear. Park is also a gear. This is formatted according to SPN 524, supplied as a decimal value. Example 0 = Neutral, 1 = 1:st gear... This is mainly used for Buses.
	SelectedGearClass []LabelObject `json:"selectedGearClass,omitempty"`

	// StopRequestCounter The total number of stop requests made. This is mainly used for Buses
	StopRequestCounter *int64 `json:"stopRequestCounter,omitempty"`

	// VehicleSpeedClass In km/h Minimum 40 classes. [0, 4[ [4, 8[ [8, 12[ [12, 16[ [16, 20[ [20, 24[ ... [156, [ Engine on (RPM>0 or electric motor in crank mode)
	VehicleSpeedClass []FromToClassObject `json:"vehicleSpeedClass,omitempty"`
}

// CreatedDateTimeProperty When the data was retrieved in the vehicle in iso8601 format.
type CreatedDateTimeProperty = Time

// DriverIDObject defines model for DriverIdObject.
type DriverIDObject struct {
	OEMDriverIdentification *struct {
		// IDType Contains an optional id type (e.g. pin, USB, encrypted EU id...)
		IDType *string `json:"idType,omitempty"`

		// OEMDriverIdentification An OEM specific driver id.
		OEMDriverIdentification *string `json:"oemDriverIdentification,omitempty"`
	} `json:"oemDriverIdentification,omitempty"`
	TachoDriverIdentification *struct {
		// CardIssuingMemberState The country alpha code of the Member State having issued the card. This fields is formatted according the definition for NationAlpha in COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
		CardIssuingMemberState *string `json:"cardIssuingMemberState,omitempty"`

		// CardRenewalIndex A card renewal index. This fields is formatted according the definition for CardRenewalIndex (chap 2.25) in: COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
		CardRenewalIndex *string `json:"cardRenewalIndex,omitempty"`

		// CardReplacementIndex A card replacement index. This fields is formatted according the definition for CardReplacementIndex (chap 2.26) in: COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
		CardReplacementIndex *string `json:"cardReplacementIndex,omitempty"`

		// DriverAuthenticationEquipment Code to distinguish different types of equipment for the tachograph application. See description of the field 'DriverAuthenticationEquipment' in COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
		DriverAuthenticationEquipment *DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment `json:"driverAuthenticationEquipment,omitempty"`

		// DriverIdentification The unique identification of a driver in a Member State. This fields is formatted according the definition for driverIdentification in COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
		DriverIdentification *string `json:"driverIdentification,omitempty"`
	} `json:"tachoDriverIdentification,omitempty"`
}

// DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment Code to distinguish different types of equipment for the tachograph application. See description of the field 'DriverAuthenticationEquipment' in COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
type DriverIDObjectTachoDriverIdentificationDriverAuthenticationEquipment string

// DriverWorkingStateProperty Tachograph Working state of the driver
type DriverWorkingStateProperty string

// ErrorObject Optional responses for error codes, detailing the error if needed
type ErrorObject struct {
	// Error An identifier for this error
	Error *string `json:"error,omitempty"`

	// ErrorDescription A description of the error
	ErrorDescription *string `json:"error_description,omitempty"`

	// ErrorURI A URI providing more information
	ErrorURI *string `json:"error_uri,omitempty"`
}

// FromToClassObject defines model for FromToClassObject.
type FromToClassObject struct {
	From        *float64 `json:"from,omitempty"`
	Kilograms   *int64   `json:"kilograms,omitempty"`
	Meters      *int64   `json:"meters,omitempty"`
	MilliLitres *int64   `json:"milliLitres,omitempty"`
	Seconds     *int64   `json:"seconds,omitempty"`
	To          *float64 `json:"to,omitempty"`
	Watthours   *int64   `json:"watthours,omitempty"`
}

// FromToClassObjectCombustion defines model for FromToClassObjectCombustion.
type FromToClassObjectCombustion struct {
	From        *float64 `json:"from,omitempty"`
	Kilograms   *int64   `json:"kilograms,omitempty"`
	Meters      *int64   `json:"meters,omitempty"`
	MilliLitres *int64   `json:"milliLitres,omitempty"`
	Seconds     *int64   `json:"seconds,omitempty"`
	To          *float64 `json:"to,omitempty"`
}

// FromToClassObjectElectrical defines model for FromToClassObjectElectrical.
type FromToClassObjectElectrical struct {
	From      *float64 `json:"from,omitempty"`
	Meters    *int64   `json:"meters,omitempty"`
	Seconds   *int64   `json:"seconds,omitempty"`
	To        *float64 `json:"to,omitempty"`
	Watthours *int64   `json:"watthours,omitempty"`
}

// GNSSPositionObject defines model for GNSSPositionObject.
type GNSSPositionObject struct {
	// Altitude The altitude of the vehicle. Where 0 is sea level, negative values below sealevel and positive above sealevel. Unit in meters.
	Altitude *int32 `json:"altitude,omitempty"`

	// Heading The direction of the vehicle (0-359)
	Heading *Int `json:"heading,omitempty"`

	// Latitude Latitude (WGS84 based)
	Latitude *float64 `json:"latitude,omitempty"`

	// Longitude Longitude (WGS84 based)
	Longitude *float64 `json:"longitude,omitempty"`

	// PositionDateTime The time of the position data in iso8601 format.
	PositionDateTime *Time `json:"positionDateTime,omitempty"`

	// Speed The GNSS(e.g. GPS)-speed in km/h
	Speed *float64 `json:"speed,omitempty"`
}

// LabelObject defines model for LabelObject.
type LabelObject struct {
	Kilograms   *int64  `json:"kilograms,omitempty"`
	Label       *string `json:"label,omitempty"`
	Meters      *int64  `json:"meters,omitempty"`
	MilliLitres *int64  `json:"milliLitres,omitempty"`
	Seconds     *int64  `json:"seconds,omitempty"`
	Watthours   *int64  `json:"watthours,omitempty"`
}

// ReceivedDateTimeProperty Reception at Server. To be used for handling of "more data available" in iso8601 format.
type ReceivedDateTimeProperty = Time

// SnapshotDataObject defines model for SnapshotDataObject.
type SnapshotDataObject struct {
	// AmbientAirTemperature The Ambient air temperature in Celsius
	AmbientAirTemperature *float64 `json:"ambientAirTemperature,omitempty"`

	// BatteryPackChargingConnectionStatus Indicates the charging connection status of the battery pack.
	//  Connecting - A charger is being connected
	//  Connected - A charger is connected
	//  Disconnecting - A charger is being disconnected
	//  Disconnected - No charger is connected
	//  Error - An error occurred when connecting or disconnecting
	//  Not available - Charging connection status is not available
	BatteryPackChargingConnectionStatus *SnapshotDataObjectBatteryPackChargingConnectionStatus `json:"batteryPackChargingConnectionStatus,omitempty"`

	// BatteryPackChargingDevice Device used to charge the battery pack. Standard rFMS values taken from ISO 15118 (OEM can have additional values):
	//  ACD - Automatic Connection Device
	//  WPT - Wireless Power Transfer
	//  VEHICLE_COUPLER - manual connection of a flexible cable to an EV
	//  NONE - No device connected
	//  NOT_AVAILABLE - Unknown
	BatteryPackChargingDevice *string `json:"batteryPackChargingDevice,omitempty"`

	// BatteryPackChargingPower Charging power in watts.
	BatteryPackChargingPower *float64 `json:"batteryPackChargingPower,omitempty"`

	// BatteryPackChargingStatus Indicates the charging status of the battery pack. Recuperation is excluded.
	//  Not charging - No charging
	//  Charging - Charging ongoing (AC or DC is unknown)
	//  Charging AC - AC charging ongoing
	//  Charging DC - DC charging ongoing
	//  Error - An error occurred when charging
	//  Not available - Charging status is not available
	BatteryPackChargingStatus *SnapshotDataObjectBatteryPackChargingStatus `json:"batteryPackChargingStatus,omitempty"`

	// CatalystFuelLevel The adblue level percentage
	CatalystFuelLevel *float64 `json:"catalystFuelLevel,omitempty"`

	// Driver1WorkingState Tachograph Working state of the driver
	Driver1WorkingState *DriverWorkingStateProperty `json:"driver1WorkingState,omitempty"`
	Driver2ID           *DriverIDObject             `json:"driver2Id,omitempty"`

	// Driver2WorkingState Tachograph Working state of the driver
	Driver2WorkingState *DriverWorkingStateProperty `json:"driver2WorkingState,omitempty"`

	// ElectricMotorSpeed The electric motor speed in rev/min
	ElectricMotorSpeed *float64 `json:"electricMotorSpeed,omitempty"`

	// EngineSpeed The engine (Diesel/gaseous) speed in rev/min
	EngineSpeed *float64 `json:"engineSpeed,omitempty"`

	// EstimatedDistanceToEmpty Estimated distance to empty (tanks and/or battery packs) in meters
	EstimatedDistanceToEmpty *struct {
		// BatteryPack Estimated distance to empty, battery pack, in meters
		BatteryPack *int64 `json:"batteryPack,omitempty"`

		// Fuel Estimated distance to empty, fuel tank, in meters
		Fuel *int64 `json:"fuel,omitempty"`

		// Gas Estimated distance to empty, gas tank, in meters
		Gas *int64 `json:"gas,omitempty"`

		// Total Estimated distance to empty, summarizing fuel, gas and battery in meters
		Total *int64 `json:"total,omitempty"`
	} `json:"estimatedDistanceToEmpty,omitempty"`

	// EstimatedTimeBatteryPackChargingCompleted Estimated time when charging has reached the target level.
	EstimatedTimeBatteryPackChargingCompleted *Time `json:"estimatedTimeBatteryPackChargingCompleted,omitempty"`

	// FuelLevel1 The fuel level percentage
	FuelLevel1 *float64 `json:"fuelLevel1,omitempty"`

	// FuelLevel2 Ratio of volume of fuel to the total volume of fuel storage container, in percent. When Fuel Level 2 is not used, Fuel Level 1 represents the total fuel in all fuel storage containers.  When Fuel Level 2 is used, Fuel Level 1 represents the fuel level in the primary or left-side fuel storage container.
	FuelLevel2 *float64 `json:"fuelLevel2,omitempty"`

	// FuelType Type of fuel currently being utilized by the vehicle acc. SPN 5837
	FuelType     *string             `json:"fuelType,omitempty"`
	GNSSPosition *GNSSPositionObject `json:"gnssPosition,omitempty"`

	// HybridBatteryPackRemainingCharge Indicates the hybrid battery pack remaining charge.
	//  0% means no charge remaining,
	//  100% means full charge remaining.
	//  Is used as well for full electrical vehicles
	HybridBatteryPackRemainingCharge *float64 `json:"hybridBatteryPackRemainingCharge,omitempty"`

	// Ignition The ignition state of the vehicle. This is a Scania-specific field.
	Ignition *SnapshotDataObjectIgnition `json:"ignition,omitempty"`

	// ParkingBrakeSwitch Switch signal which indicates when the parking brake is set. In general the switch actuated by the operator's park brake control, whether a pedal, lever or other control mechanism
	//  true - parking brake set
	//  false - parking brake not set
	ParkingBrakeSwitch *bool `json:"parkingBrakeSwitch,omitempty"`

	// TachographSpeed The Tacho speed
	TachographSpeed *float64 `json:"tachographSpeed,omitempty"`

	// Trailers List of trailers connected to the truck.
	Trailers []struct {
		// CustomerTrailerName The customer's name for the trailer
		CustomerTrailerName *string `json:"customerTrailerName,omitempty"`

		// TrailerAxleLoadSum The sum of the static vertical loads of the trailer axles in kilograms. The load is sent in the EBS22 message of ISO 11992-2.
		TrailerAxleLoadSum *int32 `json:"trailerAxleLoadSum,omitempty"`

		// TrailerAxles A list of trailer axles
		TrailerAxles []struct {
			// TrailerAxleLoad The static vertical load of a trailer axle in kilograms. The load is sent in the RGE22 message of ISO11992-2.
			TrailerAxleLoad *float32 `json:"trailerAxleLoad,omitempty"`

			// TrailerAxlePosition Axle position from 1 to 15, 1 being in the front closest to the truck, according to ISO 11992-2.
			TrailerAxlePosition *int32 `json:"trailerAxlePosition,omitempty"`
		} `json:"trailerAxles,omitempty"`

		// TrailerIdentificationData The identification data sent by the trailer to the truck in the RGE23 message of ISO 11992-2. An alternative source is the DID (Data identifier definition) record VIN, as specified in ISO 11992-4. Even though both ISO 11992-2 and ISO 11992-4 specifies this as a VIN, the actual data sent from a trailer is not always the true VIN of the trailer.
		TrailerIdentificationData *string `json:"trailerIdentificationData,omitempty"`

		// TrailerNo Trailer number from 1 to 5, 1 being closest to the truck, according to ISO 11992-2.
		TrailerNo *int32 `json:"trailerNo,omitempty"`

		// TrailerType Indicates the type of the trailer. The type is sent in the EBS24 message of  ISO 11992-2.
		TrailerType *SnapshotDataObjectTrailersTrailerType `json:"trailerType,omitempty"`

		// TrailerVIN The vehicle identification number of the trailer. See ISO 3779 (17 characters) If the trailerIdentificationData is reporting a true VIN, trailerVin will have the same value. If it is possible to map the trailerIdentificationData to a true VIN using other sources, the value can be provided here.
		TrailerVIN *string `json:"trailerVin,omitempty"`
	} `json:"trailers,omitempty"`

	// VehicleAxles A list of vehicle axles
	VehicleAxles []struct {
		// VehicleAxleLoad The static vertical load of a vehicle axle in kilograms.
		VehicleAxleLoad *float32 `json:"vehicleAxleLoad,omitempty"`

		// VehicleAxlePosition Axle position from 1 to 15, 1 being in the front of the truck
		VehicleAxlePosition *int32 `json:"vehicleAxlePosition,omitempty"`
	} `json:"vehicleAxles,omitempty"`

	// WheelBasedSpeed The vehicle wheelbased speed
	WheelBasedSpeed *float64 `json:"wheelBasedSpeed,omitempty"`
}

// SnapshotDataObjectBatteryPackChargingConnectionStatus Indicates the charging connection status of the battery pack.
//
//	Connecting - A charger is being connected
//	Connected - A charger is connected
//	Disconnecting - A charger is being disconnected
//	Disconnected - No charger is connected
//	Error - An error occurred when connecting or disconnecting
//	Not available - Charging connection status is not available
type SnapshotDataObjectBatteryPackChargingConnectionStatus string

// SnapshotDataObjectBatteryPackChargingStatus Indicates the charging status of the battery pack. Recuperation is excluded.
//
//	Not charging - No charging
//	Charging - Charging ongoing (AC or DC is unknown)
//	Charging AC - AC charging ongoing
//	Charging DC - DC charging ongoing
//	Error - An error occurred when charging
//	Not available - Charging status is not available
type SnapshotDataObjectBatteryPackChargingStatus string

// SnapshotDataObjectIgnition The ignition state of the vehicle. This is a Scania-specific field.
type SnapshotDataObjectIgnition string

// SnapshotDataObjectTrailersTrailerType Indicates the type of the trailer. The type is sent in the EBS24 message of  ISO 11992-2.
type SnapshotDataObjectTrailersTrailerType string

// TellTaleObject defines model for TellTaleObject.
type TellTaleObject struct {
	// OEMTellTale The OemTellTale is only set when the TellTale == OEM_SPECIFIC_TELL_TALE. This is an OEM specific string defining a tell tale in the OEM context.
	OEMTellTale *string `json:"oemTellTale,omitempty"`

	// State The current state of the tell tale.
	State    *TellTaleObjectState    `json:"state,omitempty"`
	TellTale *TellTaleObjectTellTale `json:"tellTale,omitempty"`
}

// TellTaleObjectState The current state of the tell tale.
type TellTaleObjectState string

// TellTaleObjectTellTale defines model for TellTaleObject.TellTale.
type TellTaleObjectTellTale string

// TriggerObject This description is placed here due to limitations of describing references in OpenAPI
//
//	Property __driverId__:
//	The driver id of driver. (independant whether it is driver or Co-driver)
//	This is only set if the TriggerType = DRIVER_LOGIN, DRIVER_LOGOUT, DRIVER_1_WORKING_STATE_CHANGED or DRIVER_2_WORKING_STATE_CHANGED
//	For DRIVER_LOGIN it is the id of the driver that logged in
//	For DRIVER_LOGOUT it is the id of the driver that logged out
//	For DRIVER_1_WORKING_STATE_CHANGED it is the id of driver 1
//	For DRIVER_2_WORKING_STATE_CHANGED it is the id of driver 2
//	Property __tellTaleInfo__:
//	The tell tale(s) that triggered this message.
//	This is only set if the TriggerType = TELL_TALE
type TriggerObject struct {
	// ChargingConnectionStatusInfo Additional information can be provided if the trigger type is BATTERY_PACK_CHARGING_CONNECTION_STATUS_CHANGE.
	ChargingConnectionStatusInfo *struct {
		// Event CONNECTING - Vehicle is being connected to a charger
		//  CONNECTED - Vehicle is connected to a charger
		//  DISCONNECTING - Vehicle is being disconnected from the charger
		//  DISCONNECTED - Vehicle is not connected to a charger
		//  ERROR - An error occurred
		Event *TriggerObjectChargingConnectionStatusInfoEvent `json:"event,omitempty"`

		// EventDetail Details regarding the event. Content is OEM specific
		EventDetail *string `json:"eventDetail,omitempty"`
	} `json:"chargingConnectionStatusInfo,omitempty"`

	// ChargingStatusInfo Additional information can be provided if the trigger type is BATTERY_PACK_CHARGING_STATUS_CHANGE.
	ChargingStatusInfo *struct {
		// Event CHARGING_STARTED - Charging has started
		//  CHARGING_COMPLETED - Charging is completed
		//  CHARGING_INTERRUPTED - Charging has been interrupted (no error)
		//  ERROR - An error occurred when charging
		//  ESTIMATED_COMPLETION_TIME_CHANGED - The estimated time for completed charging has changed. (Threshold is outside scope of rFMS)
		//  TIMER - A predefined time has passed since last charge status update. (Frequency is outside the scope of rFMS)
		//  CHARGING_LEVEL - The charging level has reached a predefined level. (Charging levels are outside the scope of rFMS)
		Event *TriggerObjectChargingStatusInfoEvent `json:"event,omitempty"`

		// EventDetail Details regarding the event. Content is OEM specific
		EventDetail *string `json:"eventDetail,omitempty"`
	} `json:"chargingStatusInfo,omitempty"`

	// Context The context defines if this is part of the standard or OEM specific. rFMS standard values VOLVO TRUCKS, SCANIA, DAIMLER, IVECO, DAF, MAN, RENAULT TRUCKS, VDL, VOLVO BUSES, IVECO BUS, IRISBUS If the Trigger is defined in the rFMS standard, the Context = RFMS
	Context  *string         `json:"context,omitempty"`
	DriverID *DriverIDObject `json:"driverId,omitempty"`

	// PtoID The id of a PTO. This is only set if the TriggerType = PTO_ENABLED or PTO_DISABLED
	PtoID        *string         `json:"ptoId,omitempty"`
	TellTaleInfo *TellTaleObject `json:"tellTaleInfo,omitempty"`

	// TriggerInfo Additional TriggerInfo content for OEM specific triggers E.g. TRAILER_ATTACHED_TRIGGER [id of trailer]
	TriggerInfo []string `json:"triggerInfo,omitempty"`

	// TriggerType Trigger types for Context=RFMS:
	//  TIMER - Data was sent due to a timer trigger. (Timer value set outside rFMS scope)
	//  IGNITION_ON - Data was sent due to an ignition on
	//  IGNITION_OFF - Data was sent due to an ignition off
	//  PTO_ENABLED - Data was sent due to that a PTO was enabled, will be sent for each PTO that gets enabled
	//  PTO_DISABLED - Data was sent due to that a PTO was disabled, will be sent for each PTO that gets disabled.
	//  DRIVER_LOGIN - Data was sent due to a successful driver login.
	//  DRIVER_LOGOUT - Data was sent due to a driver logout
	//  TELL_TALE - Data was sent due to that at least one tell tale changed state
	//  ENGINE_ON - Data was sent due to an engine on. For electric motor crank is on
	//  ENGINE_OFF - Data was sent due to an engine off. For electric motor crank is off
	//  DRIVER_1_WORKING_STATE_CHANGED - Data was sent due to that driver 1 changed working state
	//  DRIVER_2_WORKING_STATE_CHANGED - Data was sent due to that driver 2 changed working state
	//  DISTANCE_TRAVELLED - Data was sent due to that a set distance was travelled. (Distance set outside rFMS scope)
	//  FUEL_TYPE_CHANGE - Data was sent due to that the type of fuel currently being utilized by the vehicle changed
	//  PARKING_BRAKE_SWITCH_CHANGE - Data was sent due to that the parking brake state has changed
	//  BATTERY_PACK_CHARGING_STATUS_CHANGE - Data was sent due to a change in the battery pack charging status.
	//  BATTERY_PACK_CHARGING_CONNECTION_STATUS_CHANGE - Data was sent due to a change in the battery pack charging connection status.
	//  TRAILER_CONNECTED - One or several trailers were connected
	//  TRAILER_DISCONNECTED - One or several trailers were disconnected
	TriggerType *string `json:"triggerType,omitempty"`
}

// TriggerObjectChargingConnectionStatusInfoEvent CONNECTING - Vehicle is being connected to a charger
//
//	CONNECTED - Vehicle is connected to a charger
//	DISCONNECTING - Vehicle is being disconnected from the charger
//	DISCONNECTED - Vehicle is not connected to a charger
//	ERROR - An error occurred
type TriggerObjectChargingConnectionStatusInfoEvent string

// TriggerObjectChargingStatusInfoEvent CHARGING_STARTED - Charging has started
//
//	CHARGING_COMPLETED - Charging is completed
//	CHARGING_INTERRUPTED - Charging has been interrupted (no error)
//	ERROR - An error occurred when charging
//	ESTIMATED_COMPLETION_TIME_CHANGED - The estimated time for completed charging has changed. (Threshold is outside scope of rFMS)
//	TIMER - A predefined time has passed since last charge status update. (Frequency is outside the scope of rFMS)
//	CHARGING_LEVEL - The charging level has reached a predefined level. (Charging levels are outside the scope of rFMS)
type TriggerObjectChargingStatusInfoEvent string

// UptimeDataObject defines model for UptimeDataObject.
type UptimeDataObject struct {
	// AlternatorInfo The alternator status of the up to 4 alternators. Used mainly for buses.
	AlternatorInfo []struct {
		AlternatorNumber *int64                                          `json:"alternatorNumber,omitempty"`
		AlternatorStatus *UptimeDataObjectAlternatorInfoAlternatorStatus `json:"alternatorStatus,omitempty"`
	} `json:"alternatorInfo,omitempty"`

	// BellowPressureFrontAxleLeft The bellow pressure in the front axle left side in Pascal. Used mainly for buses.
	BellowPressureFrontAxleLeft *int64 `json:"bellowPressureFrontAxleLeft,omitempty"`

	// BellowPressureFrontAxleRight The bellow pressure in the front axle right side in Pascal. Used mainly for buses.
	BellowPressureFrontAxleRight *int64 `json:"bellowPressureFrontAxleRight,omitempty"`

	// BellowPressureRearAxleLeft The bellow pressure in the rear axle left side in Pascal. Used mainly for buses.
	BellowPressureRearAxleLeft *int64 `json:"bellowPressureRearAxleLeft,omitempty"`

	// BellowPressureRearAxleRight The bellow pressure in the rear axle right side in Pascal. Used mainly for buses.
	BellowPressureRearAxleRight *int64 `json:"bellowPressureRearAxleRight,omitempty"`

	// DurationAtLeastOneDoorOpen The total time at least one door has been opened in the bus. (seconds) Used mainly for buses.
	DurationAtLeastOneDoorOpen *int64 `json:"durationAtLeastOneDoorOpen,omitempty"`

	// EngineCoolantTemperature The temperature of the coolant liquid in Celsius
	EngineCoolantTemperature *float64 `json:"engineCoolantTemperature,omitempty"`

	// HvessOutletCoolantTemperature The temperature of the battery pack coolant in Celsius HVESS - High Voltage Energy Storage System
	HvessOutletCoolantTemperature *float64 `json:"hvessOutletCoolantTemperature,omitempty"`

	// HvessTemperature The temperature of the battery pack in Celsius HVESS - High Voltage Energy Storage System
	HvessTemperature *float64 `json:"hvessTemperature,omitempty"`

	// ServiceBrakeAirPressureCircuit1 The air pressure in circuit 1 in Pascal.
	ServiceBrakeAirPressureCircuit1 *int64 `json:"serviceBrakeAirPressureCircuit1,omitempty"`

	// ServiceBrakeAirPressureCircuit2 The air pressure in circuit 2 in Pascal.
	ServiceBrakeAirPressureCircuit2 *int64 `json:"serviceBrakeAirPressureCircuit2,omitempty"`

	// ServiceDistance The distance in meter to the next service
	ServiceDistance *int64 `json:"serviceDistance,omitempty"`

	// TellTaleInfo List of tell tales with the actual status for each tell tale.
	TellTaleInfo []TellTaleObject `json:"tellTaleInfo,omitempty"`
}

// UptimeDataObjectAlternatorInfoAlternatorStatus defines model for UptimeDataObject.AlternatorInfo.AlternatorStatus.
type UptimeDataObjectAlternatorInfoAlternatorStatus string

// VehicleObject defines model for VehicleObject.
type VehicleObject struct {
	// AuthorizedPaths Paths that the client is authorized to call
	AuthorizedPaths []string `json:"authorizedPaths,omitempty"`

	// BodyType The type of body on the chassis. rFMS standard values CITY_BUS, INTERCITY_BUS, COACH. This is used mainly for buses.
	BodyType *string `json:"bodyType,omitempty"`

	// Brand The vehicle brand. rFMS standard values VOLVO TRUCKS, SCANIA, DAIMLER, IVECO, DAF, MAN, RENAULT TRUCKS, VDL, VOLVO BUSES, IVECO BUS, IRISBUS
	Brand *string `json:"brand,omitempty"`

	// ChassisType The chassis type of the vehicle. OEM specific value. This is used mainly for buses
	ChassisType *string `json:"chassisType,omitempty"`

	// CustomerVehicleName The customer's name for the vehicle.
	CustomerVehicleName *string `json:"customerVehicleName,omitempty"`

	// DoorConfiguration The door configuration. The door order definition is OEM specific. E.g. [1, 2, 2] means the bus has 3 doors: 1 front door, double doors for door 2 and 3. This is used mainly for buses.
	DoorConfiguration []int32 `json:"doorConfiguration,omitempty"`

	// EmissionLevel The emission level this vehicle supports. Possible values:
	//  European Union, Heavy-Duty Truck and Bus Engines:
	//  EURO_III, EURO_III_EEV, EURO_IV, EURO_V, EURO_VI
	//  European Union, Nonroad Engines:
	//  EURO_STAGE_III, EURO_STAGE_IV, EURO_STAGE_V
	//  United_States, Heavy-Duty Truck and Bus Engines:
	//  EPA_2004, EPA_2007, EPA_2010, EPA_2015_NOX10, EPA_2015_NOX05, EPA_2015_NOX02
	//  United_States, Nonroad Engines:
	//  EPA_TIER_2, EPA_TIER_3, EPA_TIER_4_2008, EPA_TIER_4_2013
	//  Brazil, Heavy-Duty Truck and Bus Engines:
	//  PROCONVE_P5, PROCONVE_P6, PROCONVE_P7
	//  Brazil, Nonroad Engines:
	//  PROCONVE_MARI
	EmissionLevel *string `json:"emissionLevel,omitempty"`

	// GearboxType The type of gearbox the vehicle is equipped with. rFMS standard values MANUAL, AUTOMATIC, SEMI_AUTOMATIC, NO_GEAR (e.g electrical)
	GearboxType *string `json:"gearboxType,omitempty"`

	// HasRampOrLift If the vehicle is equipped with a ramp or not. This is used mainly for buses.
	HasRampOrLift *bool `json:"hasRampOrLift,omitempty"`

	// Model Indicates the model of the vehicle. OEM specific value.
	Model *string `json:"model,omitempty"`

	// NoOfAxles Number of axles on the vehicle. This is used mainly for buses
	NoOfAxles *int32 `json:"noOfAxles,omitempty"`

	// PossibleFuelType The possible fuel types supported by this vehicle, formatted as the HEX id number according to SPN 5837. This does NOT indicate which fuel type that is presently being used.
	PossibleFuelType []string `json:"possibleFuelType,omitempty"`

	// ProductionDate Indicates when the vehicle was produced.
	ProductionDate *struct {
		// Day Day of the month where first day of the month is 1
		Day *int32 `json:"day,omitempty"`

		// Month Month of the year, where January is value 1
		Month *int32 `json:"month,omitempty"`
		Year  *int32 `json:"year,omitempty"`
	} `json:"productionDate,omitempty"`

	// RegistrationNumber The registration number (license plate) of the vehicle. This is a Scania-specific field.
	RegistrationNumber *string `json:"registrationNumber,omitempty"`

	// TachographType The type of tachograph in the vehicle. rFMS standard values MTCO, DTCO, TSU, DTCO_G1, DTCO_G2, NONE
	//  DTCO - Digital tachograph, unknown generation
	//  DTCO_G1 - Digital tachograph generation 1
	//  DTCO_G2 - Digital tachograph generation 2
	//  NONE - No tachograph in the vehicle
	//  MTCO - Modular tachograph
	//  TSU - Tachograph simulator
	TachographType *string `json:"tachographType,omitempty"`

	// TellTaleCode This parameter indicates how the tell tales shall be interpreted, the code is unique for each OEM. One OEM can have different interpretations  depending on vehicle type.
	TellTaleCode *string `json:"tellTaleCode,omitempty"`

	// TotalBatteryPackCapacity Total battery pack capacity in watt hours.
	TotalBatteryPackCapacity *int32 `json:"totalBatteryPackCapacity,omitempty"`

	// TotalFuelTankCapacityGaseous Total gas tank capacity for all tanks in kilograms.
	TotalFuelTankCapacityGaseous *int32 `json:"totalFuelTankCapacityGaseous,omitempty"`

	// TotalFuelTankVolume Total fuel tank volume for all tanks in milliltres.
	TotalFuelTankVolume *int32 `json:"totalFuelTankVolume,omitempty"`

	// Type Indicates the type of vehicle. rFMS standard values TRUCK, BUS, VAN
	Type *string `json:"type,omitempty"`

	// VIN vehicle identification number. See ISO 3779 (17 characters)
	VIN *VINProperty `json:"vin,omitempty"`
}

// VehiclePositionObject defines model for VehiclePositionObject.
type VehiclePositionObject struct {
	// CreatedDateTime When the data was retrieved in the vehicle in iso8601 format.
	CreatedDateTime *CreatedDateTimeProperty `json:"createdDateTime,omitempty"`
	GNSSPosition    *GNSSPositionObject      `json:"gnssPosition,omitempty"`

	// ReceivedDateTime Reception at Server. To be used for handling of "more data available" in iso8601 format.
	ReceivedDateTime *ReceivedDateTimeProperty `json:"receivedDateTime,omitempty"`

	// TachographSpeed Tachograph vehicle speed in km/h (Speed of the vehicle registered by the tachograph)
	TachographSpeed *float64 `json:"tachographSpeed,omitempty"`

	// TriggerType This description is placed here due to limitations of describing references in OpenAPI
	//  Property __driverId__:
	//  The driver id of driver. (independant whether it is driver or Co-driver)
	//  This is only set if the TriggerType = DRIVER_LOGIN, DRIVER_LOGOUT, DRIVER_1_WORKING_STATE_CHANGED or DRIVER_2_WORKING_STATE_CHANGED
	//  For DRIVER_LOGIN it is the id of the driver that logged in
	//  For DRIVER_LOGOUT it is the id of the driver that logged out
	//  For DRIVER_1_WORKING_STATE_CHANGED it is the id of driver 1
	//  For DRIVER_2_WORKING_STATE_CHANGED it is the id of driver 2
	//  Property __tellTaleInfo__:
	//  The tell tale(s) that triggered this message.
	//  This is only set if the TriggerType = TELL_TALE
	TriggerType *TriggerObject `json:"triggerType,omitempty"`

	// VIN vehicle identification number. See ISO 3779 (17 characters)
	VIN *VINProperty `json:"vin,omitempty"`

	// WheelBasedSpeed Wheel-Based Vehicle Speed in km/h (Speed of the vehicle as calculated from wheel or tailshaft speed)
	WheelBasedSpeed *float64 `json:"wheelBasedSpeed,omitempty"`
}

// VehiclePositionResponseObject defines model for VehiclePositionResponseObject.
type VehiclePositionResponseObject struct {
	// MoreDataAvailable This will be set to true if the result set was too large to be sent back in one reply. A new request must be sent to get the rest of the vehicle positions, where the starttime parameter must be supplied. The starttime should be set to the latest ReceivedDateTime + 1 second of the last vehicle in the result set of this message.
	MoreDataAvailable *bool `json:"moreDataAvailable,omitempty"`

	// MoreDataAvailableLink Populated with the link to the next part of the result when moreDataAvailable is true. The link is relative, i.e. starts with /rfms/vehiclepositions, and preserves any query parameters from the original request.
	MoreDataAvailableLink *string `json:"moreDataAvailableLink,omitempty"`

	// RequestServerDateTime Time to be used to ask for historical data at customers (for starttime), to solve the problem of having different times at server and clients. This is the time at the server when this request was received. To avoid losing any messages or get duplicates, this is the time that should be supplied in the startTime parameter in the next request in iso8601 format.
	RequestServerDateTime   *Time `json:"requestServerDateTime,omitempty"`
	VehiclePositionResponse *struct {
		VehiclePositions []VehiclePositionObject `json:"vehiclePositions,omitempty"`
	} `json:"vehiclePositionResponse,omitempty"`
}

// VehicleResponseObject defines model for VehicleResponseObject.
type VehicleResponseObject struct {
	// MoreDataAvailable This will be set to true if the result set was too large to be sent back in one reply. A new request must be sent to get the rest of the vehicles, where the lastVin parameter must be supplied. The lastVin should be set to the VIN of the last vehicle in the result set of this message.
	MoreDataAvailable *bool `json:"moreDataAvailable,omitempty"`

	// MoreDataAvailableLink Populated with the link to the next part of the result when moreDataAvailable is true. The link is relative, i.e. starts with /rfms/vehicles, and preserves any query parameters from the original request.
	MoreDataAvailableLink *string `json:"moreDataAvailableLink,omitempty"`
	VehicleResponse       *struct {
		Vehicles []VehicleObject `json:"vehicles,omitempty"`
	} `json:"vehicleResponse,omitempty"`
}

// VehicleStatusObject defines model for VehicleStatusObject.
type VehicleStatusObject struct {
	AccumulatedData *AccumulatedDataObject `json:"accumulatedData,omitempty"`

	// CreatedDateTime When the data was retrieved in the vehicle in iso8601 format.
	CreatedDateTime *CreatedDateTimeProperty `json:"createdDateTime,omitempty"`

	// DoorStatus Individual status for each door. Bus specific parameter
	DoorStatus []struct {
		DoorEnabledStatus *VehicleStatusObjectDoorStatusDoorEnabledStatus `json:"DoorEnabledStatus,omitempty"`
		DoorLockStatus    *VehicleStatusObjectDoorStatusDoorLockStatus    `json:"DoorLockStatus,omitempty"`
		DoorNumber        *int32                                          `json:"DoorNumber,omitempty"`
		DoorOpenStatus    *VehicleStatusObjectDoorStatusDoorOpenStatus    `json:"DoorOpenStatus,omitempty"`
	} `json:"doorStatus,omitempty"`
	Driver1ID *DriverIDObject `json:"driver1Id,omitempty"`

	// EngineTotalFuelUsed The total fuel the vehicle has used during its lifetime in MilliLitres. At least one of engineTotalFuelUsed, totalFuelUsedGaseous or totalElectricEnergyUsed is mandatory.
	EngineTotalFuelUsed *int64 `json:"engineTotalFuelUsed,omitempty"`

	// GrossCombinationVehicleWeight The full vehicle weight in kg
	GrossCombinationVehicleWeight *int32 `json:"grossCombinationVehicleWeight,omitempty"`

	// HrTotalVehicleDistance Accumulated distance travelled by the vehicle during its operation in meter
	HrTotalVehicleDistance *int64 `json:"hrTotalVehicleDistance,omitempty"`

	// ReceivedDateTime Reception at Server. To be used for handling of "more data available" in iso8601 format.
	ReceivedDateTime *ReceivedDateTimeProperty `json:"receivedDateTime,omitempty"`
	SnapshotData     *SnapshotDataObject       `json:"snapshotData,omitempty"`

	// Status2OfDoors Composite indication of all bus door statuses. Bus specific parameter
	Status2OfDoors *VehicleStatusObjectStatus2OfDoors `json:"status2OfDoors,omitempty"`

	// TotalElectricEnergyUsed Total electric energy consumed by the vehicle, excluding when plugged in (vehicle coupler) for charging, (incl. motor, PTO, cooling, etc.) in watt hours. Recuperation is subtracted from the value.  At least one of engineTotalFuelUsed, totalFuelUsedGaseous or totalElectricEnergyUsed is mandatory.
	TotalElectricEnergyUsed *int64 `json:"totalElectricEnergyUsed,omitempty"`

	// TotalElectricMotorHours The total hours the electric motor is ready for propulsion (i.e. crank mode). At least one of totalEngineHours or totalElectricMotorHours is mandatory
	TotalElectricMotorHours *float64 `json:"totalElectricMotorHours,omitempty"`

	// TotalEngineHours The total hours of operation for the vehicle combustion engine. At least one of totalEngineHours or totalElectricMotorHours is Mandatory
	TotalEngineHours *float64 `json:"totalEngineHours,omitempty"`

	// TotalFuelUsedGaseous Total fuel consumed in kg (trip drive fuel + trip PTO governor moving fuel + trip PTO governor non-moving fuel + trip idle fuel) over the life of the engine. At least one of engineTotalFuelUsed, totalFuelUsedGaseous or totalElectricEnergyUsed is mandatory.
	TotalFuelUsedGaseous *int64 `json:"totalFuelUsedGaseous,omitempty"`

	// TriggerType This description is placed here due to limitations of describing references in OpenAPI
	//  Property __driverId__:
	//  The driver id of driver. (independant whether it is driver or Co-driver)
	//  This is only set if the TriggerType = DRIVER_LOGIN, DRIVER_LOGOUT, DRIVER_1_WORKING_STATE_CHANGED or DRIVER_2_WORKING_STATE_CHANGED
	//  For DRIVER_LOGIN it is the id of the driver that logged in
	//  For DRIVER_LOGOUT it is the id of the driver that logged out
	//  For DRIVER_1_WORKING_STATE_CHANGED it is the id of driver 1
	//  For DRIVER_2_WORKING_STATE_CHANGED it is the id of driver 2
	//  Property __tellTaleInfo__:
	//  The tell tale(s) that triggered this message.
	//  This is only set if the TriggerType = TELL_TALE
	TriggerType *TriggerObject    `json:"triggerType,omitempty"`
	UptimeData  *UptimeDataObject `json:"uptimeData,omitempty"`

	// VIN vehicle identification number. See ISO 3779 (17 characters)
	VIN *VINProperty `json:"vin,omitempty"`
}

// VehicleStatusObjectDoorStatusDoorEnabledStatus defines model for VehicleStatusObject.DoorStatus.DoorEnabledStatus.
type VehicleStatusObjectDoorStatusDoorEnabledStatus string

// VehicleStatusObjectDoorStatusDoorLockStatus defines model for VehicleStatusObject.DoorStatus.DoorLockStatus.
type VehicleStatusObjectDoorStatusDoorLockStatus string

// VehicleStatusObjectDoorStatusDoorOpenStatus defines model for VehicleStatusObject.DoorStatus.DoorOpenStatus.
type VehicleStatusObjectDoorStatusDoorOpenStatus string

// VehicleStatusObjectStatus2OfDoors Composite indication of all bus door statuses. Bus specific parameter
type VehicleStatusObjectStatus2OfDoors string

// VehicleStatusResponseObject defines model for VehicleStatusResponseObject.
type VehicleStatusResponseObject struct {
	// MoreDataAvailable This will be set to true if the result set was too large to be sent back in one reply. A new request must be done to get the rest of the vehicle statuses, where the starttime parameter must be supplied. The starttime should be set to the ReceivedDateTime + 1 second of the last vehicle in the result set of this message.
	MoreDataAvailable *bool `json:"moreDataAvailable,omitempty"`

	// MoreDataAvailableLink Populated with the link to the next part of the result when moreDataAvailable is true. The link is relative, i.e. starts with /rfms/vehiclestatuses, and preserves any query parameters from the original request.
	MoreDataAvailableLink *string `json:"moreDataAvailableLink,omitempty"`

	// RequestServerDateTime Time in UTC to be used to ask for historical data (for starttime), to solve the problem of having different times at server and clients. This is the time at the server when this request was received. To avoid losing any messages or get duplicates, this is the time that should be supplied in the startTime parameter in the next request in iso8601 format.
	RequestServerDateTime *Time `json:"requestServerDateTime,omitempty"`
	VehicleStatusResponse *struct {
		VehicleStatuses []VehicleStatusObject `json:"vehicleStatuses,omitempty"`
	} `json:"vehicleStatusResponse,omitempty"`
}

// VINProperty vehicle identification number. See ISO 3779 (17 characters)
type VINProperty = string

// BadRequest Optional responses for error codes, detailing the error if needed
type BadRequest = ErrorObject

// Forbidden Optional responses for error codes, detailing the error if needed
type Forbidden = ErrorObject

// NotAcceptable Optional responses for error codes, detailing the error if needed
type NotAcceptable = ErrorObject

// NotFound Optional responses for error codes, detailing the error if needed
type NotFound = ErrorObject

// TooManyRequests Optional responses for error codes, detailing the error if needed
type TooManyRequests = ErrorObject

// Unauthorized Optional responses for error codes, detailing the error if needed
type Unauthorized = ErrorObject
