// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/rfms/v4/api.proto

package rfmsv4

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccumulatedData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The time the vehicle speed has been over zero.
	DurationWheelbasedSpeedOverZero int64 `protobuf:"varint,11281986,opt,name=duration_wheelbased_speed_over_zero,json=durationWheelbasedSpeedOverZero,proto3" json:"duration_wheelbased_speed_over_zero,omitempty"`
	// The distance the vehicle has been driven with cruise control active
	DistanceCruiseControlActive int64 `protobuf:"varint,343769099,opt,name=distance_cruise_control_active,json=distanceCruiseControlActive,proto3" json:"distance_cruise_control_active,omitempty"`
	// The time the vehicle has been driven with cruise control active
	DurationCruiseControlActive int64 `protobuf:"varint,208121960,opt,name=duration_cruise_control_active,json=durationCruiseControlActive,proto3" json:"duration_cruise_control_active,omitempty"`
	// The fuel the vehicle has consumed while driven with cruise control active, in millilitres
	FuelConsumptionDuringCruiseActive int64 `protobuf:"varint,228091972,opt,name=fuel_consumption_during_cruise_active,json=fuelConsumptionDuringCruiseActive,proto3" json:"fuel_consumption_during_cruise_active,omitempty"`
	// The gas the vehicle has consumed while driven with cruise control active, in kilograms.
	FuelConsumptionDuringCruiseActiveGaseous int64 `protobuf:"varint,114613601,opt,name=fuel_consumption_during_cruise_active_gaseous,json=fuelConsumptionDuringCruiseActiveGaseous,proto3" json:"fuel_consumption_during_cruise_active_gaseous,omitempty"`
	// The electric energy the vehicle has consumed while driven with cruise control active, in watt-hours.
	ElectricEnergyConsumptionDuringCruiseActive int64 `protobuf:"varint,422289399,opt,name=electric_energy_consumption_during_cruise_active,json=electricEnergyConsumptionDuringCruiseActive,proto3" json:"electric_energy_consumption_during_cruise_active,omitempty"`
	// The time the vehicle speed has been equal to zero, in seconds. Engine on (RPM>0 or electic motor in crank mode) and no PTO active
	DurationWheelbasedSpeedZero int64 `protobuf:"varint,104209566,opt,name=duration_wheelbased_speed_zero,json=durationWheelbasedSpeedZero,proto3" json:"duration_wheelbased_speed_zero,omitempty"`
	// The fuel the vehicle has consumed while the vehicle speed has been equal to zero. Engine on (RPM>0) and no PTO active. Unit in millilitres.
	FuelWheelbasedSpeedZero int64 `protobuf:"varint,127841475,opt,name=fuel_wheelbased_speed_zero,json=fuelWheelbasedSpeedZero,proto3" json:"fuel_wheelbased_speed_zero,omitempty"`
	// The gas the vehicle has consumed while the vehicle speed has been equal to zero. Engine on (RPM>0) and no PTO active. Unit in kilograms.
	FuelWheelbasedSpeedZeroGaseous int64 `protobuf:"varint,498394914,opt,name=fuel_wheelbased_speed_zero_gaseous,json=fuelWheelbasedSpeedZeroGaseous,proto3" json:"fuel_wheelbased_speed_zero_gaseous,omitempty"`
	// The electric energy the vehicle has consumed while the vehicle speed has been equal to zero. Electric motor is in crank mode and no PTO active. Unit in watt-hours.
	ElectricEnergyWheelbasedSpeedZero int64 `protobuf:"varint,492914065,opt,name=electric_energy_wheelbased_speed_zero,json=electricEnergyWheelbasedSpeedZero,proto3" json:"electric_energy_wheelbased_speed_zero,omitempty"`
	// The fuel the vehicle has consumed while the vehicle speed has been over zero. Engine on (RPM>0). Unit in millilitres.
	FuelWheelbasedSpeedOverZero int64 `protobuf:"varint,479821734,opt,name=fuel_wheelbased_speed_over_zero,json=fuelWheelbasedSpeedOverZero,proto3" json:"fuel_wheelbased_speed_over_zero,omitempty"`
	// The gas the vehicle has consumed while the vehicle speed has been over zero. Engine on (RPM>0). Unit in kilograms.
	FuelWheelbasedSpeedOverZeroGaseous int64 `protobuf:"varint,318672193,opt,name=fuel_wheelbased_speed_over_zero_gaseous,json=fuelWheelbasedSpeedOverZeroGaseous,proto3" json:"fuel_wheelbased_speed_over_zero_gaseous,omitempty"`
	// The electric energy the vehicle has consumed (including recuperation) while the vehicle speed has been over zero. Electric motor is in crank mode. Unit in watt-hours.
	ElectricEnergyWheelbasedSpeedOverZero int64 `protobuf:"varint,435319212,opt,name=electric_energy_wheelbased_speed_over_zero,json=electricEnergyWheelbasedSpeedOverZero,proto3" json:"electric_energy_wheelbased_speed_over_zero,omitempty"`
	// The electric energy the auxiliary systems have consumed, in watt hours. Auxiliary systems are all consumers except electric motor(s) and PTO(s).
	ElectricEnergyAux int64 `protobuf:"varint,234384146,opt,name=electric_energy_aux,json=electricEnergyAux,proto3" json:"electric_energy_aux,omitempty"`
	// Label WHEELBASED_SPEED_ZERO  At least one PTO active during wheelbased speed=0  Counters for time (seconds) and consumption (millilitres, kilograms, watt-hours)  Label WHEELBASED_SPEED_OVER_ZERO  At least one PTO active during wheelbased speed>0  Counters for time (seconds), distance (meter) and consumption (millilitres, kilograms, watt-hours)
	PtoActiveClass []*Label `protobuf:"bytes,25344981,rep,name=pto_active_class,json=ptoActiveClass,proto3" json:"pto_active_class,omitempty"`
	// The total number of times the brake pedal has been used while the vehicle was driving.
	BrakePedalCounterSpeedOverZero int64 `protobuf:"varint,373626082,opt,name=brake_pedal_counter_speed_over_zero,json=brakePedalCounterSpeedOverZero,proto3" json:"brake_pedal_counter_speed_over_zero,omitempty"`
	// The total distance the vehicle has driven where the brake pedal has been used. Unit Meters.
	DistanceBrakePedalActiveSpeedOverZero int64 `protobuf:"varint,414022533,opt,name=distance_brake_pedal_active_speed_over_zero,json=distanceBrakePedalActiveSpeedOverZero,proto3" json:"distance_brake_pedal_active_speed_over_zero,omitempty"`
	// In percent. Minimum 5 classes [0, 20[ [20, 40[ [40, 60[ [60, 80[ [80, 100]
	AccelerationPedalPositionClass []*FromToClass `protobuf:"bytes,215928488,rep,name=acceleration_pedal_position_class,json=accelerationPedalPositionClass,proto3" json:"acceleration_pedal_position_class,omitempty"`
	// In percent. Minimum 5 classes [0, 20[ [20, 40[ [40, 60[ [60, 80[ [80, 100]
	BrakePedalPositionClass []*FromToClass `protobuf:"bytes,117489446,rep,name=brake_pedal_position_class,json=brakePedalPositionClass,proto3" json:"brake_pedal_position_class,omitempty"`
	// In m/s2 Minimum 13 classes. ], -1.1] ]-1.1, -0.9] ]-0.9, -0.7] ]-0.7, -0.5] ]-0.5, -0.3] ]-0.3, -0.1] ]-0.1, 0.1[ [0.1, 0.3[ [0.3, 0.5[ [0.5, 0.7[ [0.7, 0.9[ [0.9, 1.1[ [1.1, [
	AccelerationClass []*FromToClass `protobuf:"bytes,442367754,rep,name=acceleration_class,json=accelerationClass,proto3" json:"acceleration_class,omitempty"`
	// In m/s2 Minimum 11 classes ], -3.0] ]-3.0, -2.5] ]-2.5, -2.0] ]-2.0, -1.5] ]-1.5, -1.1] ]-1.1, 1.1[ [1.1, 1.5[ [1.5, 2.0[ [2.0, 2.5[ [2.5, 3.0[ [3.0, [
	HighAccelerationClass []*FromToClass `protobuf:"bytes,338031288,rep,name=high_acceleration_class,json=highAccelerationClass,proto3" json:"high_acceleration_class,omitempty"`
	// In percent (how the retarder is used as a positive value). Minimum 5 classes ]0, 20[ [20, 40[ [40, 60[ [60, 80[ [80, 100]
	RetarderTorqueClass []*FromToClass `protobuf:"bytes,434617088,rep,name=retarder_torque_class,json=retarderTorqueClass,proto3" json:"retarder_torque_class,omitempty"`
	// Driving without torque, with gear (clutch is engaged) Labels DRIVING_WITHOUT_TORQUE
	DrivingWithoutTorqueClass []*Label `protobuf:"bytes,312295059,rep,name=driving_without_torque_class,json=drivingWithoutTorqueClass,proto3" json:"driving_without_torque_class,omitempty"`
	// In percent based on EEC1 value (Actual Engine-Percent Torque). Minimum 10 classes [0, 10[ [10, 20[ [20, 30[ [30, 40[ [40, 50[ [50, 60[ [60, 70[ [70, 80[ [80, 90[ [90, 100]
	EngineTorqueClass []*FromToClassCombustion `protobuf:"bytes,378431968,rep,name=engine_torque_class,json=engineTorqueClass,proto3" json:"engine_torque_class,omitempty"`
	// In percent (Actual Engine-Percent Torque). Minimum 10 classes [0, 10[ [10, 20[ [20, 30[ [30, 40[ [40, 50[ [50, 60[ [60, 70[ [70, 80[ [80, 90[ [90, 100]
	ElectricMotorTorqueClass []*FromToClassElectrical `protobuf:"bytes,312684306,rep,name=electric_motor_torque_class,json=electricMotorTorqueClass,proto3" json:"electric_motor_torque_class,omitempty"`
	// In percent based on EEC2 value (Engine Percent Load At Current Speed). Minimum 10 classes [0, 10[ [10, 20[ [20, 30[ [30, 40[ [40, 50[ [50, 60[ [60, 70[ [70, 80[ [80, 90[ [90, 100]
	EngineTorqueAtCurrentSpeedClass []*FromToClassCombustion `protobuf:"bytes,525023165,rep,name=engine_torque_at_current_speed_class,json=engineTorqueAtCurrentSpeedClass,proto3" json:"engine_torque_at_current_speed_class,omitempty"`
	// In percent (Engine Percent Load At Current Speed). Minimum 10 classes [0, 10[ [10, 20[ [20, 30[ [30, 40[ [40, 50[ [50, 60[ [60, 70[ [70, 80[ [80, 90[ [90, 100]
	ElectricMotorTorqueAtCurrentSpeedClass []*FromToClassElectrical `protobuf:"bytes,164789995,rep,name=electric_motor_torque_at_current_speed_class,json=electricMotorTorqueAtCurrentSpeedClass,proto3" json:"electric_motor_torque_at_current_speed_class,omitempty"`
	// In km/h Minimum 40 classes. [0, 4[ [4, 8[ [8, 12[ [12, 16[ [16, 20[ [20, 24[ ... [156, [ Engine on (RPM>0 or electric motor in crank mode)
	VehicleSpeedClass []*FromToClass `protobuf:"bytes,291243758,rep,name=vehicle_speed_class,json=vehicleSpeedClass,proto3" json:"vehicle_speed_class,omitempty"`
	// Classes refer to the RPM of the combustion engine. Only mandatory if the vehicle has a combustion engine for propulsion. Minimum 10 classes [0, 400[ [400, 800[ [800, 1200[ [1200, 1600[ [1600, 2000[ [2000, 2400[ [2400, 2800[ [2800, 3200[ [3200, 3600[ [3600, [ Note: Engine on (RPM>0 or electric motor in crank mode)
	EngineSpeedClass []*FromToClass `protobuf:"bytes,76185862,rep,name=engine_speed_class,json=engineSpeedClass,proto3" json:"engine_speed_class,omitempty"`
	// In m/s2 Minimum 13 classes. ], -1.1] ]-1.1, -0.9] ]-0.9, -0.7] ]-0.7, -0.5] ]-0.5, -0.3] ]-0.3, -0.1] ]-0.1, 0.1[ [0.1, 0.3[ [0.3, 0.5[ [0.5, 0.7[ [0.7, 0.9[ [0.9, 1.1[ [1.1, [
	AccelerationDuringBrakeClass []*FromToClass `protobuf:"bytes,87193735,rep,name=acceleration_during_brake_class,json=accelerationDuringBrakeClass,proto3" json:"acceleration_during_brake_class,omitempty"`
	// The currently selected gear One class per gear. Neutral is also a gear. Park is also a gear. This is formatted according to SPN 524, supplied as a decimal value. Example 0 = Neutral, 1 = 1:st gear... This is mainly used for Buses.
	SelectedGearClass []*Label `protobuf:"bytes,423427349,rep,name=selected_gear_class,json=selectedGearClass,proto3" json:"selected_gear_class,omitempty"`
	// The currently used gear One class per gear. Neutral is also a gear. Park is also a gear. This is formatted according to SPN 523, supplied as a decimal value. Example 0 = Neutral, 1 = 1:st gear... This is mainly used for Buses.
	CurrentGearClass []*Label `protobuf:"bytes,168321358,rep,name=current_gear_class,json=currentGearClass,proto3" json:"current_gear_class,omitempty"`
	// The total number of times the chairlift has been outside the bus. This is mainly used for Buses
	ChairliftCounter int64 `protobuf:"varint,370296847,opt,name=chairlift_counter,json=chairliftCounter,proto3" json:"chairlift_counter,omitempty"`
	// The total number of stop requests made. This is mainly used for Buses
	StopRequestCounter int64 `protobuf:"varint,172422642,opt,name=stop_request_counter,json=stopRequestCounter,proto3" json:"stop_request_counter,omitempty"`
	// The total number of times the bus has knelt.
	KneelingCounter int64 `protobuf:"varint,269559947,opt,name=kneeling_counter,json=kneelingCounter,proto3" json:"kneeling_counter,omitempty"`
	// The total number of pram requests made. This is mainly used for Buses
	PramRequestCounter int64 `protobuf:"varint,242824262,opt,name=pram_request_counter,json=pramRequestCounter,proto3" json:"pram_request_counter,omitempty"`
	// Classes refer to the recuperated electric power in kilowatt Minimum 11 classes [0, 100[ [100, 200[ [200, 300[ ... [900, 1000[ [1000, [
	ElectricPowerRecuperationClass []*FromToClassElectrical `protobuf:"bytes,127417873,rep,name=electric_power_recuperation_class,json=electricPowerRecuperationClass,proto3" json:"electric_power_recuperation_class,omitempty"`
	unknownFields                  protoimpl.UnknownFields
	sizeCache                      protoimpl.SizeCache
}

func (x *AccumulatedData) Reset() {
	*x = AccumulatedData{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccumulatedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccumulatedData) ProtoMessage() {}

func (x *AccumulatedData) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccumulatedData.ProtoReflect.Descriptor instead.
func (*AccumulatedData) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{0}
}

func (x *AccumulatedData) GetDurationWheelbasedSpeedOverZero() int64 {
	if x != nil {
		return x.DurationWheelbasedSpeedOverZero
	}
	return 0
}

func (x *AccumulatedData) GetDistanceCruiseControlActive() int64 {
	if x != nil {
		return x.DistanceCruiseControlActive
	}
	return 0
}

func (x *AccumulatedData) GetDurationCruiseControlActive() int64 {
	if x != nil {
		return x.DurationCruiseControlActive
	}
	return 0
}

func (x *AccumulatedData) GetFuelConsumptionDuringCruiseActive() int64 {
	if x != nil {
		return x.FuelConsumptionDuringCruiseActive
	}
	return 0
}

func (x *AccumulatedData) GetFuelConsumptionDuringCruiseActiveGaseous() int64 {
	if x != nil {
		return x.FuelConsumptionDuringCruiseActiveGaseous
	}
	return 0
}

func (x *AccumulatedData) GetElectricEnergyConsumptionDuringCruiseActive() int64 {
	if x != nil {
		return x.ElectricEnergyConsumptionDuringCruiseActive
	}
	return 0
}

func (x *AccumulatedData) GetDurationWheelbasedSpeedZero() int64 {
	if x != nil {
		return x.DurationWheelbasedSpeedZero
	}
	return 0
}

func (x *AccumulatedData) GetFuelWheelbasedSpeedZero() int64 {
	if x != nil {
		return x.FuelWheelbasedSpeedZero
	}
	return 0
}

func (x *AccumulatedData) GetFuelWheelbasedSpeedZeroGaseous() int64 {
	if x != nil {
		return x.FuelWheelbasedSpeedZeroGaseous
	}
	return 0
}

func (x *AccumulatedData) GetElectricEnergyWheelbasedSpeedZero() int64 {
	if x != nil {
		return x.ElectricEnergyWheelbasedSpeedZero
	}
	return 0
}

func (x *AccumulatedData) GetFuelWheelbasedSpeedOverZero() int64 {
	if x != nil {
		return x.FuelWheelbasedSpeedOverZero
	}
	return 0
}

func (x *AccumulatedData) GetFuelWheelbasedSpeedOverZeroGaseous() int64 {
	if x != nil {
		return x.FuelWheelbasedSpeedOverZeroGaseous
	}
	return 0
}

func (x *AccumulatedData) GetElectricEnergyWheelbasedSpeedOverZero() int64 {
	if x != nil {
		return x.ElectricEnergyWheelbasedSpeedOverZero
	}
	return 0
}

func (x *AccumulatedData) GetElectricEnergyAux() int64 {
	if x != nil {
		return x.ElectricEnergyAux
	}
	return 0
}

func (x *AccumulatedData) GetPtoActiveClass() []*Label {
	if x != nil {
		return x.PtoActiveClass
	}
	return nil
}

func (x *AccumulatedData) GetBrakePedalCounterSpeedOverZero() int64 {
	if x != nil {
		return x.BrakePedalCounterSpeedOverZero
	}
	return 0
}

func (x *AccumulatedData) GetDistanceBrakePedalActiveSpeedOverZero() int64 {
	if x != nil {
		return x.DistanceBrakePedalActiveSpeedOverZero
	}
	return 0
}

func (x *AccumulatedData) GetAccelerationPedalPositionClass() []*FromToClass {
	if x != nil {
		return x.AccelerationPedalPositionClass
	}
	return nil
}

func (x *AccumulatedData) GetBrakePedalPositionClass() []*FromToClass {
	if x != nil {
		return x.BrakePedalPositionClass
	}
	return nil
}

func (x *AccumulatedData) GetAccelerationClass() []*FromToClass {
	if x != nil {
		return x.AccelerationClass
	}
	return nil
}

func (x *AccumulatedData) GetHighAccelerationClass() []*FromToClass {
	if x != nil {
		return x.HighAccelerationClass
	}
	return nil
}

func (x *AccumulatedData) GetRetarderTorqueClass() []*FromToClass {
	if x != nil {
		return x.RetarderTorqueClass
	}
	return nil
}

func (x *AccumulatedData) GetDrivingWithoutTorqueClass() []*Label {
	if x != nil {
		return x.DrivingWithoutTorqueClass
	}
	return nil
}

func (x *AccumulatedData) GetEngineTorqueClass() []*FromToClassCombustion {
	if x != nil {
		return x.EngineTorqueClass
	}
	return nil
}

func (x *AccumulatedData) GetElectricMotorTorqueClass() []*FromToClassElectrical {
	if x != nil {
		return x.ElectricMotorTorqueClass
	}
	return nil
}

func (x *AccumulatedData) GetEngineTorqueAtCurrentSpeedClass() []*FromToClassCombustion {
	if x != nil {
		return x.EngineTorqueAtCurrentSpeedClass
	}
	return nil
}

func (x *AccumulatedData) GetElectricMotorTorqueAtCurrentSpeedClass() []*FromToClassElectrical {
	if x != nil {
		return x.ElectricMotorTorqueAtCurrentSpeedClass
	}
	return nil
}

func (x *AccumulatedData) GetVehicleSpeedClass() []*FromToClass {
	if x != nil {
		return x.VehicleSpeedClass
	}
	return nil
}

func (x *AccumulatedData) GetEngineSpeedClass() []*FromToClass {
	if x != nil {
		return x.EngineSpeedClass
	}
	return nil
}

func (x *AccumulatedData) GetAccelerationDuringBrakeClass() []*FromToClass {
	if x != nil {
		return x.AccelerationDuringBrakeClass
	}
	return nil
}

func (x *AccumulatedData) GetSelectedGearClass() []*Label {
	if x != nil {
		return x.SelectedGearClass
	}
	return nil
}

func (x *AccumulatedData) GetCurrentGearClass() []*Label {
	if x != nil {
		return x.CurrentGearClass
	}
	return nil
}

func (x *AccumulatedData) GetChairliftCounter() int64 {
	if x != nil {
		return x.ChairliftCounter
	}
	return 0
}

func (x *AccumulatedData) GetStopRequestCounter() int64 {
	if x != nil {
		return x.StopRequestCounter
	}
	return 0
}

func (x *AccumulatedData) GetKneelingCounter() int64 {
	if x != nil {
		return x.KneelingCounter
	}
	return 0
}

func (x *AccumulatedData) GetPramRequestCounter() int64 {
	if x != nil {
		return x.PramRequestCounter
	}
	return 0
}

func (x *AccumulatedData) GetElectricPowerRecuperationClass() []*FromToClassElectrical {
	if x != nil {
		return x.ElectricPowerRecuperationClass
	}
	return nil
}

type CreatedDateTimeProperty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreatedDateTimeProperty) Reset() {
	*x = CreatedDateTimeProperty{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreatedDateTimeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedDateTimeProperty) ProtoMessage() {}

func (x *CreatedDateTimeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedDateTimeProperty.ProtoReflect.Descriptor instead.
func (*CreatedDateTimeProperty) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{1}
}

type DriverId struct {
	state                     protoimpl.MessageState             `protogen:"open.v1"`
	TachoDriverIdentification *DriverIdTachoDriverIdentification `protobuf:"bytes,22699971,opt,name=tacho_driver_identification,json=tachoDriverIdentification,proto3" json:"tacho_driver_identification,omitempty"`
	OemDriverIdentification   *DriverIdOemDriverIdentification   `protobuf:"bytes,14547331,opt,name=oem_driver_identification,json=oemDriverIdentification,proto3" json:"oem_driver_identification,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *DriverId) Reset() {
	*x = DriverId{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverId) ProtoMessage() {}

func (x *DriverId) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverId.ProtoReflect.Descriptor instead.
func (*DriverId) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{2}
}

func (x *DriverId) GetTachoDriverIdentification() *DriverIdTachoDriverIdentification {
	if x != nil {
		return x.TachoDriverIdentification
	}
	return nil
}

func (x *DriverId) GetOemDriverIdentification() *DriverIdOemDriverIdentification {
	if x != nil {
		return x.OemDriverIdentification
	}
	return nil
}

type DriverIdOemDriverIdentification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Contains an optional id type (e.g. pin, USB, encrypted EU id...)
	IdType string `protobuf:"bytes,42218465,opt,name=id_type,json=idType,proto3" json:"id_type,omitempty"`
	// An OEM specific driver id.
	OemDriverIdentification string `protobuf:"bytes,14547331,opt,name=oem_driver_identification,json=oemDriverIdentification,proto3" json:"oem_driver_identification,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *DriverIdOemDriverIdentification) Reset() {
	*x = DriverIdOemDriverIdentification{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverIdOemDriverIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverIdOemDriverIdentification) ProtoMessage() {}

func (x *DriverIdOemDriverIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverIdOemDriverIdentification.ProtoReflect.Descriptor instead.
func (*DriverIdOemDriverIdentification) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{3}
}

func (x *DriverIdOemDriverIdentification) GetIdType() string {
	if x != nil {
		return x.IdType
	}
	return ""
}

func (x *DriverIdOemDriverIdentification) GetOemDriverIdentification() string {
	if x != nil {
		return x.OemDriverIdentification
	}
	return ""
}

type DriverIdTachoDriverIdentification struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The unique identification of a driver in a Member State. This fields is formatted according the definition for driverIdentification in COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
	DriverIdentification string `protobuf:"bytes,19610781,opt,name=driver_identification,json=driverIdentification,proto3" json:"driver_identification,omitempty"`
	// The country alpha code of the Member State having issued the card. This fields is formatted according the definition for NationAlpha in COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
	CardIssuingMemberState string `protobuf:"bytes,272493884,opt,name=card_issuing_member_state,json=cardIssuingMemberState,proto3" json:"card_issuing_member_state,omitempty"`
	// Code to distinguish different types of equipment for the tachograph application. See description of the field 'DriverAuthenticationEquipment' in COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
	DriverAuthenticationEquipment string `protobuf:"bytes,185465666,opt,name=driver_authentication_equipment,json=driverAuthenticationEquipment,proto3" json:"driver_authentication_equipment,omitempty"`
	// A card replacement index. This fields is formatted according the definition for CardReplacementIndex (chap 2.26) in: COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
	CardReplacementIndex string `protobuf:"bytes,80526093,opt,name=card_replacement_index,json=cardReplacementIndex,proto3" json:"card_replacement_index,omitempty"`
	// A card renewal index. This fields is formatted according the definition for CardRenewalIndex (chap 2.25) in: COMMISSION REGULATION (EC) No 1360/2002 Annex 1b
	CardRenewalIndex string `protobuf:"bytes,288920997,opt,name=card_renewal_index,json=cardRenewalIndex,proto3" json:"card_renewal_index,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DriverIdTachoDriverIdentification) Reset() {
	*x = DriverIdTachoDriverIdentification{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverIdTachoDriverIdentification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverIdTachoDriverIdentification) ProtoMessage() {}

func (x *DriverIdTachoDriverIdentification) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverIdTachoDriverIdentification.ProtoReflect.Descriptor instead.
func (*DriverIdTachoDriverIdentification) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{4}
}

func (x *DriverIdTachoDriverIdentification) GetDriverIdentification() string {
	if x != nil {
		return x.DriverIdentification
	}
	return ""
}

func (x *DriverIdTachoDriverIdentification) GetCardIssuingMemberState() string {
	if x != nil {
		return x.CardIssuingMemberState
	}
	return ""
}

func (x *DriverIdTachoDriverIdentification) GetDriverAuthenticationEquipment() string {
	if x != nil {
		return x.DriverAuthenticationEquipment
	}
	return ""
}

func (x *DriverIdTachoDriverIdentification) GetCardReplacementIndex() string {
	if x != nil {
		return x.CardReplacementIndex
	}
	return ""
}

func (x *DriverIdTachoDriverIdentification) GetCardRenewalIndex() string {
	if x != nil {
		return x.CardRenewalIndex
	}
	return ""
}

type DriverWorkingStateProperty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DriverWorkingStateProperty) Reset() {
	*x = DriverWorkingStateProperty{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DriverWorkingStateProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DriverWorkingStateProperty) ProtoMessage() {}

func (x *DriverWorkingStateProperty) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DriverWorkingStateProperty.ProtoReflect.Descriptor instead.
func (*DriverWorkingStateProperty) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{5}
}

type Error struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// An identifier for this error
	Error string `protobuf:"bytes,96784904,opt,name=error,proto3" json:"error,omitempty"`
	// A description of the error
	ErrorDescription string `protobuf:"bytes,481040315,opt,name=error_description,json=errorDescription,proto3" json:"error_description,omitempty"`
	// A URI providing more information
	ErrorUri      string `protobuf:"bytes,329876149,opt,name=error_uri,json=errorUri,proto3" json:"error_uri,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Error) Reset() {
	*x = Error{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{6}
}

func (x *Error) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *Error) GetErrorDescription() string {
	if x != nil {
		return x.ErrorDescription
	}
	return ""
}

func (x *Error) GetErrorUri() string {
	if x != nil {
		return x.ErrorUri
	}
	return ""
}

type FromToClass struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          float64                `protobuf:"fixed64,3151786,opt,name=from,proto3" json:"from,omitempty"`
	To            float64                `protobuf:"fixed64,3707,opt,name=to,proto3" json:"to,omitempty"`
	Seconds       int64                  `protobuf:"varint,359484034,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Meters        int64                  `protobuf:"varint,3815928,opt,name=meters,proto3" json:"meters,omitempty"`
	MilliLitres   int64                  `protobuf:"varint,278911141,opt,name=milli_litres,json=milliLitres,proto3" json:"milli_litres,omitempty"`
	Kilograms     int64                  `protobuf:"varint,396264903,opt,name=kilograms,proto3" json:"kilograms,omitempty"`
	Watthours     int64                  `protobuf:"varint,206856837,opt,name=watthours,proto3" json:"watthours,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FromToClass) Reset() {
	*x = FromToClass{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromToClass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromToClass) ProtoMessage() {}

func (x *FromToClass) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromToClass.ProtoReflect.Descriptor instead.
func (*FromToClass) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{7}
}

func (x *FromToClass) GetFrom() float64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *FromToClass) GetTo() float64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *FromToClass) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *FromToClass) GetMeters() int64 {
	if x != nil {
		return x.Meters
	}
	return 0
}

func (x *FromToClass) GetMilliLitres() int64 {
	if x != nil {
		return x.MilliLitres
	}
	return 0
}

func (x *FromToClass) GetKilograms() int64 {
	if x != nil {
		return x.Kilograms
	}
	return 0
}

func (x *FromToClass) GetWatthours() int64 {
	if x != nil {
		return x.Watthours
	}
	return 0
}

type FromToClassCombustion struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          float64                `protobuf:"fixed64,3151786,opt,name=from,proto3" json:"from,omitempty"`
	To            float64                `protobuf:"fixed64,3707,opt,name=to,proto3" json:"to,omitempty"`
	Seconds       int64                  `protobuf:"varint,359484034,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Meters        int64                  `protobuf:"varint,3815928,opt,name=meters,proto3" json:"meters,omitempty"`
	MilliLitres   int64                  `protobuf:"varint,278911141,opt,name=milli_litres,json=milliLitres,proto3" json:"milli_litres,omitempty"`
	Kilograms     int64                  `protobuf:"varint,396264903,opt,name=kilograms,proto3" json:"kilograms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FromToClassCombustion) Reset() {
	*x = FromToClassCombustion{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromToClassCombustion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromToClassCombustion) ProtoMessage() {}

func (x *FromToClassCombustion) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromToClassCombustion.ProtoReflect.Descriptor instead.
func (*FromToClassCombustion) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{8}
}

func (x *FromToClassCombustion) GetFrom() float64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *FromToClassCombustion) GetTo() float64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *FromToClassCombustion) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *FromToClassCombustion) GetMeters() int64 {
	if x != nil {
		return x.Meters
	}
	return 0
}

func (x *FromToClassCombustion) GetMilliLitres() int64 {
	if x != nil {
		return x.MilliLitres
	}
	return 0
}

func (x *FromToClassCombustion) GetKilograms() int64 {
	if x != nil {
		return x.Kilograms
	}
	return 0
}

type FromToClassElectrical struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	From          float64                `protobuf:"fixed64,3151786,opt,name=from,proto3" json:"from,omitempty"`
	To            float64                `protobuf:"fixed64,3707,opt,name=to,proto3" json:"to,omitempty"`
	Seconds       int64                  `protobuf:"varint,359484034,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Meters        int64                  `protobuf:"varint,3815928,opt,name=meters,proto3" json:"meters,omitempty"`
	Watthours     int64                  `protobuf:"varint,206856837,opt,name=watthours,proto3" json:"watthours,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FromToClassElectrical) Reset() {
	*x = FromToClassElectrical{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FromToClassElectrical) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FromToClassElectrical) ProtoMessage() {}

func (x *FromToClassElectrical) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FromToClassElectrical.ProtoReflect.Descriptor instead.
func (*FromToClassElectrical) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{9}
}

func (x *FromToClassElectrical) GetFrom() float64 {
	if x != nil {
		return x.From
	}
	return 0
}

func (x *FromToClassElectrical) GetTo() float64 {
	if x != nil {
		return x.To
	}
	return 0
}

func (x *FromToClassElectrical) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *FromToClassElectrical) GetMeters() int64 {
	if x != nil {
		return x.Meters
	}
	return 0
}

func (x *FromToClassElectrical) GetWatthours() int64 {
	if x != nil {
		return x.Watthours
	}
	return 0
}

type GNSSPosition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Latitude (WGS84 based)
	Latitude float64 `protobuf:"fixed64,366236566,opt,name=latitude,proto3" json:"latitude,omitempty"`
	// Longitude (WGS84 based)
	Longitude float64 `protobuf:"fixed64,137365935,opt,name=longitude,proto3" json:"longitude,omitempty"`
	// The direction of the vehicle (0-359)
	Heading int32 `protobuf:"varint,258440707,opt,name=heading,proto3" json:"heading,omitempty"`
	// The altitude of the vehicle. Where 0 is sea level, negative values below sealevel and positive above sealevel. Unit in meters.
	Altitude int32 `protobuf:"varint,425937573,opt,name=altitude,proto3" json:"altitude,omitempty"`
	// The GNSS(e.g. GPS)-speed in km/h
	Speed float64 `protobuf:"fixed64,109641799,opt,name=speed,proto3" json:"speed,omitempty"`
	// The time of the position data in iso8601 format.
	PositionDateTime string `protobuf:"bytes,502508841,opt,name=position_date_time,json=positionDateTime,proto3" json:"position_date_time,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *GNSSPosition) Reset() {
	*x = GNSSPosition{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GNSSPosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GNSSPosition) ProtoMessage() {}

func (x *GNSSPosition) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GNSSPosition.ProtoReflect.Descriptor instead.
func (*GNSSPosition) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{10}
}

func (x *GNSSPosition) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GNSSPosition) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GNSSPosition) GetHeading() int32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *GNSSPosition) GetAltitude() int32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *GNSSPosition) GetSpeed() float64 {
	if x != nil {
		return x.Speed
	}
	return 0
}

func (x *GNSSPosition) GetPositionDateTime() string {
	if x != nil {
		return x.PositionDateTime
	}
	return ""
}

type Label struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Label         string                 `protobuf:"bytes,102727412,opt,name=label,proto3" json:"label,omitempty"`
	Seconds       int64                  `protobuf:"varint,359484034,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Meters        int64                  `protobuf:"varint,3815928,opt,name=meters,proto3" json:"meters,omitempty"`
	MilliLitres   int64                  `protobuf:"varint,278911141,opt,name=milli_litres,json=milliLitres,proto3" json:"milli_litres,omitempty"`
	Kilograms     int64                  `protobuf:"varint,396264903,opt,name=kilograms,proto3" json:"kilograms,omitempty"`
	Watthours     int64                  `protobuf:"varint,206856837,opt,name=watthours,proto3" json:"watthours,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Label) Reset() {
	*x = Label{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Label) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Label) ProtoMessage() {}

func (x *Label) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Label.ProtoReflect.Descriptor instead.
func (*Label) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{11}
}

func (x *Label) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Label) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Label) GetMeters() int64 {
	if x != nil {
		return x.Meters
	}
	return 0
}

func (x *Label) GetMilliLitres() int64 {
	if x != nil {
		return x.MilliLitres
	}
	return 0
}

func (x *Label) GetKilograms() int64 {
	if x != nil {
		return x.Kilograms
	}
	return 0
}

func (x *Label) GetWatthours() int64 {
	if x != nil {
		return x.Watthours
	}
	return 0
}

type ReceivedDateTimeProperty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReceivedDateTimeProperty) Reset() {
	*x = ReceivedDateTimeProperty{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceivedDateTimeProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceivedDateTimeProperty) ProtoMessage() {}

func (x *ReceivedDateTimeProperty) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceivedDateTimeProperty.ProtoReflect.Descriptor instead.
func (*ReceivedDateTimeProperty) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{12}
}

type SnapshotData struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	GnssPosition *GNSSPosition          `protobuf:"bytes,381588705,opt,name=gnss_position,json=gnssPosition,proto3" json:"gnss_position,omitempty"`
	// The vehicle wheelbased speed
	WheelBasedSpeed float64 `protobuf:"fixed64,452571691,opt,name=wheel_based_speed,json=wheelBasedSpeed,proto3" json:"wheel_based_speed,omitempty"`
	// The Tacho speed
	TachographSpeed float64 `protobuf:"fixed64,228167387,opt,name=tachograph_speed,json=tachographSpeed,proto3" json:"tachograph_speed,omitempty"`
	// The engine (Diesel/gaseous) speed in rev/min
	EngineSpeed float64 `protobuf:"fixed64,120923148,opt,name=engine_speed,json=engineSpeed,proto3" json:"engine_speed,omitempty"`
	// The electric motor speed in rev/min
	ElectricMotorSpeed float64 `protobuf:"fixed64,44040232,opt,name=electric_motor_speed,json=electricMotorSpeed,proto3" json:"electric_motor_speed,omitempty"`
	// Type of fuel currently being utilized by the vehicle acc. SPN 5837
	FuelType string `protobuf:"bytes,163563556,opt,name=fuel_type,json=fuelType,proto3" json:"fuel_type,omitempty"`
	// The fuel level percentage
	FuelLevel1 float64 `protobuf:"fixed64,365922348,opt,name=fuel_level1,json=fuelLevel1,proto3" json:"fuel_level1,omitempty"`
	// Ratio of volume of fuel to the total volume of fuel storage container, in percent. When Fuel Level 2 is not used, Fuel Level 1 represents the total fuel in all fuel storage containers.  When Fuel Level 2 is used, Fuel Level 1 represents the fuel level in the primary or left-side fuel storage container.
	FuelLevel2 float64 `protobuf:"fixed64,365922347,opt,name=fuel_level2,json=fuelLevel2,proto3" json:"fuel_level2,omitempty"`
	// The adblue level percentage
	CatalystFuelLevel float64 `protobuf:"fixed64,473565889,opt,name=catalyst_fuel_level,json=catalystFuelLevel,proto3" json:"catalyst_fuel_level,omitempty"`
	// Tachograph Working state of the driver
	Driver1WorkingState string    `protobuf:"bytes,332178767,opt,name=driver1_working_state,json=driver1WorkingState,proto3" json:"driver1_working_state,omitempty"`
	Driver2Id           *DriverId `protobuf:"bytes,56389745,opt,name=driver2_id,json=driver2Id,proto3" json:"driver2_id,omitempty"`
	// Tachograph Working state of the driver
	Driver2WorkingState string `protobuf:"bytes,307753076,opt,name=driver2_working_state,json=driver2WorkingState,proto3" json:"driver2_working_state,omitempty"`
	// The Ambient air temperature in Celsius
	AmbientAirTemperature float64 `protobuf:"fixed64,382134696,opt,name=ambient_air_temperature,json=ambientAirTemperature,proto3" json:"ambient_air_temperature,omitempty"`
	// Switch signal which indicates when the parking brake is set. In general the switch actuated by the operator's park brake control, whether a pedal, lever or other control mechanism  true - parking brake set  false - parking brake not set
	ParkingBrakeSwitch bool `protobuf:"varint,416551920,opt,name=parking_brake_switch,json=parkingBrakeSwitch,proto3" json:"parking_brake_switch,omitempty"`
	// Indicates the hybrid battery pack remaining charge.  0% means no charge remaining,  100% means full charge remaining.  Is used as well for full electrical vehicles
	HybridBatteryPackRemainingCharge float64 `protobuf:"fixed64,138407632,opt,name=hybrid_battery_pack_remaining_charge,json=hybridBatteryPackRemainingCharge,proto3" json:"hybrid_battery_pack_remaining_charge,omitempty"`
	// Indicates the charging status of the battery pack. Recuperation is excluded.  Not charging - No charging  Charging - Charging ongoing (AC or DC is unknown)  Charging AC - AC charging ongoing  Charging DC - DC charging ongoing  Error - An error occurred when charging  Not available - Charging status is not available
	BatteryPackChargingStatus string `protobuf:"bytes,130287183,opt,name=battery_pack_charging_status,json=batteryPackChargingStatus,proto3" json:"battery_pack_charging_status,omitempty"`
	// Indicates the charging connection status of the battery pack.  Connecting - A charger is being connected  Connected - A charger is connected  Disconnecting - A charger is being disconnected  Disconnected - No charger is connected  Error - An error occurred when connecting or disconnecting  Not available - Charging connection status is not available
	BatteryPackChargingConnectionStatus string `protobuf:"bytes,101407273,opt,name=battery_pack_charging_connection_status,json=batteryPackChargingConnectionStatus,proto3" json:"battery_pack_charging_connection_status,omitempty"`
	// Device used to charge the battery pack. Standard rFMS values taken from ISO 15118 (OEM can have additional values):  ACD - Automatic Connection Device  WPT - Wireless Power Transfer  VEHICLE_COUPLER - manual connection of a flexible cable to an EV  NONE - No device connected  NOT_AVAILABLE - Unknown
	BatteryPackChargingDevice string `protobuf:"bytes,224482482,opt,name=battery_pack_charging_device,json=batteryPackChargingDevice,proto3" json:"battery_pack_charging_device,omitempty"`
	// Charging power in watts.
	BatteryPackChargingPower float64 `protobuf:"fixed64,486219628,opt,name=battery_pack_charging_power,json=batteryPackChargingPower,proto3" json:"battery_pack_charging_power,omitempty"`
	// Estimated time when charging has reached the target level.
	EstimatedTimeBatteryPackChargingCompleted string                                `protobuf:"bytes,286731874,opt,name=estimated_time_battery_pack_charging_completed,json=estimatedTimeBatteryPackChargingCompleted,proto3" json:"estimated_time_battery_pack_charging_completed,omitempty"`
	EstimatedDistanceToEmpty                  *SnapshotDataEstimatedDistanceToEmpty `protobuf:"bytes,192247218,opt,name=estimated_distance_to_empty,json=estimatedDistanceToEmpty,proto3" json:"estimated_distance_to_empty,omitempty"`
	// A list of vehicle axles
	VehicleAxles []*SnapshotDataVehicleAxlesInner `protobuf:"bytes,410646450,rep,name=vehicle_axles,json=vehicleAxles,proto3" json:"vehicle_axles,omitempty"`
	// List of trailers connected to the truck.
	Trailers      []*SnapshotDataTrailersInner `protobuf:"bytes,202314146,rep,name=trailers,proto3" json:"trailers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotData) Reset() {
	*x = SnapshotData{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotData) ProtoMessage() {}

func (x *SnapshotData) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotData.ProtoReflect.Descriptor instead.
func (*SnapshotData) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{13}
}

func (x *SnapshotData) GetGnssPosition() *GNSSPosition {
	if x != nil {
		return x.GnssPosition
	}
	return nil
}

func (x *SnapshotData) GetWheelBasedSpeed() float64 {
	if x != nil {
		return x.WheelBasedSpeed
	}
	return 0
}

func (x *SnapshotData) GetTachographSpeed() float64 {
	if x != nil {
		return x.TachographSpeed
	}
	return 0
}

func (x *SnapshotData) GetEngineSpeed() float64 {
	if x != nil {
		return x.EngineSpeed
	}
	return 0
}

func (x *SnapshotData) GetElectricMotorSpeed() float64 {
	if x != nil {
		return x.ElectricMotorSpeed
	}
	return 0
}

func (x *SnapshotData) GetFuelType() string {
	if x != nil {
		return x.FuelType
	}
	return ""
}

func (x *SnapshotData) GetFuelLevel1() float64 {
	if x != nil {
		return x.FuelLevel1
	}
	return 0
}

func (x *SnapshotData) GetFuelLevel2() float64 {
	if x != nil {
		return x.FuelLevel2
	}
	return 0
}

func (x *SnapshotData) GetCatalystFuelLevel() float64 {
	if x != nil {
		return x.CatalystFuelLevel
	}
	return 0
}

func (x *SnapshotData) GetDriver1WorkingState() string {
	if x != nil {
		return x.Driver1WorkingState
	}
	return ""
}

func (x *SnapshotData) GetDriver2Id() *DriverId {
	if x != nil {
		return x.Driver2Id
	}
	return nil
}

func (x *SnapshotData) GetDriver2WorkingState() string {
	if x != nil {
		return x.Driver2WorkingState
	}
	return ""
}

func (x *SnapshotData) GetAmbientAirTemperature() float64 {
	if x != nil {
		return x.AmbientAirTemperature
	}
	return 0
}

func (x *SnapshotData) GetParkingBrakeSwitch() bool {
	if x != nil {
		return x.ParkingBrakeSwitch
	}
	return false
}

func (x *SnapshotData) GetHybridBatteryPackRemainingCharge() float64 {
	if x != nil {
		return x.HybridBatteryPackRemainingCharge
	}
	return 0
}

func (x *SnapshotData) GetBatteryPackChargingStatus() string {
	if x != nil {
		return x.BatteryPackChargingStatus
	}
	return ""
}

func (x *SnapshotData) GetBatteryPackChargingConnectionStatus() string {
	if x != nil {
		return x.BatteryPackChargingConnectionStatus
	}
	return ""
}

func (x *SnapshotData) GetBatteryPackChargingDevice() string {
	if x != nil {
		return x.BatteryPackChargingDevice
	}
	return ""
}

func (x *SnapshotData) GetBatteryPackChargingPower() float64 {
	if x != nil {
		return x.BatteryPackChargingPower
	}
	return 0
}

func (x *SnapshotData) GetEstimatedTimeBatteryPackChargingCompleted() string {
	if x != nil {
		return x.EstimatedTimeBatteryPackChargingCompleted
	}
	return ""
}

func (x *SnapshotData) GetEstimatedDistanceToEmpty() *SnapshotDataEstimatedDistanceToEmpty {
	if x != nil {
		return x.EstimatedDistanceToEmpty
	}
	return nil
}

func (x *SnapshotData) GetVehicleAxles() []*SnapshotDataVehicleAxlesInner {
	if x != nil {
		return x.VehicleAxles
	}
	return nil
}

func (x *SnapshotData) GetTrailers() []*SnapshotDataTrailersInner {
	if x != nil {
		return x.Trailers
	}
	return nil
}

type SnapshotDataEstimatedDistanceToEmpty struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Estimated distance to empty, summarizing fuel, gas and battery in meters
	Total int64 `protobuf:"varint,110549828,opt,name=total,proto3" json:"total,omitempty"`
	// Estimated distance to empty, fuel tank, in meters
	Fuel int64 `protobuf:"varint,3154358,opt,name=fuel,proto3" json:"fuel,omitempty"`
	// Estimated distance to empty, gas tank, in meters
	Gas int64 `protobuf:"varint,102105,opt,name=gas,proto3" json:"gas,omitempty"`
	// Estimated distance to empty, battery pack, in meters
	BatteryPack   int64 `protobuf:"varint,80139000,opt,name=battery_pack,json=batteryPack,proto3" json:"battery_pack,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotDataEstimatedDistanceToEmpty) Reset() {
	*x = SnapshotDataEstimatedDistanceToEmpty{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotDataEstimatedDistanceToEmpty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotDataEstimatedDistanceToEmpty) ProtoMessage() {}

func (x *SnapshotDataEstimatedDistanceToEmpty) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotDataEstimatedDistanceToEmpty.ProtoReflect.Descriptor instead.
func (*SnapshotDataEstimatedDistanceToEmpty) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{14}
}

func (x *SnapshotDataEstimatedDistanceToEmpty) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SnapshotDataEstimatedDistanceToEmpty) GetFuel() int64 {
	if x != nil {
		return x.Fuel
	}
	return 0
}

func (x *SnapshotDataEstimatedDistanceToEmpty) GetGas() int64 {
	if x != nil {
		return x.Gas
	}
	return 0
}

func (x *SnapshotDataEstimatedDistanceToEmpty) GetBatteryPack() int64 {
	if x != nil {
		return x.BatteryPack
	}
	return 0
}

type SnapshotDataTrailersInner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Trailer number from 1 to 5, 1 being closest to the truck, according to ISO 11992-2.
	TrailerNo int32 `protobuf:"varint,460264374,opt,name=trailer_no,json=trailerNo,proto3" json:"trailer_no,omitempty"`
	// The identification data sent by the trailer to the truck in the RGE23 message of ISO 11992-2. An alternative source is the DID (Data identifier definition) record VIN, as specified in ISO 11992-4. Even though both ISO 11992-2 and ISO 11992-4 specifies this as a VIN, the actual data sent from a trailer is not always the true VIN of the trailer.
	TrailerIdentificationData string `protobuf:"bytes,501827024,opt,name=trailer_identification_data,json=trailerIdentificationData,proto3" json:"trailer_identification_data,omitempty"`
	// The vehicle identification number of the trailer. See ISO 3779 (17 characters) If the trailerIdentificationData is reporting a true VIN, trailerVin will have the same value. If it is possible to map the trailerIdentificationData to a true VIN using other sources, the value can be provided here.
	TrailerVin string `protobuf:"bytes,227326735,opt,name=trailer_vin,json=trailerVin,proto3" json:"trailer_vin,omitempty"`
	// The customer's name for the trailer
	CustomerTrailerName string `protobuf:"bytes,92276955,opt,name=customer_trailer_name,json=customerTrailerName,proto3" json:"customer_trailer_name,omitempty"`
	// Indicates the type of the trailer. The type is sent in the EBS24 message of  ISO 11992-2.
	TrailerType string `protobuf:"bytes,469108028,opt,name=trailer_type,json=trailerType,proto3" json:"trailer_type,omitempty"`
	// The sum of the static vertical loads of the trailer axles in kilograms. The load is sent in the EBS22 message of ISO 11992-2.
	TrailerAxleLoadSum int32 `protobuf:"varint,473245483,opt,name=trailer_axle_load_sum,json=trailerAxleLoadSum,proto3" json:"trailer_axle_load_sum,omitempty"`
	// A list of trailer axles
	TrailerAxles  []*SnapshotDataTrailersInnerTrailerAxlesInner `protobuf:"bytes,64414602,rep,name=trailer_axles,json=trailerAxles,proto3" json:"trailer_axles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SnapshotDataTrailersInner) Reset() {
	*x = SnapshotDataTrailersInner{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotDataTrailersInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotDataTrailersInner) ProtoMessage() {}

func (x *SnapshotDataTrailersInner) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotDataTrailersInner.ProtoReflect.Descriptor instead.
func (*SnapshotDataTrailersInner) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{15}
}

func (x *SnapshotDataTrailersInner) GetTrailerNo() int32 {
	if x != nil {
		return x.TrailerNo
	}
	return 0
}

func (x *SnapshotDataTrailersInner) GetTrailerIdentificationData() string {
	if x != nil {
		return x.TrailerIdentificationData
	}
	return ""
}

func (x *SnapshotDataTrailersInner) GetTrailerVin() string {
	if x != nil {
		return x.TrailerVin
	}
	return ""
}

func (x *SnapshotDataTrailersInner) GetCustomerTrailerName() string {
	if x != nil {
		return x.CustomerTrailerName
	}
	return ""
}

func (x *SnapshotDataTrailersInner) GetTrailerType() string {
	if x != nil {
		return x.TrailerType
	}
	return ""
}

func (x *SnapshotDataTrailersInner) GetTrailerAxleLoadSum() int32 {
	if x != nil {
		return x.TrailerAxleLoadSum
	}
	return 0
}

func (x *SnapshotDataTrailersInner) GetTrailerAxles() []*SnapshotDataTrailersInnerTrailerAxlesInner {
	if x != nil {
		return x.TrailerAxles
	}
	return nil
}

type SnapshotDataTrailersInnerTrailerAxlesInner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Axle position from 1 to 15, 1 being in the front closest to the truck, according to ISO 11992-2.
	TrailerAxlePosition int32 `protobuf:"varint,497638774,opt,name=trailer_axle_position,json=trailerAxlePosition,proto3" json:"trailer_axle_position,omitempty"`
	// The static vertical load of a trailer axle in kilograms. The load is sent in the RGE22 message of ISO11992-2.
	TrailerAxleLoad float32 `protobuf:"fixed32,266401738,opt,name=trailer_axle_load,json=trailerAxleLoad,proto3" json:"trailer_axle_load,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SnapshotDataTrailersInnerTrailerAxlesInner) Reset() {
	*x = SnapshotDataTrailersInnerTrailerAxlesInner{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotDataTrailersInnerTrailerAxlesInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotDataTrailersInnerTrailerAxlesInner) ProtoMessage() {}

func (x *SnapshotDataTrailersInnerTrailerAxlesInner) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotDataTrailersInnerTrailerAxlesInner.ProtoReflect.Descriptor instead.
func (*SnapshotDataTrailersInnerTrailerAxlesInner) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{16}
}

func (x *SnapshotDataTrailersInnerTrailerAxlesInner) GetTrailerAxlePosition() int32 {
	if x != nil {
		return x.TrailerAxlePosition
	}
	return 0
}

func (x *SnapshotDataTrailersInnerTrailerAxlesInner) GetTrailerAxleLoad() float32 {
	if x != nil {
		return x.TrailerAxleLoad
	}
	return 0
}

type SnapshotDataVehicleAxlesInner struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Axle position from 1 to 15, 1 being in the front of the truck
	VehicleAxlePosition int32 `protobuf:"varint,483996871,opt,name=vehicle_axle_position,json=vehicleAxlePosition,proto3" json:"vehicle_axle_position,omitempty"`
	// The static vertical load of a vehicle axle in kilograms.
	VehicleAxleLoad float32 `protobuf:"fixed32,359632514,opt,name=vehicle_axle_load,json=vehicleAxleLoad,proto3" json:"vehicle_axle_load,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SnapshotDataVehicleAxlesInner) Reset() {
	*x = SnapshotDataVehicleAxlesInner{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SnapshotDataVehicleAxlesInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SnapshotDataVehicleAxlesInner) ProtoMessage() {}

func (x *SnapshotDataVehicleAxlesInner) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SnapshotDataVehicleAxlesInner.ProtoReflect.Descriptor instead.
func (*SnapshotDataVehicleAxlesInner) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{17}
}

func (x *SnapshotDataVehicleAxlesInner) GetVehicleAxlePosition() int32 {
	if x != nil {
		return x.VehicleAxlePosition
	}
	return 0
}

func (x *SnapshotDataVehicleAxlesInner) GetVehicleAxleLoad() float32 {
	if x != nil {
		return x.VehicleAxleLoad
	}
	return 0
}

type TellTaleInfo struct {
	state    protoimpl.MessageState `protogen:"open.v1"`
	TellTale string                 `protobuf:"bytes,431378549,opt,name=tell_tale,json=tellTale,proto3" json:"tell_tale,omitempty"`
	// The OemTellTale is only set when the TellTale == OEM_SPECIFIC_TELL_TALE. This is an OEM specific string defining a tell tale in the OEM context.
	OemTellTale string `protobuf:"bytes,96634998,opt,name=oem_tell_tale,json=oemTellTale,proto3" json:"oem_tell_tale,omitempty"`
	// The current state of the tell tale.
	State         string `protobuf:"bytes,109757585,opt,name=state,proto3" json:"state,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TellTaleInfo) Reset() {
	*x = TellTaleInfo{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TellTaleInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TellTaleInfo) ProtoMessage() {}

func (x *TellTaleInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TellTaleInfo.ProtoReflect.Descriptor instead.
func (*TellTaleInfo) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{18}
}

func (x *TellTaleInfo) GetTellTale() string {
	if x != nil {
		return x.TellTale
	}
	return ""
}

func (x *TellTaleInfo) GetOemTellTale() string {
	if x != nil {
		return x.OemTellTale
	}
	return ""
}

func (x *TellTaleInfo) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

type Trigger struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Trigger types for Context=RFMS:  TIMER - Data was sent due to a timer trigger. (Timer value set outside rFMS scope)  IGNITION_ON - Data was sent due to an ignition on  IGNITION_OFF - Data was sent due to an ignition off  PTO_ENABLED - Data was sent due to that a PTO was enabled, will be sent for each PTO that gets enabled  PTO_DISABLED - Data was sent due to that a PTO was disabled, will be sent for each PTO that gets disabled.  DRIVER_LOGIN - Data was sent due to a successful driver login.  DRIVER_LOGOUT - Data was sent due to a driver logout  TELL_TALE - Data was sent due to that at least one tell tale changed state  ENGINE_ON - Data was sent due to an engine on. For electric motor crank is on  ENGINE_OFF - Data was sent due to an engine off. For electric motor crank is off  DRIVER_1_WORKING_STATE_CHANGED - Data was sent due to that driver 1 changed working state  DRIVER_2_WORKING_STATE_CHANGED - Data was sent due to that driver 2 changed working state  DISTANCE_TRAVELLED - Data was sent due to that a set distance was travelled. (Distance set outside rFMS scope)  FUEL_TYPE_CHANGE - Data was sent due to that the type of fuel currently being utilized by the vehicle changed  PARKING_BRAKE_SWITCH_CHANGE - Data was sent due to that the parking brake state has changed  BATTERY_PACK_CHARGING_STATUS_CHANGE - Data was sent due to a change in the battery pack charging status.  BATTERY_PACK_CHARGING_CONNECTION_STATUS_CHANGE - Data was sent due to a change in the battery pack charging connection status.  TRAILER_CONNECTED - One or several trailers were connected  TRAILER_DISCONNECTED - One or several trailers were disconnected
	TriggerType string `protobuf:"bytes,375833953,opt,name=trigger_type,json=triggerType,proto3" json:"trigger_type,omitempty"`
	// The context defines if this is part of the standard or OEM specific. rFMS standard values VOLVO TRUCKS, SCANIA, DAIMLER, IVECO, DAF, MAN, RENAULT TRUCKS, VDL, VOLVO BUSES, IVECO BUS, IRISBUS If the Trigger is defined in the rFMS standard, the Context = RFMS
	Context string `protobuf:"bytes,414660016,opt,name=context,proto3" json:"context,omitempty"`
	// Additional TriggerInfo content for OEM specific triggers E.g. TRAILER_ATTACHED_TRIGGER [id of trailer]
	TriggerInfo []string  `protobuf:"bytes,375495381,rep,name=trigger_info,json=triggerInfo,proto3" json:"trigger_info,omitempty"`
	DriverId    *DriverId `protobuf:"bytes,292550512,opt,name=driver_id,json=driverId,proto3" json:"driver_id,omitempty"`
	// The id of a PTO. This is only set if the TriggerType = PTO_ENABLED or PTO_DISABLED
	PtoId                        string                               `protobuf:"bytes,441101586,opt,name=pto_id,json=ptoId,proto3" json:"pto_id,omitempty"`
	TellTaleInfo                 *TellTaleInfo                        `protobuf:"bytes,149293673,opt,name=tell_tale_info,json=tellTaleInfo,proto3" json:"tell_tale_info,omitempty"`
	ChargingStatusInfo           *TriggerChargingStatusInfo           `protobuf:"bytes,298511348,opt,name=charging_status_info,json=chargingStatusInfo,proto3" json:"charging_status_info,omitempty"`
	ChargingConnectionStatusInfo *TriggerChargingConnectionStatusInfo `protobuf:"bytes,275792520,opt,name=charging_connection_status_info,json=chargingConnectionStatusInfo,proto3" json:"charging_connection_status_info,omitempty"`
	unknownFields                protoimpl.UnknownFields
	sizeCache                    protoimpl.SizeCache
}

func (x *Trigger) Reset() {
	*x = Trigger{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Trigger) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trigger) ProtoMessage() {}

func (x *Trigger) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trigger.ProtoReflect.Descriptor instead.
func (*Trigger) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{19}
}

func (x *Trigger) GetTriggerType() string {
	if x != nil {
		return x.TriggerType
	}
	return ""
}

func (x *Trigger) GetContext() string {
	if x != nil {
		return x.Context
	}
	return ""
}

func (x *Trigger) GetTriggerInfo() []string {
	if x != nil {
		return x.TriggerInfo
	}
	return nil
}

func (x *Trigger) GetDriverId() *DriverId {
	if x != nil {
		return x.DriverId
	}
	return nil
}

func (x *Trigger) GetPtoId() string {
	if x != nil {
		return x.PtoId
	}
	return ""
}

func (x *Trigger) GetTellTaleInfo() *TellTaleInfo {
	if x != nil {
		return x.TellTaleInfo
	}
	return nil
}

func (x *Trigger) GetChargingStatusInfo() *TriggerChargingStatusInfo {
	if x != nil {
		return x.ChargingStatusInfo
	}
	return nil
}

func (x *Trigger) GetChargingConnectionStatusInfo() *TriggerChargingConnectionStatusInfo {
	if x != nil {
		return x.ChargingConnectionStatusInfo
	}
	return nil
}

type TriggerChargingConnectionStatusInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CONNECTING - Vehicle is being connected to a charger  CONNECTED - Vehicle is connected to a charger  DISCONNECTING - Vehicle is being disconnected from the charger  DISCONNECTED - Vehicle is not connected to a charger  ERROR - An error occurred
	Event string `protobuf:"bytes,96891546,opt,name=event,proto3" json:"event,omitempty"`
	// Details regarding the event. Content is OEM specific
	EventDetail   string `protobuf:"bytes,79978903,opt,name=event_detail,json=eventDetail,proto3" json:"event_detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerChargingConnectionStatusInfo) Reset() {
	*x = TriggerChargingConnectionStatusInfo{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerChargingConnectionStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerChargingConnectionStatusInfo) ProtoMessage() {}

func (x *TriggerChargingConnectionStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerChargingConnectionStatusInfo.ProtoReflect.Descriptor instead.
func (*TriggerChargingConnectionStatusInfo) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{20}
}

func (x *TriggerChargingConnectionStatusInfo) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *TriggerChargingConnectionStatusInfo) GetEventDetail() string {
	if x != nil {
		return x.EventDetail
	}
	return ""
}

type TriggerChargingStatusInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CHARGING_STARTED - Charging has started  CHARGING_COMPLETED - Charging is completed  CHARGING_INTERRUPTED - Charging has been interrupted (no error)  ERROR - An error occurred when charging  ESTIMATED_COMPLETION_TIME_CHANGED - The estimated time for completed charging has changed. (Threshold is outside scope of rFMS)  TIMER - A predefined time has passed since last charge status update. (Frequency is outside the scope of rFMS)  CHARGING_LEVEL - The charging level has reached a predefined level. (Charging levels are outside the scope of rFMS)
	Event string `protobuf:"bytes,96891546,opt,name=event,proto3" json:"event,omitempty"`
	// Details regarding the event. Content is OEM specific
	EventDetail   string `protobuf:"bytes,79978903,opt,name=event_detail,json=eventDetail,proto3" json:"event_detail,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TriggerChargingStatusInfo) Reset() {
	*x = TriggerChargingStatusInfo{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TriggerChargingStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerChargingStatusInfo) ProtoMessage() {}

func (x *TriggerChargingStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerChargingStatusInfo.ProtoReflect.Descriptor instead.
func (*TriggerChargingStatusInfo) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{21}
}

func (x *TriggerChargingStatusInfo) GetEvent() string {
	if x != nil {
		return x.Event
	}
	return ""
}

func (x *TriggerChargingStatusInfo) GetEventDetail() string {
	if x != nil {
		return x.EventDetail
	}
	return ""
}

type UptimeData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of tell tales with the actual status for each tell tale.
	TellTaleInfo []*TellTaleInfo `protobuf:"bytes,149293673,rep,name=tell_tale_info,json=tellTaleInfo,proto3" json:"tell_tale_info,omitempty"`
	// The distance in meter to the next service
	ServiceDistance int64 `protobuf:"varint,518081988,opt,name=service_distance,json=serviceDistance,proto3" json:"service_distance,omitempty"`
	// The temperature of the coolant liquid in Celsius
	EngineCoolantTemperature float64 `protobuf:"fixed64,395477814,opt,name=engine_coolant_temperature,json=engineCoolantTemperature,proto3" json:"engine_coolant_temperature,omitempty"`
	// The temperature of the battery pack coolant in Celsius HVESS - High Voltage Energy Storage System
	HvessOutletCoolantTemperature float64 `protobuf:"fixed64,248323833,opt,name=hvess_outlet_coolant_temperature,json=hvessOutletCoolantTemperature,proto3" json:"hvess_outlet_coolant_temperature,omitempty"`
	// The temperature of the battery pack in Celsius HVESS - High Voltage Energy Storage System
	HvessTemperature float64 `protobuf:"fixed64,77200662,opt,name=hvess_temperature,json=hvessTemperature,proto3" json:"hvess_temperature,omitempty"`
	// The air pressure in circuit 1 in Pascal.
	ServiceBrakeAirPressureCircuit1 int64 `protobuf:"varint,62204465,opt,name=service_brake_air_pressure_circuit1,json=serviceBrakeAirPressureCircuit1,proto3" json:"service_brake_air_pressure_circuit1,omitempty"`
	// The air pressure in circuit 2 in Pascal.
	ServiceBrakeAirPressureCircuit2 int64 `protobuf:"varint,62204464,opt,name=service_brake_air_pressure_circuit2,json=serviceBrakeAirPressureCircuit2,proto3" json:"service_brake_air_pressure_circuit2,omitempty"`
	// The total time at least one door has been opened in the bus. (seconds) Used mainly for buses.
	DurationAtLeastOneDoorOpen int64                     `protobuf:"varint,157514572,opt,name=duration_at_least_one_door_open,json=durationAtLeastOneDoorOpen,proto3" json:"duration_at_least_one_door_open,omitempty"`
	AlternatorInfo             *UptimeDataAlternatorInfo `protobuf:"bytes,280075811,opt,name=alternator_info,json=alternatorInfo,proto3" json:"alternator_info,omitempty"`
	// The bellow pressure in the front axle left side in Pascal. Used mainly for buses.
	BellowPressureFrontAxleLeft int64 `protobuf:"varint,264142332,opt,name=bellow_pressure_front_axle_left,json=bellowPressureFrontAxleLeft,proto3" json:"bellow_pressure_front_axle_left,omitempty"`
	// The bellow pressure in the front axle right side in Pascal. Used mainly for buses.
	BellowPressureFrontAxleRight int64 `protobuf:"varint,395861369,opt,name=bellow_pressure_front_axle_right,json=bellowPressureFrontAxleRight,proto3" json:"bellow_pressure_front_axle_right,omitempty"`
	// The bellow pressure in the rear axle left side in Pascal. Used mainly for buses.
	BellowPressureRearAxleLeft int64 `protobuf:"varint,161793348,opt,name=bellow_pressure_rear_axle_left,json=bellowPressureRearAxleLeft,proto3" json:"bellow_pressure_rear_axle_left,omitempty"`
	// The bellow pressure in the rear axle right side in Pascal. Used mainly for buses.
	BellowPressureRearAxleRight int64 `protobuf:"varint,347454431,opt,name=bellow_pressure_rear_axle_right,json=bellowPressureRearAxleRight,proto3" json:"bellow_pressure_rear_axle_right,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *UptimeData) Reset() {
	*x = UptimeData{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UptimeData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeData) ProtoMessage() {}

func (x *UptimeData) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeData.ProtoReflect.Descriptor instead.
func (*UptimeData) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{22}
}

func (x *UptimeData) GetTellTaleInfo() []*TellTaleInfo {
	if x != nil {
		return x.TellTaleInfo
	}
	return nil
}

func (x *UptimeData) GetServiceDistance() int64 {
	if x != nil {
		return x.ServiceDistance
	}
	return 0
}

func (x *UptimeData) GetEngineCoolantTemperature() float64 {
	if x != nil {
		return x.EngineCoolantTemperature
	}
	return 0
}

func (x *UptimeData) GetHvessOutletCoolantTemperature() float64 {
	if x != nil {
		return x.HvessOutletCoolantTemperature
	}
	return 0
}

func (x *UptimeData) GetHvessTemperature() float64 {
	if x != nil {
		return x.HvessTemperature
	}
	return 0
}

func (x *UptimeData) GetServiceBrakeAirPressureCircuit1() int64 {
	if x != nil {
		return x.ServiceBrakeAirPressureCircuit1
	}
	return 0
}

func (x *UptimeData) GetServiceBrakeAirPressureCircuit2() int64 {
	if x != nil {
		return x.ServiceBrakeAirPressureCircuit2
	}
	return 0
}

func (x *UptimeData) GetDurationAtLeastOneDoorOpen() int64 {
	if x != nil {
		return x.DurationAtLeastOneDoorOpen
	}
	return 0
}

func (x *UptimeData) GetAlternatorInfo() *UptimeDataAlternatorInfo {
	if x != nil {
		return x.AlternatorInfo
	}
	return nil
}

func (x *UptimeData) GetBellowPressureFrontAxleLeft() int64 {
	if x != nil {
		return x.BellowPressureFrontAxleLeft
	}
	return 0
}

func (x *UptimeData) GetBellowPressureFrontAxleRight() int64 {
	if x != nil {
		return x.BellowPressureFrontAxleRight
	}
	return 0
}

func (x *UptimeData) GetBellowPressureRearAxleLeft() int64 {
	if x != nil {
		return x.BellowPressureRearAxleLeft
	}
	return 0
}

func (x *UptimeData) GetBellowPressureRearAxleRight() int64 {
	if x != nil {
		return x.BellowPressureRearAxleRight
	}
	return 0
}

type UptimeDataAlternatorInfo struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	AlternatorStatus string                 `protobuf:"bytes,111166692,opt,name=alternator_status,json=alternatorStatus,proto3" json:"alternator_status,omitempty"`
	AlternatorNumber int64                  `protobuf:"varint,506155066,opt,name=alternator_number,json=alternatorNumber,proto3" json:"alternator_number,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UptimeDataAlternatorInfo) Reset() {
	*x = UptimeDataAlternatorInfo{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UptimeDataAlternatorInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UptimeDataAlternatorInfo) ProtoMessage() {}

func (x *UptimeDataAlternatorInfo) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UptimeDataAlternatorInfo.ProtoReflect.Descriptor instead.
func (*UptimeDataAlternatorInfo) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{23}
}

func (x *UptimeDataAlternatorInfo) GetAlternatorStatus() string {
	if x != nil {
		return x.AlternatorStatus
	}
	return ""
}

func (x *UptimeDataAlternatorInfo) GetAlternatorNumber() int64 {
	if x != nil {
		return x.AlternatorNumber
	}
	return 0
}

type Vehicle struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// vehicle identification number. See ISO 3779 (17 characters)
	Vin string `protobuf:"bytes,116763,opt,name=vin,proto3" json:"vin,omitempty"`
	// The customer's name for the vehicle.
	CustomerVehicleName string `protobuf:"bytes,142238337,opt,name=customer_vehicle_name,json=customerVehicleName,proto3" json:"customer_vehicle_name,omitempty"`
	// The vehicle brand. rFMS standard values VOLVO TRUCKS, SCANIA, DAIMLER, IVECO, DAF, MAN, RENAULT TRUCKS, VDL, VOLVO BUSES, IVECO BUS, IRISBUS
	Brand          string                 `protobuf:"bytes,93997959,opt,name=brand,proto3" json:"brand,omitempty"`
	ProductionDate *VehicleProductionDate `protobuf:"bytes,288572278,opt,name=production_date,json=productionDate,proto3" json:"production_date,omitempty"`
	// Indicates the type of vehicle. rFMS standard values TRUCK, BUS, VAN
	Type string `protobuf:"bytes,3575610,opt,name=type,proto3" json:"type,omitempty"`
	// Indicates the model of the vehicle. OEM specific value.
	Model string `protobuf:"bytes,104069929,opt,name=model,proto3" json:"model,omitempty"`
	// The possible fuel types supported by this vehicle, formatted as the HEX id number according to SPN 5837. This does NOT indicate which fuel type that is presently being used.
	PossibleFuelType []string `protobuf:"bytes,199152344,rep,name=possible_fuel_type,json=possibleFuelType,proto3" json:"possible_fuel_type,omitempty"`
	// The emission level this vehicle supports. Possible values:  European Union, Heavy-Duty Truck and Bus Engines:  EURO_III, EURO_III_EEV, EURO_IV, EURO_V, EURO_VI  European Union, Nonroad Engines:  EURO_STAGE_III, EURO_STAGE_IV, EURO_STAGE_V  United_States, Heavy-Duty Truck and Bus Engines:  EPA_2004, EPA_2007, EPA_2010, EPA_2015_NOX10, EPA_2015_NOX05, EPA_2015_NOX02  United_States, Nonroad Engines:  EPA_TIER_2, EPA_TIER_3, EPA_TIER_4_2008, EPA_TIER_4_2013  Brazil, Heavy-Duty Truck and Bus Engines:  PROCONVE_P5, PROCONVE_P6, PROCONVE_P7  Brazil, Nonroad Engines:  PROCONVE_MARI
	EmissionLevel string `protobuf:"bytes,272583990,opt,name=emission_level,json=emissionLevel,proto3" json:"emission_level,omitempty"`
	// This parameter indicates how the tell tales shall be interpreted, the code is unique for each OEM. One OEM can have different interpretations  depending on vehicle type.
	TellTaleCode string `protobuf:"bytes,149471530,opt,name=tell_tale_code,json=tellTaleCode,proto3" json:"tell_tale_code,omitempty"`
	// The chassis type of the vehicle. OEM specific value. This is used mainly for buses
	ChassisType string `protobuf:"bytes,412001870,opt,name=chassis_type,json=chassisType,proto3" json:"chassis_type,omitempty"`
	// Number of axles on the vehicle. This is used mainly for buses
	NoOfAxles int32 `protobuf:"varint,242510121,opt,name=no_of_axles,json=noOfAxles,proto3" json:"no_of_axles,omitempty"`
	// Total fuel tank volume for all tanks in milliltres.
	TotalFuelTankVolume int32 `protobuf:"varint,194169507,opt,name=total_fuel_tank_volume,json=totalFuelTankVolume,proto3" json:"total_fuel_tank_volume,omitempty"`
	// Total gas tank capacity for all tanks in kilograms.
	TotalFuelTankCapacityGaseous int32 `protobuf:"varint,14146404,opt,name=total_fuel_tank_capacity_gaseous,json=totalFuelTankCapacityGaseous,proto3" json:"total_fuel_tank_capacity_gaseous,omitempty"`
	// Total battery pack capacity in watt hours.
	TotalBatteryPackCapacity int32 `protobuf:"varint,11983183,opt,name=total_battery_pack_capacity,json=totalBatteryPackCapacity,proto3" json:"total_battery_pack_capacity,omitempty"`
	// The type of tachograph in the vehicle. rFMS standard values MTCO, DTCO, TSU, DTCO_G1, DTCO_G2, NONE  DTCO - Digital tachograph, unknown generation  DTCO_G1 - Digital tachograph generation 1  DTCO_G2 - Digital tachograph generation 2  NONE - No tachograph in the vehicle  MTCO - Modular tachograph  TSU - Tachograph simulator
	TachographType string `protobuf:"bytes,529471897,opt,name=tachograph_type,json=tachographType,proto3" json:"tachograph_type,omitempty"`
	// The type of gearbox the vehicle is equipped with. rFMS standard values MANUAL, AUTOMATIC, SEMI_AUTOMATIC, NO_GEAR (e.g electrical)
	GearboxType string `protobuf:"bytes,213972035,opt,name=gearbox_type,json=gearboxType,proto3" json:"gearbox_type,omitempty"`
	// The type of body on the chassis. rFMS standard values CITY_BUS, INTERCITY_BUS, COACH. This is used mainly for buses.
	BodyType string `protobuf:"bytes,179291065,opt,name=body_type,json=bodyType,proto3" json:"body_type,omitempty"`
	// The door configuration. The door order definition is OEM specific. E.g. [1, 2, 2] means the bus has 3 doors: 1 front door, double doors for door 2 and 3. This is used mainly for buses.
	DoorConfiguration []int32 `protobuf:"varint,115776988,rep,packed,name=door_configuration,json=doorConfiguration,proto3" json:"door_configuration,omitempty"`
	// If the vehicle is equipped with a ramp or not. This is used mainly for buses.
	HasRampOrLift bool `protobuf:"varint,436686275,opt,name=has_ramp_or_lift,json=hasRampOrLift,proto3" json:"has_ramp_or_lift,omitempty"`
	// Paths that the client is authorized to call
	AuthorizedPaths []string `protobuf:"bytes,199517881,rep,name=authorized_paths,json=authorizedPaths,proto3" json:"authorized_paths,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Vehicle) Reset() {
	*x = Vehicle{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vehicle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vehicle) ProtoMessage() {}

func (x *Vehicle) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vehicle.ProtoReflect.Descriptor instead.
func (*Vehicle) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{24}
}

func (x *Vehicle) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *Vehicle) GetCustomerVehicleName() string {
	if x != nil {
		return x.CustomerVehicleName
	}
	return ""
}

func (x *Vehicle) GetBrand() string {
	if x != nil {
		return x.Brand
	}
	return ""
}

func (x *Vehicle) GetProductionDate() *VehicleProductionDate {
	if x != nil {
		return x.ProductionDate
	}
	return nil
}

func (x *Vehicle) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Vehicle) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Vehicle) GetPossibleFuelType() []string {
	if x != nil {
		return x.PossibleFuelType
	}
	return nil
}

func (x *Vehicle) GetEmissionLevel() string {
	if x != nil {
		return x.EmissionLevel
	}
	return ""
}

func (x *Vehicle) GetTellTaleCode() string {
	if x != nil {
		return x.TellTaleCode
	}
	return ""
}

func (x *Vehicle) GetChassisType() string {
	if x != nil {
		return x.ChassisType
	}
	return ""
}

func (x *Vehicle) GetNoOfAxles() int32 {
	if x != nil {
		return x.NoOfAxles
	}
	return 0
}

func (x *Vehicle) GetTotalFuelTankVolume() int32 {
	if x != nil {
		return x.TotalFuelTankVolume
	}
	return 0
}

func (x *Vehicle) GetTotalFuelTankCapacityGaseous() int32 {
	if x != nil {
		return x.TotalFuelTankCapacityGaseous
	}
	return 0
}

func (x *Vehicle) GetTotalBatteryPackCapacity() int32 {
	if x != nil {
		return x.TotalBatteryPackCapacity
	}
	return 0
}

func (x *Vehicle) GetTachographType() string {
	if x != nil {
		return x.TachographType
	}
	return ""
}

func (x *Vehicle) GetGearboxType() string {
	if x != nil {
		return x.GearboxType
	}
	return ""
}

func (x *Vehicle) GetBodyType() string {
	if x != nil {
		return x.BodyType
	}
	return ""
}

func (x *Vehicle) GetDoorConfiguration() []int32 {
	if x != nil {
		return x.DoorConfiguration
	}
	return nil
}

func (x *Vehicle) GetHasRampOrLift() bool {
	if x != nil {
		return x.HasRampOrLift
	}
	return false
}

func (x *Vehicle) GetAuthorizedPaths() []string {
	if x != nil {
		return x.AuthorizedPaths
	}
	return nil
}

type VehiclePosition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// vehicle identification number. See ISO 3779 (17 characters)
	Vin         string   `protobuf:"bytes,116763,opt,name=vin,proto3" json:"vin,omitempty"`
	TriggerType *Trigger `protobuf:"bytes,375833953,opt,name=trigger_type,json=triggerType,proto3" json:"trigger_type,omitempty"`
	// When the data was retrieved in the vehicle in iso8601 format.
	CreatedDateTime string `protobuf:"bytes,344543196,opt,name=created_date_time,json=createdDateTime,proto3" json:"created_date_time,omitempty"`
	// Reception at Server. To be used for handling of \"more data available\" in iso8601 format.
	ReceivedDateTime string        `protobuf:"bytes,170489827,opt,name=received_date_time,json=receivedDateTime,proto3" json:"received_date_time,omitempty"`
	GnssPosition     *GNSSPosition `protobuf:"bytes,381588705,opt,name=gnss_position,json=gnssPosition,proto3" json:"gnss_position,omitempty"`
	// Wheel-Based Vehicle Speed in km/h (Speed of the vehicle as calculated from wheel or tailshaft speed)
	WheelBasedSpeed float64 `protobuf:"fixed64,452571691,opt,name=wheel_based_speed,json=wheelBasedSpeed,proto3" json:"wheel_based_speed,omitempty"`
	// Tachograph vehicle speed in km/h (Speed of the vehicle registered by the tachograph)
	TachographSpeed float64 `protobuf:"fixed64,228167387,opt,name=tachograph_speed,json=tachographSpeed,proto3" json:"tachograph_speed,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VehiclePosition) Reset() {
	*x = VehiclePosition{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehiclePosition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehiclePosition) ProtoMessage() {}

func (x *VehiclePosition) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehiclePosition.ProtoReflect.Descriptor instead.
func (*VehiclePosition) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{25}
}

func (x *VehiclePosition) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *VehiclePosition) GetTriggerType() *Trigger {
	if x != nil {
		return x.TriggerType
	}
	return nil
}

func (x *VehiclePosition) GetCreatedDateTime() string {
	if x != nil {
		return x.CreatedDateTime
	}
	return ""
}

func (x *VehiclePosition) GetReceivedDateTime() string {
	if x != nil {
		return x.ReceivedDateTime
	}
	return ""
}

func (x *VehiclePosition) GetGnssPosition() *GNSSPosition {
	if x != nil {
		return x.GnssPosition
	}
	return nil
}

func (x *VehiclePosition) GetWheelBasedSpeed() float64 {
	if x != nil {
		return x.WheelBasedSpeed
	}
	return 0
}

func (x *VehiclePosition) GetTachographSpeed() float64 {
	if x != nil {
		return x.TachographSpeed
	}
	return 0
}

type VehiclePositionsResponse struct {
	state                   protoimpl.MessageState                           `protogen:"open.v1"`
	VehiclePositionResponse *VehiclePositionsResponseVehiclePositionResponse `protobuf:"bytes,114454597,opt,name=vehicle_position_response,json=vehiclePositionResponse,proto3" json:"vehicle_position_response,omitempty"`
	// This will be set to true if the result set was too large to be sent back in one reply. A new request must be sent to get the rest of the vehicle positions, where the starttime parameter must be supplied. The starttime should be set to the latest ReceivedDateTime + 1 second of the last vehicle in the result set of this message.
	MoreDataAvailable bool `protobuf:"varint,207349406,opt,name=more_data_available,json=moreDataAvailable,proto3" json:"more_data_available,omitempty"`
	// Populated with the link to the next part of the result when moreDataAvailable is true. The link is relative, i.e. starts with /rfms/vehiclepositions, and preserves any query parameters from the original request.
	MoreDataAvailableLink string `protobuf:"bytes,36631803,opt,name=more_data_available_link,json=moreDataAvailableLink,proto3" json:"more_data_available_link,omitempty"`
	// Time to be used to ask for historical data at customers (for starttime), to solve the problem of having different times at server and clients. This is the time at the server when this request was received. To avoid losing any messages or get duplicates, this is the time that should be supplied in the startTime parameter in the next request in iso8601 format.
	RequestServerDateTime string `protobuf:"bytes,447485328,opt,name=request_server_date_time,json=requestServerDateTime,proto3" json:"request_server_date_time,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *VehiclePositionsResponse) Reset() {
	*x = VehiclePositionsResponse{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehiclePositionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehiclePositionsResponse) ProtoMessage() {}

func (x *VehiclePositionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehiclePositionsResponse.ProtoReflect.Descriptor instead.
func (*VehiclePositionsResponse) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{26}
}

func (x *VehiclePositionsResponse) GetVehiclePositionResponse() *VehiclePositionsResponseVehiclePositionResponse {
	if x != nil {
		return x.VehiclePositionResponse
	}
	return nil
}

func (x *VehiclePositionsResponse) GetMoreDataAvailable() bool {
	if x != nil {
		return x.MoreDataAvailable
	}
	return false
}

func (x *VehiclePositionsResponse) GetMoreDataAvailableLink() string {
	if x != nil {
		return x.MoreDataAvailableLink
	}
	return ""
}

func (x *VehiclePositionsResponse) GetRequestServerDateTime() string {
	if x != nil {
		return x.RequestServerDateTime
	}
	return ""
}

type VehiclePositionsResponseVehiclePositionResponse struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	VehiclePositions []*VehiclePosition     `protobuf:"bytes,120778988,rep,name=vehicle_positions,json=vehiclePositions,proto3" json:"vehicle_positions,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *VehiclePositionsResponseVehiclePositionResponse) Reset() {
	*x = VehiclePositionsResponseVehiclePositionResponse{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehiclePositionsResponseVehiclePositionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehiclePositionsResponseVehiclePositionResponse) ProtoMessage() {}

func (x *VehiclePositionsResponseVehiclePositionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehiclePositionsResponseVehiclePositionResponse.ProtoReflect.Descriptor instead.
func (*VehiclePositionsResponseVehiclePositionResponse) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{27}
}

func (x *VehiclePositionsResponseVehiclePositionResponse) GetVehiclePositions() []*VehiclePosition {
	if x != nil {
		return x.VehiclePositions
	}
	return nil
}

type VehicleProductionDate struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Day of the month where first day of the month is 1
	Day int32 `protobuf:"varint,99228,opt,name=day,proto3" json:"day,omitempty"`
	// Month of the year, where January is value 1
	Month         int32 `protobuf:"varint,104080000,opt,name=month,proto3" json:"month,omitempty"`
	Year          int32 `protobuf:"varint,3704893,opt,name=year,proto3" json:"year,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VehicleProductionDate) Reset() {
	*x = VehicleProductionDate{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleProductionDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleProductionDate) ProtoMessage() {}

func (x *VehicleProductionDate) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleProductionDate.ProtoReflect.Descriptor instead.
func (*VehicleProductionDate) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{28}
}

func (x *VehicleProductionDate) GetDay() int32 {
	if x != nil {
		return x.Day
	}
	return 0
}

func (x *VehicleProductionDate) GetMonth() int32 {
	if x != nil {
		return x.Month
	}
	return 0
}

func (x *VehicleProductionDate) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type VehicleStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// vehicle identification number. See ISO 3779 (17 characters)
	Vin         string   `protobuf:"bytes,116763,opt,name=vin,proto3" json:"vin,omitempty"`
	TriggerType *Trigger `protobuf:"bytes,375833953,opt,name=trigger_type,json=triggerType,proto3" json:"trigger_type,omitempty"`
	// When the data was retrieved in the vehicle in iso8601 format.
	CreatedDateTime string `protobuf:"bytes,344543196,opt,name=created_date_time,json=createdDateTime,proto3" json:"created_date_time,omitempty"`
	// Reception at Server. To be used for handling of \"more data available\" in iso8601 format.
	ReceivedDateTime string `protobuf:"bytes,170489827,opt,name=received_date_time,json=receivedDateTime,proto3" json:"received_date_time,omitempty"`
	// Accumulated distance travelled by the vehicle during its operation in meter
	HrTotalVehicleDistance int64 `protobuf:"varint,478134760,opt,name=hr_total_vehicle_distance,json=hrTotalVehicleDistance,proto3" json:"hr_total_vehicle_distance,omitempty"`
	// The total hours of operation for the vehicle combustion engine. At least one of totalEngineHours or totalElectricMotorHours is Mandatory
	TotalEngineHours float64 `protobuf:"fixed64,13101040,opt,name=total_engine_hours,json=totalEngineHours,proto3" json:"total_engine_hours,omitempty"`
	// The total hours the electric motor is ready for propulsion (i.e. crank mode). At least one of totalEngineHours or totalElectricMotorHours is mandatory
	TotalElectricMotorHours float64   `protobuf:"fixed64,517830849,opt,name=total_electric_motor_hours,json=totalElectricMotorHours,proto3" json:"total_electric_motor_hours,omitempty"`
	Driver1Id               *DriverId `protobuf:"bytes,56359954,opt,name=driver1_id,json=driver1Id,proto3" json:"driver1_id,omitempty"`
	// The full vehicle weight in kg
	GrossCombinationVehicleWeight int32 `protobuf:"varint,157702457,opt,name=gross_combination_vehicle_weight,json=grossCombinationVehicleWeight,proto3" json:"gross_combination_vehicle_weight,omitempty"`
	// The total fuel the vehicle has used during its lifetime in MilliLitres. At least one of engineTotalFuelUsed, totalFuelUsedGaseous or totalElectricEnergyUsed is mandatory.
	EngineTotalFuelUsed int64 `protobuf:"varint,236077424,opt,name=engine_total_fuel_used,json=engineTotalFuelUsed,proto3" json:"engine_total_fuel_used,omitempty"`
	// Total fuel consumed in kg (trip drive fuel + trip PTO governor moving fuel + trip PTO governor non-moving fuel + trip idle fuel) over the life of the engine. At least one of engineTotalFuelUsed, totalFuelUsedGaseous or totalElectricEnergyUsed is mandatory.
	TotalFuelUsedGaseous int64 `protobuf:"varint,250424244,opt,name=total_fuel_used_gaseous,json=totalFuelUsedGaseous,proto3" json:"total_fuel_used_gaseous,omitempty"`
	// Total electric energy consumed by the vehicle, excluding when plugged in (vehicle coupler) for charging, (incl. motor, PTO, cooling, etc.) in watt hours. Recuperation is subtracted from the value.  At least one of engineTotalFuelUsed, totalFuelUsedGaseous or totalElectricEnergyUsed is mandatory.
	TotalElectricEnergyUsed int64 `protobuf:"varint,286050575,opt,name=total_electric_energy_used,json=totalElectricEnergyUsed,proto3" json:"total_electric_energy_used,omitempty"`
	// Composite indication of all bus door statuses. Bus specific parameter
	Status2OfDoors string `protobuf:"bytes,46851847,opt,name=status2_of_doors,json=status2OfDoors,proto3" json:"status2_of_doors,omitempty"`
	// Individual status for each door. Bus specific parameter
	DoorStatus      []*VehicleStatusDoorStatusInner `protobuf:"bytes,224250275,rep,name=door_status,json=doorStatus,proto3" json:"door_status,omitempty"`
	AccumulatedData *AccumulatedData                `protobuf:"bytes,473630074,opt,name=accumulated_data,json=accumulatedData,proto3" json:"accumulated_data,omitempty"`
	SnapshotData    *SnapshotData                   `protobuf:"bytes,123850055,opt,name=snapshot_data,json=snapshotData,proto3" json:"snapshot_data,omitempty"`
	UptimeData      *UptimeData                     `protobuf:"bytes,288408159,opt,name=uptime_data,json=uptimeData,proto3" json:"uptime_data,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VehicleStatus) Reset() {
	*x = VehicleStatus{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStatus) ProtoMessage() {}

func (x *VehicleStatus) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStatus.ProtoReflect.Descriptor instead.
func (*VehicleStatus) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{29}
}

func (x *VehicleStatus) GetVin() string {
	if x != nil {
		return x.Vin
	}
	return ""
}

func (x *VehicleStatus) GetTriggerType() *Trigger {
	if x != nil {
		return x.TriggerType
	}
	return nil
}

func (x *VehicleStatus) GetCreatedDateTime() string {
	if x != nil {
		return x.CreatedDateTime
	}
	return ""
}

func (x *VehicleStatus) GetReceivedDateTime() string {
	if x != nil {
		return x.ReceivedDateTime
	}
	return ""
}

func (x *VehicleStatus) GetHrTotalVehicleDistance() int64 {
	if x != nil {
		return x.HrTotalVehicleDistance
	}
	return 0
}

func (x *VehicleStatus) GetTotalEngineHours() float64 {
	if x != nil {
		return x.TotalEngineHours
	}
	return 0
}

func (x *VehicleStatus) GetTotalElectricMotorHours() float64 {
	if x != nil {
		return x.TotalElectricMotorHours
	}
	return 0
}

func (x *VehicleStatus) GetDriver1Id() *DriverId {
	if x != nil {
		return x.Driver1Id
	}
	return nil
}

func (x *VehicleStatus) GetGrossCombinationVehicleWeight() int32 {
	if x != nil {
		return x.GrossCombinationVehicleWeight
	}
	return 0
}

func (x *VehicleStatus) GetEngineTotalFuelUsed() int64 {
	if x != nil {
		return x.EngineTotalFuelUsed
	}
	return 0
}

func (x *VehicleStatus) GetTotalFuelUsedGaseous() int64 {
	if x != nil {
		return x.TotalFuelUsedGaseous
	}
	return 0
}

func (x *VehicleStatus) GetTotalElectricEnergyUsed() int64 {
	if x != nil {
		return x.TotalElectricEnergyUsed
	}
	return 0
}

func (x *VehicleStatus) GetStatus2OfDoors() string {
	if x != nil {
		return x.Status2OfDoors
	}
	return ""
}

func (x *VehicleStatus) GetDoorStatus() []*VehicleStatusDoorStatusInner {
	if x != nil {
		return x.DoorStatus
	}
	return nil
}

func (x *VehicleStatus) GetAccumulatedData() *AccumulatedData {
	if x != nil {
		return x.AccumulatedData
	}
	return nil
}

func (x *VehicleStatus) GetSnapshotData() *SnapshotData {
	if x != nil {
		return x.SnapshotData
	}
	return nil
}

func (x *VehicleStatus) GetUptimeData() *UptimeData {
	if x != nil {
		return x.UptimeData
	}
	return nil
}

type VehicleStatusDoorStatusInner struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	DoorEnabledStatus string                 `protobuf:"bytes,128974692,opt,name=door_enabled_status,json=DoorEnabledStatus,proto3" json:"door_enabled_status,omitempty"`
	DoorOpenStatus    string                 `protobuf:"bytes,282545270,opt,name=door_open_status,json=DoorOpenStatus,proto3" json:"door_open_status,omitempty"`
	DoorLockStatus    string                 `protobuf:"bytes,38576523,opt,name=door_lock_status,json=DoorLockStatus,proto3" json:"door_lock_status,omitempty"`
	DoorNumber        int32                  `protobuf:"varint,82367738,opt,name=door_number,json=DoorNumber,proto3" json:"door_number,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *VehicleStatusDoorStatusInner) Reset() {
	*x = VehicleStatusDoorStatusInner{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleStatusDoorStatusInner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStatusDoorStatusInner) ProtoMessage() {}

func (x *VehicleStatusDoorStatusInner) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStatusDoorStatusInner.ProtoReflect.Descriptor instead.
func (*VehicleStatusDoorStatusInner) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{30}
}

func (x *VehicleStatusDoorStatusInner) GetDoorEnabledStatus() string {
	if x != nil {
		return x.DoorEnabledStatus
	}
	return ""
}

func (x *VehicleStatusDoorStatusInner) GetDoorOpenStatus() string {
	if x != nil {
		return x.DoorOpenStatus
	}
	return ""
}

func (x *VehicleStatusDoorStatusInner) GetDoorLockStatus() string {
	if x != nil {
		return x.DoorLockStatus
	}
	return ""
}

func (x *VehicleStatusDoorStatusInner) GetDoorNumber() int32 {
	if x != nil {
		return x.DoorNumber
	}
	return 0
}

type VehicleStatusesResponse struct {
	state                 protoimpl.MessageState                        `protogen:"open.v1"`
	VehicleStatusResponse *VehicleStatusesResponseVehicleStatusResponse `protobuf:"bytes,259173671,opt,name=vehicle_status_response,json=vehicleStatusResponse,proto3" json:"vehicle_status_response,omitempty"`
	// This will be set to true if the result set was too large to be sent back in one reply. A new request must be done to get the rest of the vehicle statuses, where the starttime parameter must be supplied. The starttime should be set to the ReceivedDateTime + 1 second of the last vehicle in the result set of this message.
	MoreDataAvailable bool `protobuf:"varint,207349406,opt,name=more_data_available,json=moreDataAvailable,proto3" json:"more_data_available,omitempty"`
	// Populated with the link to the next part of the result when moreDataAvailable is true. The link is relative, i.e. starts with /rfms/vehiclestatuses, and preserves any query parameters from the original request.
	MoreDataAvailableLink string `protobuf:"bytes,36631803,opt,name=more_data_available_link,json=moreDataAvailableLink,proto3" json:"more_data_available_link,omitempty"`
	// Time in UTC to be used to ask for historical data (for starttime), to solve the problem of having different times at server and clients. This is the time at the server when this request was received. To avoid losing any messages or get duplicates, this is the time that should be supplied in the startTime parameter in the next request in iso8601 format.
	RequestServerDateTime string `protobuf:"bytes,447485328,opt,name=request_server_date_time,json=requestServerDateTime,proto3" json:"request_server_date_time,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *VehicleStatusesResponse) Reset() {
	*x = VehicleStatusesResponse{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleStatusesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStatusesResponse) ProtoMessage() {}

func (x *VehicleStatusesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStatusesResponse.ProtoReflect.Descriptor instead.
func (*VehicleStatusesResponse) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{31}
}

func (x *VehicleStatusesResponse) GetVehicleStatusResponse() *VehicleStatusesResponseVehicleStatusResponse {
	if x != nil {
		return x.VehicleStatusResponse
	}
	return nil
}

func (x *VehicleStatusesResponse) GetMoreDataAvailable() bool {
	if x != nil {
		return x.MoreDataAvailable
	}
	return false
}

func (x *VehicleStatusesResponse) GetMoreDataAvailableLink() string {
	if x != nil {
		return x.MoreDataAvailableLink
	}
	return ""
}

func (x *VehicleStatusesResponse) GetRequestServerDateTime() string {
	if x != nil {
		return x.RequestServerDateTime
	}
	return ""
}

type VehicleStatusesResponseVehicleStatusResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	VehicleStatuses []*VehicleStatus       `protobuf:"bytes,506750000,rep,name=vehicle_statuses,json=vehicleStatuses,proto3" json:"vehicle_statuses,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VehicleStatusesResponseVehicleStatusResponse) Reset() {
	*x = VehicleStatusesResponseVehicleStatusResponse{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehicleStatusesResponseVehicleStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleStatusesResponseVehicleStatusResponse) ProtoMessage() {}

func (x *VehicleStatusesResponseVehicleStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleStatusesResponseVehicleStatusResponse.ProtoReflect.Descriptor instead.
func (*VehicleStatusesResponseVehicleStatusResponse) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{32}
}

func (x *VehicleStatusesResponseVehicleStatusResponse) GetVehicleStatuses() []*VehicleStatus {
	if x != nil {
		return x.VehicleStatuses
	}
	return nil
}

type VehiclesResponse struct {
	state           protoimpl.MessageState           `protogen:"open.v1"`
	VehicleResponse *VehiclesResponseVehicleResponse `protobuf:"bytes,518588404,opt,name=vehicle_response,json=vehicleResponse,proto3" json:"vehicle_response,omitempty"`
	// This will be set to true if the result set was too large to be sent back in one reply. A new request must be sent to get the rest of the vehicles, where the lastVin parameter must be supplied. The lastVin should be set to the VIN of the last vehicle in the result set of this message.
	MoreDataAvailable bool `protobuf:"varint,207349406,opt,name=more_data_available,json=moreDataAvailable,proto3" json:"more_data_available,omitempty"`
	// Populated with the link to the next part of the result when moreDataAvailable is true. The link is relative, i.e. starts with /rfms/vehicles, and preserves any query parameters from the original request.
	MoreDataAvailableLink string `protobuf:"bytes,36631803,opt,name=more_data_available_link,json=moreDataAvailableLink,proto3" json:"more_data_available_link,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *VehiclesResponse) Reset() {
	*x = VehiclesResponse{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehiclesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehiclesResponse) ProtoMessage() {}

func (x *VehiclesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehiclesResponse.ProtoReflect.Descriptor instead.
func (*VehiclesResponse) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{33}
}

func (x *VehiclesResponse) GetVehicleResponse() *VehiclesResponseVehicleResponse {
	if x != nil {
		return x.VehicleResponse
	}
	return nil
}

func (x *VehiclesResponse) GetMoreDataAvailable() bool {
	if x != nil {
		return x.MoreDataAvailable
	}
	return false
}

func (x *VehiclesResponse) GetMoreDataAvailableLink() string {
	if x != nil {
		return x.MoreDataAvailableLink
	}
	return ""
}

type VehiclesResponseVehicleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Vehicles      []*Vehicle             `protobuf:"bytes,403592906,rep,name=vehicles,proto3" json:"vehicles,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VehiclesResponseVehicleResponse) Reset() {
	*x = VehiclesResponseVehicleResponse{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VehiclesResponseVehicleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehiclesResponseVehicleResponse) ProtoMessage() {}

func (x *VehiclesResponseVehicleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehiclesResponseVehicleResponse.ProtoReflect.Descriptor instead.
func (*VehiclesResponseVehicleResponse) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{34}
}

func (x *VehiclesResponseVehicleResponse) GetVehicles() []*Vehicle {
	if x != nil {
		return x.Vehicles
	}
	return nil
}

type VinProperty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VinProperty) Reset() {
	*x = VinProperty{}
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VinProperty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VinProperty) ProtoMessage() {}

func (x *VinProperty) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v4_api_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VinProperty.ProtoReflect.Descriptor instead.
func (*VinProperty) Descriptor() ([]byte, []int) {
	return file_wayplatform_rfms_v4_api_proto_rawDescGZIP(), []int{35}
}

var File_wayplatform_rfms_v4_api_proto protoreflect.FileDescriptor

const file_wayplatform_rfms_v4_api_proto_rawDesc = "" +
	"\n" +
	"\x1dwayplatform/rfms/v4/api.proto\x12\x17wayplatform.sdk.rfms.v4\"\xcb\x19\n" +
	"\x0fAccumulatedData\x12O\n" +
	"#duration_wheelbased_speed_over_zero\x18\xc2̰\x05 \x01(\x03R\x1fdurationWheelbasedSpeedOverZero\x12G\n" +
	"\x1edistance_cruise_control_active\x18\x8b\x80\xf6\xa3\x01 \x01(\x03R\x1bdistanceCruiseControlActive\x12F\n" +
	"\x1eduration_cruise_control_active\x18\xe8\xe0\x9ec \x01(\x03R\x1bdurationCruiseControlActive\x12S\n" +
	"%fuel_consumption_during_cruise_active\x18\xc4\xd0\xe1l \x01(\x03R!fuelConsumptionDuringCruiseActive\x12b\n" +
	"-fuel_consumption_during_cruise_active_gaseous\x18\xe1\xba\xd36 \x01(\x03R(fuelConsumptionDuringCruiseActiveGaseous\x12i\n" +
	"0electric_energy_consumption_during_cruise_active\x18\xf7\xbf\xae\xc9\x01 \x01(\x03R+electricEnergyConsumptionDuringCruiseActive\x12F\n" +
	"\x1eduration_wheelbased_speed_zero\x18\x9e\xb9\xd81 \x01(\x03R\x1bdurationWheelbasedSpeedZero\x12>\n" +
	"\x1afuel_wheelbased_speed_zero\x18\xc3\xe9\xfa< \x01(\x03R\x17fuelWheelbasedSpeedZero\x12N\n" +
	"\"fuel_wheelbased_speed_zero_gaseous\x18\xa2\xce\xd3\xed\x01 \x01(\x03R\x1efuelWheelbasedSpeedZeroGaseous\x12T\n" +
	"%electric_energy_wheelbased_speed_zero\x18\x91\x8b\x85\xeb\x01 \x01(\x03R!electricEnergyWheelbasedSpeedZero\x12H\n" +
	"\x1ffuel_wheelbased_speed_over_zero\x18\xa6\xff\xe5\xe4\x01 \x01(\x03R\x1bfuelWheelbasedSpeedOverZero\x12W\n" +
	"'fuel_wheelbased_speed_over_zero_gaseous\x18\xc1\x9a\xfa\x97\x01 \x01(\x03R\"fuelWheelbasedSpeedOverZeroGaseous\x12]\n" +
	"*electric_energy_wheelbased_speed_over_zero\x18\xac\xe3\xc9\xcf\x01 \x01(\x03R%electricEnergyWheelbasedSpeedOverZero\x121\n" +
	"\x13electric_energy_aux\x18\x92\xd6\xe1o \x01(\x03R\x11electricEnergyAux\x12K\n" +
	"\x10pto_active_class\x18\xd5\xf7\x8a\f \x03(\v2\x1e.wayplatform.sdk.rfms.v4.LabelR\x0eptoActiveClass\x12O\n" +
	"#brake_pedal_counter_speed_over_zero\x18⩔\xb2\x01 \x01(\x03R\x1ebrakePedalCounterSpeedOverZero\x12^\n" +
	"+distance_brake_pedal_active_speed_over_zero\x18\x85\xf7\xb5\xc5\x01 \x01(\x03R%distanceBrakePedalActiveSpeedOverZero\x12r\n" +
	"!acceleration_pedal_position_class\x18\xa8\x9d\xfbf \x03(\v2$.wayplatform.sdk.rfms.v4.FromToClassR\x1eaccelerationPedalPositionClass\x12d\n" +
	"\x1abrake_pedal_position_class\x18\xa6\xfe\x828 \x03(\v2$.wayplatform.sdk.rfms.v4.FromToClassR\x17brakePedalPositionClass\x12W\n" +
	"\x12acceleration_class\x18\x8a\xfe\xf7\xd2\x01 \x03(\v2$.wayplatform.sdk.rfms.v4.FromToClassR\x11accelerationClass\x12`\n" +
	"\x17high_acceleration_class\x18\xb8嗡\x01 \x03(\v2$.wayplatform.sdk.rfms.v4.FromToClassR\x15highAccelerationClass\x12\\\n" +
	"\x15retarder_torque_class\x18\x80\xf6\x9e\xcf\x01 \x03(\v2$.wayplatform.sdk.rfms.v4.FromToClassR\x13retarderTorqueClass\x12c\n" +
	"\x1cdriving_without_torque_class\x18\x93\xfd\xf4\x94\x01 \x03(\v2\x1e.wayplatform.sdk.rfms.v4.LabelR\x19drivingWithoutTorqueClass\x12b\n" +
	"\x13engine_torque_class\x18\xe0ӹ\xb4\x01 \x03(\v2..wayplatform.sdk.rfms.v4.FromToClassCombustionR\x11engineTorqueClass\x12q\n" +
	"\x1belectric_motor_torque_class\x18\x92ތ\x95\x01 \x03(\v2..wayplatform.sdk.rfms.v4.FromToClassElectricalR\x18electricMotorTorqueClass\x12\x81\x01\n" +
	"$engine_torque_at_current_speed_class\x18\xbd\xef\xac\xfa\x01 \x03(\v2..wayplatform.sdk.rfms.v4.FromToClassCombustionR\x1fengineTorqueAtCurrentSpeedClass\x12\x8f\x01\n" +
	",electric_motor_torque_at_current_speed_class\x18\xeb\xfd\xc9N \x03(\v2..wayplatform.sdk.rfms.v4.FromToClassElectricalR&electricMotorTorqueAtCurrentSpeedClass\x12X\n" +
	"\x13vehicle_speed_class\x18\xee\x8d\xf0\x8a\x01 \x03(\v2$.wayplatform.sdk.rfms.v4.FromToClassR\x11vehicleSpeedClass\x12U\n" +
	"\x12engine_speed_class\x18\x86\x82\xaa$ \x03(\v2$.wayplatform.sdk.rfms.v4.FromToClassR\x10engineSpeedClass\x12n\n" +
	"\x1facceleration_during_brake_class\x18\x87\xf1\xc9) \x03(\v2$.wayplatform.sdk.rfms.v4.FromToClassR\x1caccelerationDuringBrakeClass\x12R\n" +
	"\x13selected_gear_class\x18\x95\xfa\xf3\xc9\x01 \x03(\v2\x1e.wayplatform.sdk.rfms.v4.LabelR\x11selectedGearClass\x12O\n" +
	"\x12current_gear_class\x18\xce¡P \x03(\v2\x1e.wayplatform.sdk.rfms.v4.LabelR\x10currentGearClass\x12/\n" +
	"\x11chairlift_counter\x18\x8f\x90ɰ\x01 \x01(\x03R\x10chairliftCounter\x123\n" +
	"\x14stop_request_counter\x18\xf2\xeb\x9bR \x01(\x03R\x12stopRequestCounter\x12-\n" +
	"\x10kneeling_counter\x18\x8b\xd1Ā\x01 \x01(\x03R\x0fkneelingCounter\x123\n" +
	"\x14pram_request_counter\x18\xc6\xe8\xe4s \x01(\x03R\x12pramRequestCounter\x12|\n" +
	"!electric_power_recuperation_class\x18\x91\xfc\xe0< \x03(\v2..wayplatform.sdk.rfms.v4.FromToClassElectricalR\x1eelectricPowerRecuperationClass\"\x19\n" +
	"\x17CreatedDateTimeProperty\"\x82\x02\n" +
	"\bDriverId\x12}\n" +
	"\x1btacho_driver_identification\x18ÿ\xe9\n" +
	" \x01(\v2:.wayplatform.sdk.rfms.v4.DriverIdTachoDriverIdentificationR\x19tachoDriverIdentification\x12w\n" +
	"\x19oem_driver_identification\x18\x83\xf3\xf7\x06 \x01(\v28.wayplatform.sdk.rfms.v4.DriverIdOemDriverIdentificationR\x17oemDriverIdentification\"|\n" +
	"\x1fDriverIdOemDriverIdentification\x12\x1a\n" +
	"\aid_type\x18\xe1\xe7\x90\x14 \x01(\tR\x06idType\x12=\n" +
	"\x19oem_driver_identification\x18\x83\xf3\xf7\x06 \x01(\tR\x17oemDriverIdentification\"\xd0\x02\n" +
	"!DriverIdTachoDriverIdentification\x126\n" +
	"\x15driver_identification\x18\x9d\xf9\xac\t \x01(\tR\x14driverIdentification\x12=\n" +
	"\x19card_issuing_member_state\x18\xbc\xda\xf7\x81\x01 \x01(\tR\x16cardIssuingMemberState\x12I\n" +
	"\x1fdriver_authentication_equipment\x18\xc2\xf6\xb7X \x01(\tR\x1ddriverAuthenticationEquipment\x127\n" +
	"\x16card_replacement_index\x18\x8d\xf6\xb2& \x01(\tR\x14cardReplacementIndex\x120\n" +
	"\x12card_renewal_index\x18\xa5\xab\xe2\x89\x01 \x01(\tR\x10cardRenewalIndex\"\x1c\n" +
	"\x1aDriverWorkingStateProperty\"r\n" +
	"\x05Error\x12\x17\n" +
	"\x05error\x18\x88\xa4\x93. \x01(\tR\x05error\x12/\n" +
	"\x11error_description\x18\xbb\xaf\xb0\xe5\x01 \x01(\tR\x10errorDescription\x12\x1f\n" +
	"\terror_uri\x18\xb5\x85\xa6\x9d\x01 \x01(\tR\berrorUri\"\xd8\x01\n" +
	"\vFromToClass\x12\x15\n" +
	"\x04from\x18\xaa\xaf\xc0\x01 \x01(\x01R\x04from\x12\x0f\n" +
	"\x02to\x18\xfb\x1c \x01(\x01R\x02to\x12\x1c\n" +
	"\aseconds\x18\x82\x95\xb5\xab\x01 \x01(\x03R\aseconds\x12\x19\n" +
	"\x06meters\x18\xf8\xf3\xe8\x01 \x01(\x03R\x06meters\x12%\n" +
	"\fmilli_litres\x18\xa5\xb1\xff\x84\x01 \x01(\x03R\vmilliLitres\x12 \n" +
	"\tkilograms\x18ǋ\xfa\xbc\x01 \x01(\x03R\tkilograms\x12\x1f\n" +
	"\twatthours\x18\x85\xc5\xd1b \x01(\x03R\twatthours\"\xc1\x01\n" +
	"\x15FromToClassCombustion\x12\x15\n" +
	"\x04from\x18\xaa\xaf\xc0\x01 \x01(\x01R\x04from\x12\x0f\n" +
	"\x02to\x18\xfb\x1c \x01(\x01R\x02to\x12\x1c\n" +
	"\aseconds\x18\x82\x95\xb5\xab\x01 \x01(\x03R\aseconds\x12\x19\n" +
	"\x06meters\x18\xf8\xf3\xe8\x01 \x01(\x03R\x06meters\x12%\n" +
	"\fmilli_litres\x18\xa5\xb1\xff\x84\x01 \x01(\x03R\vmilliLitres\x12 \n" +
	"\tkilograms\x18ǋ\xfa\xbc\x01 \x01(\x03R\tkilograms\"\x99\x01\n" +
	"\x15FromToClassElectrical\x12\x15\n" +
	"\x04from\x18\xaa\xaf\xc0\x01 \x01(\x01R\x04from\x12\x0f\n" +
	"\x02to\x18\xfb\x1c \x01(\x01R\x02to\x12\x1c\n" +
	"\aseconds\x18\x82\x95\xb5\xab\x01 \x01(\x03R\aseconds\x12\x19\n" +
	"\x06meters\x18\xf8\xf3\xe8\x01 \x01(\x03R\x06meters\x12\x1f\n" +
	"\twatthours\x18\x85\xc5\xd1b \x01(\x03R\twatthours\"\xd7\x01\n" +
	"\fGNSSPosition\x12\x1e\n" +
	"\blatitude\x18\x96\xa7Ѯ\x01 \x01(\x01R\blatitude\x12\x1f\n" +
	"\tlongitude\x18\xaf\x93\xc0A \x01(\x01R\tlongitude\x12\x1b\n" +
	"\aheading\x18\x83\xfc\x9d{ \x01(\x05R\aheading\x12\x1e\n" +
	"\baltitude\x18\xa5\x95\x8d\xcb\x01 \x01(\x05R\baltitude\x12\x17\n" +
	"\x05speed\x18ǀ\xa44 \x01(\x01R\x05speed\x120\n" +
	"\x12position_date_time\x18\xa9\xda\xce\xef\x01 \x01(\tR\x10positionDateTime\"\xc3\x01\n" +
	"\x05Label\x12\x17\n" +
	"\x05label\x18\xf4\xfd\xfd0 \x01(\tR\x05label\x12\x1c\n" +
	"\aseconds\x18\x82\x95\xb5\xab\x01 \x01(\x03R\aseconds\x12\x19\n" +
	"\x06meters\x18\xf8\xf3\xe8\x01 \x01(\x03R\x06meters\x12%\n" +
	"\fmilli_litres\x18\xa5\xb1\xff\x84\x01 \x01(\x03R\vmilliLitres\x12 \n" +
	"\tkilograms\x18ǋ\xfa\xbc\x01 \x01(\x03R\tkilograms\x12\x1f\n" +
	"\twatthours\x18\x85\xc5\xd1b \x01(\x03R\twatthours\"\x1a\n" +
	"\x18ReceivedDateTimeProperty\"\xef\v\n" +
	"\fSnapshotData\x12N\n" +
	"\rgnss_position\x18\xe1\xa9\xfa\xb5\x01 \x01(\v2%.wayplatform.sdk.rfms.v4.GNSSPositionR\fgnssPosition\x12.\n" +
	"\x11wheel_based_speed\x18\xab\xe4\xe6\xd7\x01 \x01(\x01R\x0fwheelBasedSpeed\x12,\n" +
	"\x10tachograph_speed\x18\u06dd\xe6l \x01(\x01R\x0ftachographSpeed\x12$\n" +
	"\fengine_speed\x18\x8c\xc8\xd49 \x01(\x01R\vengineSpeed\x123\n" +
	"\x14electric_motor_speed\x18\xa8\x80\x80\x15 \x01(\x01R\x12electricMotorSpeed\x12\x1e\n" +
	"\tfuel_type\x18\xa4\x90\xffM \x01(\tR\bfuelType\x12#\n" +
	"\vfuel_level1\x18\xac\x90\xbe\xae\x01 \x01(\x01R\n" +
	"fuelLevel1\x12#\n" +
	"\vfuel_level2\x18\xab\x90\xbe\xae\x01 \x01(\x01R\n" +
	"fuelLevel2\x122\n" +
	"\x13catalyst_fuel_level\x18\xc1\x95\xe8\xe1\x01 \x01(\x01R\x11catalystFuelLevel\x126\n" +
	"\x15driver1_working_state\x18\xcfʲ\x9e\x01 \x01(\tR\x13driver1WorkingState\x12C\n" +
	"\n" +
	"driver2_id\x18\xf1\xe0\xf1\x1a \x01(\v2!.wayplatform.sdk.rfms.v4.DriverIdR\tdriver2Id\x126\n" +
	"\x15driver2_working_state\x18\xf4\xe0ߒ\x01 \x01(\tR\x13driver2WorkingState\x12:\n" +
	"\x17ambient_air_temperature\x18\xa8ӛ\xb6\x01 \x01(\x01R\x15ambientAirTemperature\x124\n" +
	"\x14parking_brake_switch\x18\xf0\xa7\xd0\xc6\x01 \x01(\bR\x12parkingBrakeSwitch\x12Q\n" +
	"$hybrid_battery_pack_remaining_charge\x18\xd0\xdd\xffA \x01(\x01R hybridBatteryPackRemainingCharge\x12B\n" +
	"\x1cbattery_pack_charging_status\x18ό\x90> \x01(\tR\x19batteryPackChargingStatus\x12W\n" +
	"'battery_pack_charging_connection_status\x18\xa9\xb4\xad0 \x01(\tR#batteryPackChargingConnectionStatus\x12B\n" +
	"\x1cbattery_pack_charging_device\x18\xb2\xa9\x85k \x01(\tR\x19batteryPackChargingDevice\x12A\n" +
	"\x1bbattery_pack_charging_power\x18\xec\xbe\xec\xe7\x01 \x01(\x01R\x18batteryPackChargingPower\x12e\n" +
	".estimated_time_battery_pack_charging_completed\x18\xe2\xdc܈\x01 \x01(\tR)estimatedTimeBatteryPackChargingCompleted\x12\x7f\n" +
	"\x1bestimated_distance_to_empty\x18\xb2\xeb\xd5[ \x01(\v2=.wayplatform.sdk.rfms.v4.SnapshotDataEstimatedDistanceToEmptyR\x18estimatedDistanceToEmpty\x12_\n" +
	"\rvehicle_axles\x18\xb2\xef\xe7\xc3\x01 \x03(\v26.wayplatform.sdk.rfms.v4.SnapshotDataVehicleAxlesInnerR\fvehicleAxles\x12Q\n" +
	"\btrailers\x18\xa2\xa3\xbc` \x03(\v22.wayplatform.sdk.rfms.v4.SnapshotDataTrailersInnerR\btrailers\"\x90\x01\n" +
	"$SnapshotDataEstimatedDistanceToEmpty\x12\x17\n" +
	"\x05total\x18Ķ\xdb4 \x01(\x03R\x05total\x12\x15\n" +
	"\x04fuel\x18\xb6\xc3\xc0\x01 \x01(\x03R\x04fuel\x12\x12\n" +
	"\x03gas\x18ٝ\x06 \x01(\x03R\x03gas\x12$\n" +
	"\fbattery_pack\x18\xf8\xa5\x9b& \x01(\x03R\vbatteryPack\"\xa8\x03\n" +
	"\x19SnapshotDataTrailersInner\x12!\n" +
	"\n" +
	"trailer_no\x18\xb6\xa7\xbc\xdb\x01 \x01(\x05R\ttrailerNo\x12B\n" +
	"\x1btrailer_identification_data\x18Ћ\xa5\xef\x01 \x01(\tR\x19trailerIdentificationData\x12\"\n" +
	"\vtrailer_vin\x18\x8f\xf6\xb2l \x01(\tR\n" +
	"trailerVin\x125\n" +
	"\x15customer_trailer_name\x18ۑ\x80, \x01(\tR\x13customerTrailerName\x12%\n" +
	"\ftrailer_type\x18\xbc\x8a\xd8\xdf\x01 \x01(\tR\vtrailerType\x125\n" +
	"\x15trailer_axle_load_sum\x18\xab\xce\xd4\xe1\x01 \x01(\x05R\x12trailerAxleLoadSum\x12k\n" +
	"\rtrailer_axles\x18\x8a\xc7\xdb\x1e \x03(\v2C.wayplatform.sdk.rfms.v4.SnapshotDataTrailersInnerTrailerAxlesInnerR\ftrailerAxles\"\x93\x01\n" +
	"*SnapshotDataTrailersInnerTrailerAxlesInner\x126\n" +
	"\x15trailer_axle_position\x18\xf6\xba\xa5\xed\x01 \x01(\x05R\x13trailerAxlePosition\x12-\n" +
	"\x11trailer_axle_load\x18\xca\xef\x83\x7f \x01(\x02R\x0ftrailerAxleLoad\"\x87\x01\n" +
	"\x1dSnapshotDataVehicleAxlesInner\x126\n" +
	"\x15vehicle_axle_position\x18\xc7\xe9\xe4\xe6\x01 \x01(\x05R\x13vehicleAxlePosition\x12.\n" +
	"\x11vehicle_axle_load\x18\x82\x9d\xbe\xab\x01 \x01(\x02R\x0fvehicleAxleLoad\"o\n" +
	"\fTellTaleInfo\x12\x1f\n" +
	"\ttell_tale\x18\xf5\xa0\xd9\xcd\x01 \x01(\tR\btellTale\x12%\n" +
	"\roem_tell_tale\x18\xf6\x90\x8a. \x01(\tR\voemTellTale\x12\x17\n" +
	"\x05state\x18\x91\x89\xab4 \x01(\tR\x05state\"\x98\x04\n" +
	"\aTrigger\x12%\n" +
	"\ftrigger_type\x18ኛ\xb3\x01 \x01(\tR\vtriggerType\x12\x1c\n" +
	"\acontext\x18\xb0\xeb\xdc\xc5\x01 \x01(\tR\acontext\x12%\n" +
	"\ftrigger_info\x18յ\x86\xb3\x01 \x03(\tR\vtriggerInfo\x12B\n" +
	"\tdriver_id\x18\xf0\uefcb\x01 \x01(\v2!.wayplatform.sdk.rfms.v4.DriverIdR\bdriverId\x12\x19\n" +
	"\x06pto_id\x18\x92ڪ\xd2\x01 \x01(\tR\x05ptoId\x12N\n" +
	"\x0etell_tale_info\x18锘G \x01(\v2%.wayplatform.sdk.rfms.v4.TellTaleInfoR\ftellTaleInfo\x12h\n" +
	"\x14charging_status_info\x18\xf4\u05eb\x8e\x01 \x01(\v22.wayplatform.sdk.rfms.v4.TriggerChargingStatusInfoR\x12chargingStatusInfo\x12\x87\x01\n" +
	"\x1fcharging_connection_status_info\x18\x88\x85\xc1\x83\x01 \x01(\v2<.wayplatform.sdk.rfms.v4.TriggerChargingConnectionStatusInfoR\x1cchargingConnectionStatusInfo\"d\n" +
	"#TriggerChargingConnectionStatusInfo\x12\x17\n" +
	"\x05event\x18\x9a\xe5\x99. \x01(\tR\x05event\x12$\n" +
	"\fevent_detail\x18\x97Ñ& \x01(\tR\veventDetail\"Z\n" +
	"\x19TriggerChargingStatusInfo\x12\x17\n" +
	"\x05event\x18\x9a\xe5\x99. \x01(\tR\x05event\x12$\n" +
	"\fevent_detail\x18\x97Ñ& \x01(\tR\veventDetail\"\xb9\a\n" +
	"\n" +
	"UptimeData\x12N\n" +
	"\x0etell_tale_info\x18锘G \x03(\v2%.wayplatform.sdk.rfms.v4.TellTaleInfoR\ftellTaleInfo\x12-\n" +
	"\x10service_distance\x18ě\x85\xf7\x01 \x01(\x03R\x0fserviceDistance\x12@\n" +
	"\x1aengine_coolant_temperature\x18\xb6\x86ʼ\x01 \x01(\x01R\x18engineCoolantTemperature\x12J\n" +
	" hvess_outlet_coolant_temperature\x18\xf9\xbd\xb4v \x01(\x01R\x1dhvessOutletCoolantTemperature\x12.\n" +
	"\x11hvess_temperature\x18\x96\xfa\xe7$ \x01(\x01R\x10hvessTemperature\x12O\n" +
	"#service_brake_air_pressure_circuit1\x18\xb1\xd4\xd4\x1d \x01(\x03R\x1fserviceBrakeAirPressureCircuit1\x12O\n" +
	"#service_brake_air_pressure_circuit2\x18\xb0\xd4\xd4\x1d \x01(\x03R\x1fserviceBrakeAirPressureCircuit2\x12F\n" +
	"\x1fduration_at_least_one_door_open\x18\xcc\xf6\x8dK \x01(\x03R\x1adurationAtLeastOneDoorOpen\x12^\n" +
	"\x0falternator_info\x18\xa3\xbcƅ\x01 \x01(\v21.wayplatform.sdk.rfms.v4.UptimeDataAlternatorInfoR\x0ealternatorInfo\x12G\n" +
	"\x1fbellow_pressure_front_axle_left\x18\xfc\xfb\xf9} \x01(\x03R\x1bbellowPressureFrontAxleLeft\x12J\n" +
	" bellow_pressure_front_axle_right\x18\xf9\xba\xe1\xbc\x01 \x01(\x03R\x1cbellowPressureFrontAxleRight\x12E\n" +
	"\x1ebellow_pressure_rear_axle_left\x18Ċ\x93M \x01(\x03R\x1abellowPressureRearAxleLeft\x12H\n" +
	"\x1fbellow_pressure_rear_axle_right\x18\xdf\xf7֥\x01 \x01(\x03R\x1bbellowPressureRearAxleRight\"{\n" +
	"\x18UptimeDataAlternatorInfo\x12.\n" +
	"\x11alternator_status\x18䉁5 \x01(\tR\x10alternatorStatus\x12/\n" +
	"\x11alternator_number\x18\xba\xa0\xad\xf1\x01 \x01(\x03R\x10alternatorNumber\"\x8e\a\n" +
	"\aVehicle\x12\x12\n" +
	"\x03vin\x18\x9b\x90\a \x01(\tR\x03vin\x125\n" +
	"\x15customer_vehicle_name\x18\x81\xc5\xe9C \x01(\tR\x13customerVehicleName\x12\x17\n" +
	"\x05brand\x18\x87\x97\xe9, \x01(\tR\x05brand\x12[\n" +
	"\x0fproduction_date\x18\xf6\x86͉\x01 \x01(\v2..wayplatform.sdk.rfms.v4.VehicleProductionDateR\x0eproductionDate\x12\x15\n" +
	"\x04type\x18\xba\x9e\xda\x01 \x01(\tR\x04type\x12\x17\n" +
	"\x05model\x18\xa9\xf6\xcf1 \x01(\tR\x05model\x12/\n" +
	"\x12possible_fuel_type\x18إ\xfb^ \x03(\tR\x10possibleFuelType\x12)\n" +
	"\x0eemission_level\x18\xb6\x9a\xfd\x81\x01 \x01(\tR\remissionLevel\x12'\n" +
	"\x0etell_tale_code\x18\xaa\x82\xa3G \x01(\tR\ftellTaleCode\x12%\n" +
	"\fchassis_type\x18\xce̺\xc4\x01 \x01(\tR\vchassisType\x12!\n" +
	"\vno_of_axles\x18\xa9\xd2\xd1s \x01(\x05R\tnoOfAxles\x126\n" +
	"\x16total_fuel_tank_volume\x18\xa3\x95\xcb\\ \x01(\x05R\x13totalFuelTankVolume\x12I\n" +
	" total_fuel_tank_capacity_gaseous\x18\xe4\xb6\xdf\x06 \x01(\x05R\x1ctotalFuelTankCapacityGaseous\x12@\n" +
	"\x1btotal_battery_pack_capacity\x18ϲ\xdb\x05 \x01(\x05R\x18totalBatteryPackCapacity\x12+\n" +
	"\x0ftachograph_type\x18\x99\xb3\xbc\xfc\x01 \x01(\tR\x0etachographType\x12$\n" +
	"\fgearbox_type\x18\xc3\xe8\x83f \x01(\tR\vgearboxType\x12\x1e\n" +
	"\tbody_type\x18\xb9\x87\xbfU \x01(\tR\bbodyType\x120\n" +
	"\x12door_configuration\x18ܻ\x9a7 \x03(\x05R\x11doorConfiguration\x12+\n" +
	"\x10has_ramp_or_lift\x18Û\x9d\xd0\x01 \x01(\bR\rhasRampOrLift\x12,\n" +
	"\x10authorized_paths\x18\xb9͑_ \x03(\tR\x0fauthorizedPaths\"\xfd\x02\n" +
	"\x0fVehiclePosition\x12\x12\n" +
	"\x03vin\x18\x9b\x90\a \x01(\tR\x03vin\x12G\n" +
	"\ftrigger_type\x18ኛ\xb3\x01 \x01(\v2 .wayplatform.sdk.rfms.v4.TriggerR\vtriggerType\x12.\n" +
	"\x11created_date_time\x18ܟ\xa5\xa4\x01 \x01(\tR\x0fcreatedDateTime\x12/\n" +
	"\x12received_date_time\x18\xe3\xef\xa5Q \x01(\tR\x10receivedDateTime\x12N\n" +
	"\rgnss_position\x18\xe1\xa9\xfa\xb5\x01 \x01(\v2%.wayplatform.sdk.rfms.v4.GNSSPositionR\fgnssPosition\x12.\n" +
	"\x11wheel_based_speed\x18\xab\xe4\xe6\xd7\x01 \x01(\x01R\x0fwheelBasedSpeed\x12,\n" +
	"\x10tachograph_speed\x18\u06dd\xe6l \x01(\x01R\x0ftachographSpeed\"\xd0\x02\n" +
	"\x18VehiclePositionsResponse\x12\x87\x01\n" +
	"\x19vehicle_position_response\x18\xc5\xe0\xc96 \x01(\v2H.wayplatform.sdk.rfms.v4.VehiclePositionsResponseVehiclePositionResponseR\x17vehiclePositionResponse\x121\n" +
	"\x13more_data_available\x18\x9e\xcd\xefb \x01(\bR\x11moreDataAvailable\x12:\n" +
	"\x18more_data_available_link\x18\xfb\xe9\xbb\x11 \x01(\tR\x15moreDataAvailableLink\x12;\n" +
	"\x18request_server_date_time\x18\x90\xab\xb0\xd5\x01 \x01(\tR\x15requestServerDateTime\"\x8b\x01\n" +
	"/VehiclePositionsResponseVehiclePositionResponse\x12X\n" +
	"\x11vehicle_positions\x18\xec\xe1\xcb9 \x03(\v2(.wayplatform.sdk.rfms.v4.VehiclePositionR\x10vehiclePositions\"[\n" +
	"\x15VehicleProductionDate\x12\x12\n" +
	"\x03day\x18\x9c\x87\x06 \x01(\x05R\x03day\x12\x17\n" +
	"\x05month\x18\x80\xc5\xd01 \x01(\x05R\x05month\x12\x15\n" +
	"\x04year\x18\xbd\x90\xe2\x01 \x01(\x05R\x04year\"\xbc\b\n" +
	"\rVehicleStatus\x12\x12\n" +
	"\x03vin\x18\x9b\x90\a \x01(\tR\x03vin\x12G\n" +
	"\ftrigger_type\x18ኛ\xb3\x01 \x01(\v2 .wayplatform.sdk.rfms.v4.TriggerR\vtriggerType\x12.\n" +
	"\x11created_date_time\x18ܟ\xa5\xa4\x01 \x01(\tR\x0fcreatedDateTime\x12/\n" +
	"\x12received_date_time\x18\xe3\xef\xa5Q \x01(\tR\x10receivedDateTime\x12=\n" +
	"\x19hr_total_vehicle_distance\x18\xe8\x83\xff\xe3\x01 \x01(\x03R\x16hrTotalVehicleDistance\x12/\n" +
	"\x12total_engine_hours\x18\xf0ϟ\x06 \x01(\x01R\x10totalEngineHours\x12?\n" +
	"\x1atotal_electric_motor_hours\x18\xc1\xf1\xf5\xf6\x01 \x01(\x01R\x17totalElectricMotorHours\x12C\n" +
	"\n" +
	"driver1_id\x18\x92\xf8\xef\x1a \x01(\v2!.wayplatform.sdk.rfms.v4.DriverIdR\tdriver1Id\x12J\n" +
	" gross_combination_vehicle_weight\x18\xb9\xb2\x99K \x01(\x05R\x1dgrossCombinationVehicleWeight\x126\n" +
	"\x16engine_total_fuel_used\x18\xf0\x82\xc9p \x01(\x03R\x13engineTotalFuelUsed\x128\n" +
	"\x17total_fuel_used_gaseous\x18\xb4״w \x01(\x03R\x14totalFuelUsedGaseous\x12?\n" +
	"\x1atotal_electric_energy_used\x18\x8f\x92\xb3\x88\x01 \x01(\x03R\x17totalElectricEnergyUsed\x12+\n" +
	"\x10status2_of_doors\x18\x87Ϋ\x16 \x01(\tR\x0estatus2OfDoors\x12Y\n" +
	"\vdoor_status\x18\xa3\x93\xf7j \x03(\v25.wayplatform.sdk.rfms.v4.VehicleStatusDoorStatusInnerR\n" +
	"doorStatus\x12W\n" +
	"\x10accumulated_data\x18\xfa\x8a\xec\xe1\x01 \x01(\v2(.wayplatform.sdk.rfms.v4.AccumulatedDataR\x0faccumulatedData\x12M\n" +
	"\rsnapshot_data\x18ǚ\x87; \x01(\v2%.wayplatform.sdk.rfms.v4.SnapshotDataR\fsnapshotData\x12H\n" +
	"\vuptime_data\x18߄É\x01 \x01(\v2#.wayplatform.sdk.rfms.v4.UptimeDataR\n" +
	"uptimeData\"\xd0\x01\n" +
	"\x1cVehicleStatusDoorStatusInner\x121\n" +
	"\x13door_enabled_status\x18\xe4\xfe\xbf= \x01(\tR\x11DoorEnabledStatus\x12,\n" +
	"\x10door_open_status\x18\xf6\x98݆\x01 \x01(\tR\x0eDoorOpenStatus\x12+\n" +
	"\x10door_lock_status\x18\x8bò\x12 \x01(\tR\x0eDoorLockStatus\x12\"\n" +
	"\vdoor_number\x18\xfa\xa9\xa3' \x01(\x05R\n" +
	"DoorNumber\"\xc8\x02\n" +
	"\x17VehicleStatusesResponse\x12\x80\x01\n" +
	"\x17vehicle_status_response\x18\xa7\xda\xca{ \x01(\v2E.wayplatform.sdk.rfms.v4.VehicleStatusesResponseVehicleStatusResponseR\x15vehicleStatusResponse\x121\n" +
	"\x13more_data_available\x18\x9e\xcd\xefb \x01(\bR\x11moreDataAvailable\x12:\n" +
	"\x18more_data_available_link\x18\xfb\xe9\xbb\x11 \x01(\tR\x15moreDataAvailableLink\x12;\n" +
	"\x18request_server_date_time\x18\x90\xab\xb0\xd5\x01 \x01(\tR\x15requestServerDateTime\"\x85\x01\n" +
	",VehicleStatusesResponseVehicleStatusResponse\x12U\n" +
	"\x10vehicle_statuses\x18\xb0\xc8\xd1\xf1\x01 \x03(\v2&.wayplatform.sdk.rfms.v4.VehicleStatusR\x0fvehicleStatuses\"\xea\x01\n" +
	"\x10VehiclesResponse\x12g\n" +
	"\x10vehicle_response\x18\xf4\x8f\xa4\xf7\x01 \x01(\v28.wayplatform.sdk.rfms.v4.VehiclesResponseVehicleResponseR\x0fvehicleResponse\x121\n" +
	"\x13more_data_available\x18\x9e\xcd\xefb \x01(\bR\x11moreDataAvailable\x12:\n" +
	"\x18more_data_available_link\x18\xfb\xe9\xbb\x11 \x01(\tR\x15moreDataAvailableLink\"c\n" +
	"\x1fVehiclesResponseVehicleResponse\x12@\n" +
	"\bvehicles\x18ʭ\xb9\xc0\x01 \x03(\v2 .wayplatform.sdk.rfms.v4.VehicleR\bvehicles\"\r\n" +
	"\vVinPropertyB\xe7\x01\n" +
	"\x1bcom.wayplatform.sdk.rfms.v4B\bApiProtoP\x01Z?github.com/way-platform/proto/gen/go/wayplatform/rfms/v4;rfmsv4\xa2\x02\x03WSR\xaa\x02\x17Wayplatform.Sdk.Rfms.V4\xca\x02\x17Wayplatform\\Sdk\\Rfms\\V4\xe2\x02#Wayplatform\\Sdk\\Rfms\\V4\\GPBMetadata\xea\x02\x1aWayplatform::Sdk::Rfms::V4b\x06proto3"

var (
	file_wayplatform_rfms_v4_api_proto_rawDescOnce sync.Once
	file_wayplatform_rfms_v4_api_proto_rawDescData []byte
)

func file_wayplatform_rfms_v4_api_proto_rawDescGZIP() []byte {
	file_wayplatform_rfms_v4_api_proto_rawDescOnce.Do(func() {
		file_wayplatform_rfms_v4_api_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_wayplatform_rfms_v4_api_proto_rawDesc), len(file_wayplatform_rfms_v4_api_proto_rawDesc)))
	})
	return file_wayplatform_rfms_v4_api_proto_rawDescData
}

var file_wayplatform_rfms_v4_api_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_wayplatform_rfms_v4_api_proto_goTypes = []any{
	(*AccumulatedData)(nil),                                 // 0: wayplatform.sdk.rfms.v4.AccumulatedData
	(*CreatedDateTimeProperty)(nil),                         // 1: wayplatform.sdk.rfms.v4.CreatedDateTimeProperty
	(*DriverId)(nil),                                        // 2: wayplatform.sdk.rfms.v4.DriverId
	(*DriverIdOemDriverIdentification)(nil),                 // 3: wayplatform.sdk.rfms.v4.DriverIdOemDriverIdentification
	(*DriverIdTachoDriverIdentification)(nil),               // 4: wayplatform.sdk.rfms.v4.DriverIdTachoDriverIdentification
	(*DriverWorkingStateProperty)(nil),                      // 5: wayplatform.sdk.rfms.v4.DriverWorkingStateProperty
	(*Error)(nil),                                           // 6: wayplatform.sdk.rfms.v4.Error
	(*FromToClass)(nil),                                     // 7: wayplatform.sdk.rfms.v4.FromToClass
	(*FromToClassCombustion)(nil),                           // 8: wayplatform.sdk.rfms.v4.FromToClassCombustion
	(*FromToClassElectrical)(nil),                           // 9: wayplatform.sdk.rfms.v4.FromToClassElectrical
	(*GNSSPosition)(nil),                                    // 10: wayplatform.sdk.rfms.v4.GNSSPosition
	(*Label)(nil),                                           // 11: wayplatform.sdk.rfms.v4.Label
	(*ReceivedDateTimeProperty)(nil),                        // 12: wayplatform.sdk.rfms.v4.ReceivedDateTimeProperty
	(*SnapshotData)(nil),                                    // 13: wayplatform.sdk.rfms.v4.SnapshotData
	(*SnapshotDataEstimatedDistanceToEmpty)(nil),            // 14: wayplatform.sdk.rfms.v4.SnapshotDataEstimatedDistanceToEmpty
	(*SnapshotDataTrailersInner)(nil),                       // 15: wayplatform.sdk.rfms.v4.SnapshotDataTrailersInner
	(*SnapshotDataTrailersInnerTrailerAxlesInner)(nil),      // 16: wayplatform.sdk.rfms.v4.SnapshotDataTrailersInnerTrailerAxlesInner
	(*SnapshotDataVehicleAxlesInner)(nil),                   // 17: wayplatform.sdk.rfms.v4.SnapshotDataVehicleAxlesInner
	(*TellTaleInfo)(nil),                                    // 18: wayplatform.sdk.rfms.v4.TellTaleInfo
	(*Trigger)(nil),                                         // 19: wayplatform.sdk.rfms.v4.Trigger
	(*TriggerChargingConnectionStatusInfo)(nil),             // 20: wayplatform.sdk.rfms.v4.TriggerChargingConnectionStatusInfo
	(*TriggerChargingStatusInfo)(nil),                       // 21: wayplatform.sdk.rfms.v4.TriggerChargingStatusInfo
	(*UptimeData)(nil),                                      // 22: wayplatform.sdk.rfms.v4.UptimeData
	(*UptimeDataAlternatorInfo)(nil),                        // 23: wayplatform.sdk.rfms.v4.UptimeDataAlternatorInfo
	(*Vehicle)(nil),                                         // 24: wayplatform.sdk.rfms.v4.Vehicle
	(*VehiclePosition)(nil),                                 // 25: wayplatform.sdk.rfms.v4.VehiclePosition
	(*VehiclePositionsResponse)(nil),                        // 26: wayplatform.sdk.rfms.v4.VehiclePositionsResponse
	(*VehiclePositionsResponseVehiclePositionResponse)(nil), // 27: wayplatform.sdk.rfms.v4.VehiclePositionsResponseVehiclePositionResponse
	(*VehicleProductionDate)(nil),                           // 28: wayplatform.sdk.rfms.v4.VehicleProductionDate
	(*VehicleStatus)(nil),                                   // 29: wayplatform.sdk.rfms.v4.VehicleStatus
	(*VehicleStatusDoorStatusInner)(nil),                    // 30: wayplatform.sdk.rfms.v4.VehicleStatusDoorStatusInner
	(*VehicleStatusesResponse)(nil),                         // 31: wayplatform.sdk.rfms.v4.VehicleStatusesResponse
	(*VehicleStatusesResponseVehicleStatusResponse)(nil),    // 32: wayplatform.sdk.rfms.v4.VehicleStatusesResponseVehicleStatusResponse
	(*VehiclesResponse)(nil),                                // 33: wayplatform.sdk.rfms.v4.VehiclesResponse
	(*VehiclesResponseVehicleResponse)(nil),                 // 34: wayplatform.sdk.rfms.v4.VehiclesResponseVehicleResponse
	(*VinProperty)(nil),                                     // 35: wayplatform.sdk.rfms.v4.VinProperty
}
var file_wayplatform_rfms_v4_api_proto_depIdxs = []int32{
	11, // 0: wayplatform.sdk.rfms.v4.AccumulatedData.pto_active_class:type_name -> wayplatform.sdk.rfms.v4.Label
	7,  // 1: wayplatform.sdk.rfms.v4.AccumulatedData.acceleration_pedal_position_class:type_name -> wayplatform.sdk.rfms.v4.FromToClass
	7,  // 2: wayplatform.sdk.rfms.v4.AccumulatedData.brake_pedal_position_class:type_name -> wayplatform.sdk.rfms.v4.FromToClass
	7,  // 3: wayplatform.sdk.rfms.v4.AccumulatedData.acceleration_class:type_name -> wayplatform.sdk.rfms.v4.FromToClass
	7,  // 4: wayplatform.sdk.rfms.v4.AccumulatedData.high_acceleration_class:type_name -> wayplatform.sdk.rfms.v4.FromToClass
	7,  // 5: wayplatform.sdk.rfms.v4.AccumulatedData.retarder_torque_class:type_name -> wayplatform.sdk.rfms.v4.FromToClass
	11, // 6: wayplatform.sdk.rfms.v4.AccumulatedData.driving_without_torque_class:type_name -> wayplatform.sdk.rfms.v4.Label
	8,  // 7: wayplatform.sdk.rfms.v4.AccumulatedData.engine_torque_class:type_name -> wayplatform.sdk.rfms.v4.FromToClassCombustion
	9,  // 8: wayplatform.sdk.rfms.v4.AccumulatedData.electric_motor_torque_class:type_name -> wayplatform.sdk.rfms.v4.FromToClassElectrical
	8,  // 9: wayplatform.sdk.rfms.v4.AccumulatedData.engine_torque_at_current_speed_class:type_name -> wayplatform.sdk.rfms.v4.FromToClassCombustion
	9,  // 10: wayplatform.sdk.rfms.v4.AccumulatedData.electric_motor_torque_at_current_speed_class:type_name -> wayplatform.sdk.rfms.v4.FromToClassElectrical
	7,  // 11: wayplatform.sdk.rfms.v4.AccumulatedData.vehicle_speed_class:type_name -> wayplatform.sdk.rfms.v4.FromToClass
	7,  // 12: wayplatform.sdk.rfms.v4.AccumulatedData.engine_speed_class:type_name -> wayplatform.sdk.rfms.v4.FromToClass
	7,  // 13: wayplatform.sdk.rfms.v4.AccumulatedData.acceleration_during_brake_class:type_name -> wayplatform.sdk.rfms.v4.FromToClass
	11, // 14: wayplatform.sdk.rfms.v4.AccumulatedData.selected_gear_class:type_name -> wayplatform.sdk.rfms.v4.Label
	11, // 15: wayplatform.sdk.rfms.v4.AccumulatedData.current_gear_class:type_name -> wayplatform.sdk.rfms.v4.Label
	9,  // 16: wayplatform.sdk.rfms.v4.AccumulatedData.electric_power_recuperation_class:type_name -> wayplatform.sdk.rfms.v4.FromToClassElectrical
	4,  // 17: wayplatform.sdk.rfms.v4.DriverId.tacho_driver_identification:type_name -> wayplatform.sdk.rfms.v4.DriverIdTachoDriverIdentification
	3,  // 18: wayplatform.sdk.rfms.v4.DriverId.oem_driver_identification:type_name -> wayplatform.sdk.rfms.v4.DriverIdOemDriverIdentification
	10, // 19: wayplatform.sdk.rfms.v4.SnapshotData.gnss_position:type_name -> wayplatform.sdk.rfms.v4.GNSSPosition
	2,  // 20: wayplatform.sdk.rfms.v4.SnapshotData.driver2_id:type_name -> wayplatform.sdk.rfms.v4.DriverId
	14, // 21: wayplatform.sdk.rfms.v4.SnapshotData.estimated_distance_to_empty:type_name -> wayplatform.sdk.rfms.v4.SnapshotDataEstimatedDistanceToEmpty
	17, // 22: wayplatform.sdk.rfms.v4.SnapshotData.vehicle_axles:type_name -> wayplatform.sdk.rfms.v4.SnapshotDataVehicleAxlesInner
	15, // 23: wayplatform.sdk.rfms.v4.SnapshotData.trailers:type_name -> wayplatform.sdk.rfms.v4.SnapshotDataTrailersInner
	16, // 24: wayplatform.sdk.rfms.v4.SnapshotDataTrailersInner.trailer_axles:type_name -> wayplatform.sdk.rfms.v4.SnapshotDataTrailersInnerTrailerAxlesInner
	2,  // 25: wayplatform.sdk.rfms.v4.Trigger.driver_id:type_name -> wayplatform.sdk.rfms.v4.DriverId
	18, // 26: wayplatform.sdk.rfms.v4.Trigger.tell_tale_info:type_name -> wayplatform.sdk.rfms.v4.TellTaleInfo
	21, // 27: wayplatform.sdk.rfms.v4.Trigger.charging_status_info:type_name -> wayplatform.sdk.rfms.v4.TriggerChargingStatusInfo
	20, // 28: wayplatform.sdk.rfms.v4.Trigger.charging_connection_status_info:type_name -> wayplatform.sdk.rfms.v4.TriggerChargingConnectionStatusInfo
	18, // 29: wayplatform.sdk.rfms.v4.UptimeData.tell_tale_info:type_name -> wayplatform.sdk.rfms.v4.TellTaleInfo
	23, // 30: wayplatform.sdk.rfms.v4.UptimeData.alternator_info:type_name -> wayplatform.sdk.rfms.v4.UptimeDataAlternatorInfo
	28, // 31: wayplatform.sdk.rfms.v4.Vehicle.production_date:type_name -> wayplatform.sdk.rfms.v4.VehicleProductionDate
	19, // 32: wayplatform.sdk.rfms.v4.VehiclePosition.trigger_type:type_name -> wayplatform.sdk.rfms.v4.Trigger
	10, // 33: wayplatform.sdk.rfms.v4.VehiclePosition.gnss_position:type_name -> wayplatform.sdk.rfms.v4.GNSSPosition
	27, // 34: wayplatform.sdk.rfms.v4.VehiclePositionsResponse.vehicle_position_response:type_name -> wayplatform.sdk.rfms.v4.VehiclePositionsResponseVehiclePositionResponse
	25, // 35: wayplatform.sdk.rfms.v4.VehiclePositionsResponseVehiclePositionResponse.vehicle_positions:type_name -> wayplatform.sdk.rfms.v4.VehiclePosition
	19, // 36: wayplatform.sdk.rfms.v4.VehicleStatus.trigger_type:type_name -> wayplatform.sdk.rfms.v4.Trigger
	2,  // 37: wayplatform.sdk.rfms.v4.VehicleStatus.driver1_id:type_name -> wayplatform.sdk.rfms.v4.DriverId
	30, // 38: wayplatform.sdk.rfms.v4.VehicleStatus.door_status:type_name -> wayplatform.sdk.rfms.v4.VehicleStatusDoorStatusInner
	0,  // 39: wayplatform.sdk.rfms.v4.VehicleStatus.accumulated_data:type_name -> wayplatform.sdk.rfms.v4.AccumulatedData
	13, // 40: wayplatform.sdk.rfms.v4.VehicleStatus.snapshot_data:type_name -> wayplatform.sdk.rfms.v4.SnapshotData
	22, // 41: wayplatform.sdk.rfms.v4.VehicleStatus.uptime_data:type_name -> wayplatform.sdk.rfms.v4.UptimeData
	32, // 42: wayplatform.sdk.rfms.v4.VehicleStatusesResponse.vehicle_status_response:type_name -> wayplatform.sdk.rfms.v4.VehicleStatusesResponseVehicleStatusResponse
	29, // 43: wayplatform.sdk.rfms.v4.VehicleStatusesResponseVehicleStatusResponse.vehicle_statuses:type_name -> wayplatform.sdk.rfms.v4.VehicleStatus
	34, // 44: wayplatform.sdk.rfms.v4.VehiclesResponse.vehicle_response:type_name -> wayplatform.sdk.rfms.v4.VehiclesResponseVehicleResponse
	24, // 45: wayplatform.sdk.rfms.v4.VehiclesResponseVehicleResponse.vehicles:type_name -> wayplatform.sdk.rfms.v4.Vehicle
	46, // [46:46] is the sub-list for method output_type
	46, // [46:46] is the sub-list for method input_type
	46, // [46:46] is the sub-list for extension type_name
	46, // [46:46] is the sub-list for extension extendee
	0,  // [0:46] is the sub-list for field type_name
}

func init() { file_wayplatform_rfms_v4_api_proto_init() }
func file_wayplatform_rfms_v4_api_proto_init() {
	if File_wayplatform_rfms_v4_api_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_rfms_v4_api_proto_rawDesc), len(file_wayplatform_rfms_v4_api_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_rfms_v4_api_proto_goTypes,
		DependencyIndexes: file_wayplatform_rfms_v4_api_proto_depIdxs,
		MessageInfos:      file_wayplatform_rfms_v4_api_proto_msgTypes,
	}.Build()
	File_wayplatform_rfms_v4_api_proto = out.File
	file_wayplatform_rfms_v4_api_proto_goTypes = nil
	file_wayplatform_rfms_v4_api_proto_depIdxs = nil
}
