// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: wayplatform/rfms/v5/tell_tale.proto

package rfmsv5

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// The type of a tell tale.
type TellTale_Type int32

const (
	// Default value. This value is unused.
	TellTale_TYPE_UNSPECIFIED TellTale_Type = 0
	// The tell tale type is unknown.
	TellTale_TYPE_UNKNOWN TellTale_Type = 1
	// The tell tale type is OEM specific.
	TellTale_OEM_SPECIFIC                        TellTale_Type = 2
	TellTale_COOLING_AIR_CONDITIONING            TellTale_Type = 3
	TellTale_HIGH_BEAM_MAIN_BEAM                 TellTale_Type = 4
	TellTale_LOW_BEAM_DIPPED_BEAM                TellTale_Type = 5
	TellTale_TURN_SIGNALS                        TellTale_Type = 6
	TellTale_HAZARD_WARNING                      TellTale_Type = 7
	TellTale_PROVISIONING_HANDICAPPED_PERSON     TellTale_Type = 8
	TellTale_PARKING_BRAKE                       TellTale_Type = 9
	TellTale_BRAKE_MALFUNCTION                   TellTale_Type = 10
	TellTale_HATCH_OPEN                          TellTale_Type = 11
	TellTale_FUEL_LEVEL                          TellTale_Type = 12
	TellTale_ENGINE_COOLANT_TEMPERATURE          TellTale_Type = 13
	TellTale_BATTERY_CHARGING_CONDITION          TellTale_Type = 14
	TellTale_ENGINE_OIL                          TellTale_Type = 15
	TellTale_POSITION_LIGHTS                     TellTale_Type = 16
	TellTale_FRONT_FOG_LIGHT                     TellTale_Type = 17
	TellTale_REAR_FOG_LIGHT                      TellTale_Type = 18
	TellTale_PARKING_HEATER                      TellTale_Type = 19
	TellTale_ENGINE_MIL_INDICATOR                TellTale_Type = 20
	TellTale_SERVICE_CALL_FOR_MAINTENANCE        TellTale_Type = 21
	TellTale_TRANSMISSION_FLUID_TEMPERATURE      TellTale_Type = 22
	TellTale_TRANSMISSION_MALFUNCTION            TellTale_Type = 23
	TellTale_ANTI_LOCK_BRAKE_FAILURE             TellTale_Type = 24
	TellTale_WORN_BRAKE_LININGS                  TellTale_Type = 25
	TellTale_WINDSCREEN_WASHER_FLUID             TellTale_Type = 26
	TellTale_TIRE_MALFUNCTION                    TellTale_Type = 27
	TellTale_GENERAL_FAILURE                     TellTale_Type = 28
	TellTale_ENGINE_OIL_TEMPERATURE              TellTale_Type = 29
	TellTale_ENGINE_OIL_LEVEL                    TellTale_Type = 30
	TellTale_ENGINE_COOLANT_LEVEL                TellTale_Type = 31
	TellTale_STEERING_FLUID_LEVEL                TellTale_Type = 32
	TellTale_STEERING_FAILURE                    TellTale_Type = 33
	TellTale_HEIGHT_CONTROL                      TellTale_Type = 34
	TellTale_RETARDER                            TellTale_Type = 35
	TellTale_ENGINE_EMISSION_FAILURE             TellTale_Type = 36
	TellTale_ESC_INDICATOR                       TellTale_Type = 37
	TellTale_BRAKE_LIGHTS                        TellTale_Type = 38
	TellTale_ARTICULATION                        TellTale_Type = 39
	TellTale_STOP_REQUEST                        TellTale_Type = 40
	TellTale_PRAM_REQUEST                        TellTale_Type = 41
	TellTale_BUS_STOP_BRAKE                      TellTale_Type = 42
	TellTale_ADBLUE_LEVEL                        TellTale_Type = 43
	TellTale_RAISING                             TellTale_Type = 44
	TellTale_LOWERING                            TellTale_Type = 45
	TellTale_KNEELING                            TellTale_Type = 46
	TellTale_ENGINE_COMPARTMENT_TEMPERATURE      TellTale_Type = 47
	TellTale_AUXILLARY_AIR_PRESSURE              TellTale_Type = 48
	TellTale_AIR_FILTER_CLOGGED                  TellTale_Type = 49
	TellTale_FUEL_FILTER_DIFF_PRESSURE           TellTale_Type = 50
	TellTale_SEAT_BELT                           TellTale_Type = 51
	TellTale_EBS                                 TellTale_Type = 52
	TellTale_LANE_DEPARTURE_INDICATOR            TellTale_Type = 53
	TellTale_ADVANCED_EMERGENCY_BRAKING          TellTale_Type = 54
	TellTale_ACC                                 TellTale_Type = 55
	TellTale_TRAILER_CONNECTED                   TellTale_Type = 56
	TellTale_ABS_TRAILER                         TellTale_Type = 57
	TellTale_AIRBAG                              TellTale_Type = 58
	TellTale_EBS_TRAILER_1_2                     TellTale_Type = 59
	TellTale_TACHOGRAPH_INDICATOR                TellTale_Type = 60
	TellTale_ESC_SWITCHED_OFF                    TellTale_Type = 61
	TellTale_LANE_DEPARTURE_WARNING_SWITCHED_OFF TellTale_Type = 62
	TellTale_ENGINE_EMISSION_FILTER_SOOT_FILTER  TellTale_Type = 63
	TellTale_ELECTRIC_MOTOR_FAILURES             TellTale_Type = 64
	TellTale_ADBLUE_TAMPERING                    TellTale_Type = 65
	TellTale_MULTIPLEX_SYSTEM                    TellTale_Type = 66
	TellTale_BATTERY_PACK                        TellTale_Type = 67
	TellTale_HIGH_VOLTAGE_SYSTEM_CAUTION         TellTale_Type = 68
	TellTale_BATTERY_PACK_TEMPERATURE            TellTale_Type = 69
	TellTale_LIMITED_PERFORMANCE_ELECTRIC_MOTOR  TellTale_Type = 70
	TellTale_BATTERY_PACK_COOLING                TellTale_Type = 71
	TellTale_WATER_IN_FUEL_INDICATOR             TellTale_Type = 72
)

// Enum value maps for TellTale_Type.
var (
	TellTale_Type_name = map[int32]string{
		0:  "TYPE_UNSPECIFIED",
		1:  "TYPE_UNKNOWN",
		2:  "OEM_SPECIFIC",
		3:  "COOLING_AIR_CONDITIONING",
		4:  "HIGH_BEAM_MAIN_BEAM",
		5:  "LOW_BEAM_DIPPED_BEAM",
		6:  "TURN_SIGNALS",
		7:  "HAZARD_WARNING",
		8:  "PROVISIONING_HANDICAPPED_PERSON",
		9:  "PARKING_BRAKE",
		10: "BRAKE_MALFUNCTION",
		11: "HATCH_OPEN",
		12: "FUEL_LEVEL",
		13: "ENGINE_COOLANT_TEMPERATURE",
		14: "BATTERY_CHARGING_CONDITION",
		15: "ENGINE_OIL",
		16: "POSITION_LIGHTS",
		17: "FRONT_FOG_LIGHT",
		18: "REAR_FOG_LIGHT",
		19: "PARKING_HEATER",
		20: "ENGINE_MIL_INDICATOR",
		21: "SERVICE_CALL_FOR_MAINTENANCE",
		22: "TRANSMISSION_FLUID_TEMPERATURE",
		23: "TRANSMISSION_MALFUNCTION",
		24: "ANTI_LOCK_BRAKE_FAILURE",
		25: "WORN_BRAKE_LININGS",
		26: "WINDSCREEN_WASHER_FLUID",
		27: "TIRE_MALFUNCTION",
		28: "GENERAL_FAILURE",
		29: "ENGINE_OIL_TEMPERATURE",
		30: "ENGINE_OIL_LEVEL",
		31: "ENGINE_COOLANT_LEVEL",
		32: "STEERING_FLUID_LEVEL",
		33: "STEERING_FAILURE",
		34: "HEIGHT_CONTROL",
		35: "RETARDER",
		36: "ENGINE_EMISSION_FAILURE",
		37: "ESC_INDICATOR",
		38: "BRAKE_LIGHTS",
		39: "ARTICULATION",
		40: "STOP_REQUEST",
		41: "PRAM_REQUEST",
		42: "BUS_STOP_BRAKE",
		43: "ADBLUE_LEVEL",
		44: "RAISING",
		45: "LOWERING",
		46: "KNEELING",
		47: "ENGINE_COMPARTMENT_TEMPERATURE",
		48: "AUXILLARY_AIR_PRESSURE",
		49: "AIR_FILTER_CLOGGED",
		50: "FUEL_FILTER_DIFF_PRESSURE",
		51: "SEAT_BELT",
		52: "EBS",
		53: "LANE_DEPARTURE_INDICATOR",
		54: "ADVANCED_EMERGENCY_BRAKING",
		55: "ACC",
		56: "TRAILER_CONNECTED",
		57: "ABS_TRAILER",
		58: "AIRBAG",
		59: "EBS_TRAILER_1_2",
		60: "TACHOGRAPH_INDICATOR",
		61: "ESC_SWITCHED_OFF",
		62: "LANE_DEPARTURE_WARNING_SWITCHED_OFF",
		63: "ENGINE_EMISSION_FILTER_SOOT_FILTER",
		64: "ELECTRIC_MOTOR_FAILURES",
		65: "ADBLUE_TAMPERING",
		66: "MULTIPLEX_SYSTEM",
		67: "BATTERY_PACK",
		68: "HIGH_VOLTAGE_SYSTEM_CAUTION",
		69: "BATTERY_PACK_TEMPERATURE",
		70: "LIMITED_PERFORMANCE_ELECTRIC_MOTOR",
		71: "BATTERY_PACK_COOLING",
		72: "WATER_IN_FUEL_INDICATOR",
	}
	TellTale_Type_value = map[string]int32{
		"TYPE_UNSPECIFIED":                    0,
		"TYPE_UNKNOWN":                        1,
		"OEM_SPECIFIC":                        2,
		"COOLING_AIR_CONDITIONING":            3,
		"HIGH_BEAM_MAIN_BEAM":                 4,
		"LOW_BEAM_DIPPED_BEAM":                5,
		"TURN_SIGNALS":                        6,
		"HAZARD_WARNING":                      7,
		"PROVISIONING_HANDICAPPED_PERSON":     8,
		"PARKING_BRAKE":                       9,
		"BRAKE_MALFUNCTION":                   10,
		"HATCH_OPEN":                          11,
		"FUEL_LEVEL":                          12,
		"ENGINE_COOLANT_TEMPERATURE":          13,
		"BATTERY_CHARGING_CONDITION":          14,
		"ENGINE_OIL":                          15,
		"POSITION_LIGHTS":                     16,
		"FRONT_FOG_LIGHT":                     17,
		"REAR_FOG_LIGHT":                      18,
		"PARKING_HEATER":                      19,
		"ENGINE_MIL_INDICATOR":                20,
		"SERVICE_CALL_FOR_MAINTENANCE":        21,
		"TRANSMISSION_FLUID_TEMPERATURE":      22,
		"TRANSMISSION_MALFUNCTION":            23,
		"ANTI_LOCK_BRAKE_FAILURE":             24,
		"WORN_BRAKE_LININGS":                  25,
		"WINDSCREEN_WASHER_FLUID":             26,
		"TIRE_MALFUNCTION":                    27,
		"GENERAL_FAILURE":                     28,
		"ENGINE_OIL_TEMPERATURE":              29,
		"ENGINE_OIL_LEVEL":                    30,
		"ENGINE_COOLANT_LEVEL":                31,
		"STEERING_FLUID_LEVEL":                32,
		"STEERING_FAILURE":                    33,
		"HEIGHT_CONTROL":                      34,
		"RETARDER":                            35,
		"ENGINE_EMISSION_FAILURE":             36,
		"ESC_INDICATOR":                       37,
		"BRAKE_LIGHTS":                        38,
		"ARTICULATION":                        39,
		"STOP_REQUEST":                        40,
		"PRAM_REQUEST":                        41,
		"BUS_STOP_BRAKE":                      42,
		"ADBLUE_LEVEL":                        43,
		"RAISING":                             44,
		"LOWERING":                            45,
		"KNEELING":                            46,
		"ENGINE_COMPARTMENT_TEMPERATURE":      47,
		"AUXILLARY_AIR_PRESSURE":              48,
		"AIR_FILTER_CLOGGED":                  49,
		"FUEL_FILTER_DIFF_PRESSURE":           50,
		"SEAT_BELT":                           51,
		"EBS":                                 52,
		"LANE_DEPARTURE_INDICATOR":            53,
		"ADVANCED_EMERGENCY_BRAKING":          54,
		"ACC":                                 55,
		"TRAILER_CONNECTED":                   56,
		"ABS_TRAILER":                         57,
		"AIRBAG":                              58,
		"EBS_TRAILER_1_2":                     59,
		"TACHOGRAPH_INDICATOR":                60,
		"ESC_SWITCHED_OFF":                    61,
		"LANE_DEPARTURE_WARNING_SWITCHED_OFF": 62,
		"ENGINE_EMISSION_FILTER_SOOT_FILTER":  63,
		"ELECTRIC_MOTOR_FAILURES":             64,
		"ADBLUE_TAMPERING":                    65,
		"MULTIPLEX_SYSTEM":                    66,
		"BATTERY_PACK":                        67,
		"HIGH_VOLTAGE_SYSTEM_CAUTION":         68,
		"BATTERY_PACK_TEMPERATURE":            69,
		"LIMITED_PERFORMANCE_ELECTRIC_MOTOR":  70,
		"BATTERY_PACK_COOLING":                71,
		"WATER_IN_FUEL_INDICATOR":             72,
	}
)

func (x TellTale_Type) Enum() *TellTale_Type {
	p := new(TellTale_Type)
	*p = x
	return p
}

func (x TellTale_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TellTale_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_wayplatform_rfms_v5_tell_tale_proto_enumTypes[0].Descriptor()
}

func (TellTale_Type) Type() protoreflect.EnumType {
	return &file_wayplatform_rfms_v5_tell_tale_proto_enumTypes[0]
}

func (x TellTale_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// The state of a tell tale.
type TellTale_State int32

const (
	// Default value. This value is unused.
	TellTale_STATE_UNSPECIFIED TellTale_State = 0
	// The state is unknown.
	TellTale_STATE_UNKNOWN TellTale_State = 1
	// The state is not available.
	TellTale_STATE_NOT_AVAILABLE TellTale_State = 2
	// The state is red.
	TellTale_RED TellTale_State = 3
	// The state is yellow.
	TellTale_YELLOW TellTale_State = 4
	// The state is info.
	TellTale_INFO TellTale_State = 5
	// The state is off.
	TellTale_OFF TellTale_State = 6
)

// Enum value maps for TellTale_State.
var (
	TellTale_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "STATE_UNKNOWN",
		2: "STATE_NOT_AVAILABLE",
		3: "RED",
		4: "YELLOW",
		5: "INFO",
		6: "OFF",
	}
	TellTale_State_value = map[string]int32{
		"STATE_UNSPECIFIED":   0,
		"STATE_UNKNOWN":       1,
		"STATE_NOT_AVAILABLE": 2,
		"RED":                 3,
		"YELLOW":              4,
		"INFO":                5,
		"OFF":                 6,
	}
)

func (x TellTale_State) Enum() *TellTale_State {
	p := new(TellTale_State)
	*p = x
	return p
}

func (x TellTale_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TellTale_State) Descriptor() protoreflect.EnumDescriptor {
	return file_wayplatform_rfms_v5_tell_tale_proto_enumTypes[1].Descriptor()
}

func (TellTale_State) Type() protoreflect.EnumType {
	return &file_wayplatform_rfms_v5_tell_tale_proto_enumTypes[1]
}

func (x TellTale_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Information about a tell tale.
type TellTale struct {
	state                      protoimpl.MessageState `protogen:"opaque.v1"`
	xxx_hidden_Type            TellTale_Type          `protobuf:"varint,1,opt,name=type,enum=wayplatform.rfms.v5.TellTale_Type"`
	xxx_hidden_UnknownType     *string                `protobuf:"bytes,2,opt,name=unknown_type,json=unknownType"`
	xxx_hidden_OemSpecificType *string                `protobuf:"bytes,3,opt,name=oem_specific_type,json=oemSpecificType"`
	xxx_hidden_State           TellTale_State         `protobuf:"varint,4,opt,name=state,enum=wayplatform.rfms.v5.TellTale_State"`
	xxx_hidden_UnknownState    *string                `protobuf:"bytes,5,opt,name=unknown_state,json=unknownState"`
	XXX_raceDetectHookData     protoimpl.RaceDetectHookData
	XXX_presence               [1]uint32
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *TellTale) Reset() {
	*x = TellTale{}
	mi := &file_wayplatform_rfms_v5_tell_tale_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TellTale) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TellTale) ProtoMessage() {}

func (x *TellTale) ProtoReflect() protoreflect.Message {
	mi := &file_wayplatform_rfms_v5_tell_tale_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

func (x *TellTale) GetType() TellTale_Type {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 0) {
			return x.xxx_hidden_Type
		}
	}
	return TellTale_TYPE_UNSPECIFIED
}

func (x *TellTale) GetUnknownType() string {
	if x != nil {
		if x.xxx_hidden_UnknownType != nil {
			return *x.xxx_hidden_UnknownType
		}
		return ""
	}
	return ""
}

func (x *TellTale) GetOemSpecificType() string {
	if x != nil {
		if x.xxx_hidden_OemSpecificType != nil {
			return *x.xxx_hidden_OemSpecificType
		}
		return ""
	}
	return ""
}

func (x *TellTale) GetState() TellTale_State {
	if x != nil {
		if protoimpl.X.Present(&(x.XXX_presence[0]), 3) {
			return x.xxx_hidden_State
		}
	}
	return TellTale_STATE_UNSPECIFIED
}

func (x *TellTale) GetUnknownState() string {
	if x != nil {
		if x.xxx_hidden_UnknownState != nil {
			return *x.xxx_hidden_UnknownState
		}
		return ""
	}
	return ""
}

func (x *TellTale) SetType(v TellTale_Type) {
	x.xxx_hidden_Type = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 0, 5)
}

func (x *TellTale) SetUnknownType(v string) {
	x.xxx_hidden_UnknownType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 1, 5)
}

func (x *TellTale) SetOemSpecificType(v string) {
	x.xxx_hidden_OemSpecificType = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 2, 5)
}

func (x *TellTale) SetState(v TellTale_State) {
	x.xxx_hidden_State = v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 3, 5)
}

func (x *TellTale) SetUnknownState(v string) {
	x.xxx_hidden_UnknownState = &v
	protoimpl.X.SetPresent(&(x.XXX_presence[0]), 4, 5)
}

func (x *TellTale) HasType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 0)
}

func (x *TellTale) HasUnknownType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 1)
}

func (x *TellTale) HasOemSpecificType() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 2)
}

func (x *TellTale) HasState() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 3)
}

func (x *TellTale) HasUnknownState() bool {
	if x == nil {
		return false
	}
	return protoimpl.X.Present(&(x.XXX_presence[0]), 4)
}

func (x *TellTale) ClearType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 0)
	x.xxx_hidden_Type = TellTale_TYPE_UNSPECIFIED
}

func (x *TellTale) ClearUnknownType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 1)
	x.xxx_hidden_UnknownType = nil
}

func (x *TellTale) ClearOemSpecificType() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 2)
	x.xxx_hidden_OemSpecificType = nil
}

func (x *TellTale) ClearState() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 3)
	x.xxx_hidden_State = TellTale_STATE_UNSPECIFIED
}

func (x *TellTale) ClearUnknownState() {
	protoimpl.X.ClearPresent(&(x.XXX_presence[0]), 4)
	x.xxx_hidden_UnknownState = nil
}

type TellTale_builder struct {
	_ [0]func() // Prevents comparability and use of unkeyed literals for the builder.

	// The type of tell tale.
	Type *TellTale_Type
	// The unknown tell tale type. Used when the type is TYPE_UNKNOWN.
	UnknownType *string
	// The OEM specific type. Used when the type is TYPE_OEM_SPECIFIC.
	OemSpecificType *string
	// The state of the tell tale.
	State *TellTale_State
	// The unknown state. Used when the state is STATE_UNKNOWN.
	UnknownState *string
}

func (b0 TellTale_builder) Build() *TellTale {
	m0 := &TellTale{}
	b, x := &b0, m0
	_, _ = b, x
	if b.Type != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 0, 5)
		x.xxx_hidden_Type = *b.Type
	}
	if b.UnknownType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 1, 5)
		x.xxx_hidden_UnknownType = b.UnknownType
	}
	if b.OemSpecificType != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 2, 5)
		x.xxx_hidden_OemSpecificType = b.OemSpecificType
	}
	if b.State != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 3, 5)
		x.xxx_hidden_State = *b.State
	}
	if b.UnknownState != nil {
		protoimpl.X.SetPresentNonAtomic(&(x.XXX_presence[0]), 4, 5)
		x.xxx_hidden_UnknownState = b.UnknownState
	}
	return m0
}

var File_wayplatform_rfms_v5_tell_tale_proto protoreflect.FileDescriptor

const file_wayplatform_rfms_v5_tell_tale_proto_rawDesc = "" +
	"\n" +
	"#wayplatform/rfms/v5/tell_tale.proto\x12\x13wayplatform.rfms.v5\"\xa9\x10\n" +
	"\bTellTale\x126\n" +
	"\x04type\x18\x01 \x01(\x0e2\".wayplatform.rfms.v5.TellTale.TypeR\x04type\x12!\n" +
	"\funknown_type\x18\x02 \x01(\tR\vunknownType\x12*\n" +
	"\x11oem_specific_type\x18\x03 \x01(\tR\x0foemSpecificType\x129\n" +
	"\x05state\x18\x04 \x01(\x0e2#.wayplatform.rfms.v5.TellTale.StateR\x05state\x12#\n" +
	"\runknown_state\x18\x05 \x01(\tR\funknownState\"\xc1\r\n" +
	"\x04Type\x12\x14\n" +
	"\x10TYPE_UNSPECIFIED\x10\x00\x12\x10\n" +
	"\fTYPE_UNKNOWN\x10\x01\x12\x10\n" +
	"\fOEM_SPECIFIC\x10\x02\x12\x1c\n" +
	"\x18COOLING_AIR_CONDITIONING\x10\x03\x12\x17\n" +
	"\x13HIGH_BEAM_MAIN_BEAM\x10\x04\x12\x18\n" +
	"\x14LOW_BEAM_DIPPED_BEAM\x10\x05\x12\x10\n" +
	"\fTURN_SIGNALS\x10\x06\x12\x12\n" +
	"\x0eHAZARD_WARNING\x10\a\x12#\n" +
	"\x1fPROVISIONING_HANDICAPPED_PERSON\x10\b\x12\x11\n" +
	"\rPARKING_BRAKE\x10\t\x12\x15\n" +
	"\x11BRAKE_MALFUNCTION\x10\n" +
	"\x12\x0e\n" +
	"\n" +
	"HATCH_OPEN\x10\v\x12\x0e\n" +
	"\n" +
	"FUEL_LEVEL\x10\f\x12\x1e\n" +
	"\x1aENGINE_COOLANT_TEMPERATURE\x10\r\x12\x1e\n" +
	"\x1aBATTERY_CHARGING_CONDITION\x10\x0e\x12\x0e\n" +
	"\n" +
	"ENGINE_OIL\x10\x0f\x12\x13\n" +
	"\x0fPOSITION_LIGHTS\x10\x10\x12\x13\n" +
	"\x0fFRONT_FOG_LIGHT\x10\x11\x12\x12\n" +
	"\x0eREAR_FOG_LIGHT\x10\x12\x12\x12\n" +
	"\x0ePARKING_HEATER\x10\x13\x12\x18\n" +
	"\x14ENGINE_MIL_INDICATOR\x10\x14\x12 \n" +
	"\x1cSERVICE_CALL_FOR_MAINTENANCE\x10\x15\x12\"\n" +
	"\x1eTRANSMISSION_FLUID_TEMPERATURE\x10\x16\x12\x1c\n" +
	"\x18TRANSMISSION_MALFUNCTION\x10\x17\x12\x1b\n" +
	"\x17ANTI_LOCK_BRAKE_FAILURE\x10\x18\x12\x16\n" +
	"\x12WORN_BRAKE_LININGS\x10\x19\x12\x1b\n" +
	"\x17WINDSCREEN_WASHER_FLUID\x10\x1a\x12\x14\n" +
	"\x10TIRE_MALFUNCTION\x10\x1b\x12\x13\n" +
	"\x0fGENERAL_FAILURE\x10\x1c\x12\x1a\n" +
	"\x16ENGINE_OIL_TEMPERATURE\x10\x1d\x12\x14\n" +
	"\x10ENGINE_OIL_LEVEL\x10\x1e\x12\x18\n" +
	"\x14ENGINE_COOLANT_LEVEL\x10\x1f\x12\x18\n" +
	"\x14STEERING_FLUID_LEVEL\x10 \x12\x14\n" +
	"\x10STEERING_FAILURE\x10!\x12\x12\n" +
	"\x0eHEIGHT_CONTROL\x10\"\x12\f\n" +
	"\bRETARDER\x10#\x12\x1b\n" +
	"\x17ENGINE_EMISSION_FAILURE\x10$\x12\x11\n" +
	"\rESC_INDICATOR\x10%\x12\x10\n" +
	"\fBRAKE_LIGHTS\x10&\x12\x10\n" +
	"\fARTICULATION\x10'\x12\x10\n" +
	"\fSTOP_REQUEST\x10(\x12\x10\n" +
	"\fPRAM_REQUEST\x10)\x12\x12\n" +
	"\x0eBUS_STOP_BRAKE\x10*\x12\x10\n" +
	"\fADBLUE_LEVEL\x10+\x12\v\n" +
	"\aRAISING\x10,\x12\f\n" +
	"\bLOWERING\x10-\x12\f\n" +
	"\bKNEELING\x10.\x12\"\n" +
	"\x1eENGINE_COMPARTMENT_TEMPERATURE\x10/\x12\x1a\n" +
	"\x16AUXILLARY_AIR_PRESSURE\x100\x12\x16\n" +
	"\x12AIR_FILTER_CLOGGED\x101\x12\x1d\n" +
	"\x19FUEL_FILTER_DIFF_PRESSURE\x102\x12\r\n" +
	"\tSEAT_BELT\x103\x12\a\n" +
	"\x03EBS\x104\x12\x1c\n" +
	"\x18LANE_DEPARTURE_INDICATOR\x105\x12\x1e\n" +
	"\x1aADVANCED_EMERGENCY_BRAKING\x106\x12\a\n" +
	"\x03ACC\x107\x12\x15\n" +
	"\x11TRAILER_CONNECTED\x108\x12\x0f\n" +
	"\vABS_TRAILER\x109\x12\n" +
	"\n" +
	"\x06AIRBAG\x10:\x12\x13\n" +
	"\x0fEBS_TRAILER_1_2\x10;\x12\x18\n" +
	"\x14TACHOGRAPH_INDICATOR\x10<\x12\x14\n" +
	"\x10ESC_SWITCHED_OFF\x10=\x12'\n" +
	"#LANE_DEPARTURE_WARNING_SWITCHED_OFF\x10>\x12&\n" +
	"\"ENGINE_EMISSION_FILTER_SOOT_FILTER\x10?\x12\x1b\n" +
	"\x17ELECTRIC_MOTOR_FAILURES\x10@\x12\x14\n" +
	"\x10ADBLUE_TAMPERING\x10A\x12\x14\n" +
	"\x10MULTIPLEX_SYSTEM\x10B\x12\x10\n" +
	"\fBATTERY_PACK\x10C\x12\x1f\n" +
	"\x1bHIGH_VOLTAGE_SYSTEM_CAUTION\x10D\x12\x1c\n" +
	"\x18BATTERY_PACK_TEMPERATURE\x10E\x12&\n" +
	"\"LIMITED_PERFORMANCE_ELECTRIC_MOTOR\x10F\x12\x18\n" +
	"\x14BATTERY_PACK_COOLING\x10G\x12\x1b\n" +
	"\x17WATER_IN_FUEL_INDICATOR\x10H\"r\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\x11\n" +
	"\rSTATE_UNKNOWN\x10\x01\x12\x17\n" +
	"\x13STATE_NOT_AVAILABLE\x10\x02\x12\a\n" +
	"\x03RED\x10\x03\x12\n" +
	"\n" +
	"\x06YELLOW\x10\x04\x12\b\n" +
	"\x04INFO\x10\x05\x12\a\n" +
	"\x03OFF\x10\x06B\xd7\x01\n" +
	"\x17com.wayplatform.rfms.v5B\rTellTaleProtoP\x01Z?github.com/way-platform/proto/gen/go/wayplatform/rfms/v5;rfmsv5\xa2\x02\x03WRX\xaa\x02\x13Wayplatform.Rfms.V5\xca\x02\x13Wayplatform\\Rfms\\V5\xe2\x02\x1fWayplatform\\Rfms\\V5\\GPBMetadata\xea\x02\x15Wayplatform::Rfms::V5b\beditionsp\xe8\a"

var file_wayplatform_rfms_v5_tell_tale_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_wayplatform_rfms_v5_tell_tale_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_wayplatform_rfms_v5_tell_tale_proto_goTypes = []any{
	(TellTale_Type)(0),  // 0: wayplatform.rfms.v5.TellTale.Type
	(TellTale_State)(0), // 1: wayplatform.rfms.v5.TellTale.State
	(*TellTale)(nil),    // 2: wayplatform.rfms.v5.TellTale
}
var file_wayplatform_rfms_v5_tell_tale_proto_depIdxs = []int32{
	0, // 0: wayplatform.rfms.v5.TellTale.type:type_name -> wayplatform.rfms.v5.TellTale.Type
	1, // 1: wayplatform.rfms.v5.TellTale.state:type_name -> wayplatform.rfms.v5.TellTale.State
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_wayplatform_rfms_v5_tell_tale_proto_init() }
func file_wayplatform_rfms_v5_tell_tale_proto_init() {
	if File_wayplatform_rfms_v5_tell_tale_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_wayplatform_rfms_v5_tell_tale_proto_rawDesc), len(file_wayplatform_rfms_v5_tell_tale_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_wayplatform_rfms_v5_tell_tale_proto_goTypes,
		DependencyIndexes: file_wayplatform_rfms_v5_tell_tale_proto_depIdxs,
		EnumInfos:         file_wayplatform_rfms_v5_tell_tale_proto_enumTypes,
		MessageInfos:      file_wayplatform_rfms_v5_tell_tale_proto_msgTypes,
	}.Build()
	File_wayplatform_rfms_v5_tell_tale_proto = out.File
	file_wayplatform_rfms_v5_tell_tale_proto_goTypes = nil
	file_wayplatform_rfms_v5_tell_tale_proto_depIdxs = nil
}
