edition = "2023";

package wayplatform.connect.rfms.v5;

import "wayplatform/connect/rfms/v5/accumulated_data.proto";
import "wayplatform/connect/rfms/v5/driver_identification.proto";
import "wayplatform/connect/rfms/v5/snapshot_data.proto";
import "wayplatform/connect/rfms/v5/trigger.proto";
import "wayplatform/connect/rfms/v5/uptime_data.proto";

// A vehicle status.
message VehicleStatus {
  // The vehicle identification number (VIN) of the vehicle.
  string vin = 1;

  // The date and time the vehicle status was created. (RFC 3339)
  string create_time = 2;

  // The date and time the vehicle status was received. (RFC 3339)
  string receive_time = 3;

  // The type of trigger that caused the vehicle status to be sent.
  Trigger trigger = 4;

  // The total distance travelled by the vehicle during its operation in meters.
  // Should not be reset during lifetime of the vehicle.
  double hr_total_vehicle_distance_m = 5;

  // The total hours of operation for the vehicle combustion engine during its lifetime.
  // Should not be reset during lifetime of the engine.
  double total_engine_hours = 6;

  // The total hours the electric motor is ready for propulsion
  // (i.e. crank mode) during its lifetime.
  //
  // At least one of total_engine_hours or total_electric_motor_hours is mandatory.
  //
  // Should not be reset during lifetime of the motor.
  double total_electric_motor_hours = 7;

  // The driver identification of driver 1.
  DriverIdentification driver1_id = 8;

  // The gross combination vehicle weight in kg.
  double gross_combination_vehicle_weight_kg = 9;

  // The total fuel the vehicle has used during its lifetime in ml.
  //
  // At least one of engine_total_fuel_used_ml, total_fuel_used_gaseous_kg
  // or total_electric_energy_used_wh is mandatory.
  //
  // Should not be reset during lifetime of the vehicle.
  double engine_total_fuel_used_ml = 10;

  // Total fuel consumed in kg.
  //
  // (trip drive fuel + trip PTO governor moving fuel + trip PTO governor non-moving fuel
  //  + trip idle fuel) over the life of the engine.
  //
  // At least one of engine_total_fuel_used_ml, total_fuel_used_gaseous_kg
  // or total_electric_energy_used_wh is mandatory.
  //
  // Should not be reset during lifetime of the vehicle.
  double total_fuel_used_gaseous_kg = 11;

  // Total electric energy consumed by the vehicle, excluding when plugged in (vehicle coupler)
  // for charging, (incl. motor, PTO, cooling, etc.) during its lifetime, in Wh.
  //
  // Recuperation is subtracted from the value.
  //
  // At least one of engine_total_fuel_used_ml, total_fuel_used_gaseous_kg
  // or total_electric_energy_used_wh is mandatory.
  //
  // Should not be reset during lifetime of the vehicle.
  double total_electric_energy_used_wh = 12;

  // Total electric energy recuperated by the vehicle during its lifetime, in watt hours.
  // Should not be reset during lifetime of the vehicle.
  double total_electric_energy_recuperated_wh = 13;

  // The status of the doors of the vehicle.
  // Bus specific parameter.
  StateOfDoors state_of_doors = 14;

  // The state of the doors of a bus.
  enum StateOfDoors {
    STATE_OF_DOORS_UNSPECIFIED = 0;
    STATE_OF_DOORS_UNKNOWN = 1;
    STATE_OF_DOORS_ERROR = 2;
    STATE_OF_DOORS_NOT_AVAILABLE = 3;
    ALL_DOORS_DISABLED = 4;
    AT_LEAST_ONE_DOOR_ENABLED = 5;
  }

  // The unknown state of the doors of the vehicle.
  // Provided when the state of the doors is STATE_OF_DOORS_UNKNOWN.
  string unknown_state_of_doors = 15;

  // Individual status for each door.
  // Bus specific parameter.
  repeated Door doors = 16;

  // Information about a door.
  message Door {
    // The number of the bus door.
    int32 number = 1;

    // The enabled state of the bus door.
    EnabledState enabled_state = 2;

    // Enabled state of a bus door.
    enum EnabledState {
      ENABLED_STATE_UNSPECIFIED = 0;
      ENABLED_STATE_UNKNOWN = 1;
      ENABLED_STATE_ERROR = 2;
      ENABLED_STATE_NOT_AVAILABLE = 3;
      ENABLED = 4;
      DISABLED = 5;
    }

    // The unknown enabled state of the bus door.
    // Provided when the enabled state is ENABLED_STATE_UNKNOWN.
    string unknown_enabled_state = 3;

    // The open state of the bus door.
    OpenState open_state = 4;

    // Open state of a bus door.
    enum OpenState {
      OPEN_STATE_UNSPECIFIED = 0;
      OPEN_STATE_UNKNOWN = 1;
      OPEN_STATE_ERROR = 2;
      OPEN_STATE_NOT_AVAILABLE = 3;
      CLOSED = 4;
      OPEN = 5;
    }

    // The unknown open state of the bus door.
    // Provided when the open state is OPEN_STATE_UNKNOWN.
    string unknown_open_state = 5;

    // The lock state of the bus door.
    LockState lock_state = 6;

    // Lock state of a bus door.
    enum LockState {
      LOCK_STATE_UNSPECIFIED = 0;
      LOCK_STATE_UNKNOWN = 1;
      LOCK_STATE_ERROR = 2;
      LOCK_STATE_NOT_AVAILABLE = 3;
      UNLOCKED = 4;
      LOCKED = 5;
    }

    // The unknown lock state of the bus door.
    // Provided when the lock state is LOCK_STATE_UNKNOWN.
    string unknown_lock_state = 7;
  }

  // Snapshot data for the vehicle.
  SnapshotData snapshot_data = 18;

  // Uptime data for the vehicle.
  UptimeData uptime_data = 19;

  // Accumulated data for the vehicle.
  AccumulatedData accumulated_data = 17;
}
