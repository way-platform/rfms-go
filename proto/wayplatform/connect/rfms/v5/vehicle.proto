edition = "2023";

package wayplatform.connect.rfms.v5;

import "wayplatform/connect/rfms/v5/brand.proto";
import "wayplatform/connect/rfms/v5/date.proto";
import "wayplatform/connect/rfms/v5/emission_level.proto";
import "wayplatform/connect/rfms/v5/fuel_type.proto";
import "wayplatform/connect/rfms/v5/gearbox_type.proto";
import "wayplatform/connect/rfms/v5/tachograph_type.proto";

// A vehicle.
message Vehicle {
  // The vehicle identification number (VIN) of the vehicle.
  // See ISO 3779 (17 characters)
  string vin = 1;

  // The customer's name for the vehicle.
  string customer_vehicle_name = 2;

  // The registration number (license plate) of the vehicle.
  string registration_number = 3;

  // The brand of the vehicle.
  Brand brand = 4;

  // The unknown brand of the vehicle.
  // This is used when the type is BRAND_UNKNOWN.
  string unknown_brand = 5;

  // The production date of the vehicle.
  Date production_date = 6;

  // The type of vehicle.
  Type type = 7;

  // The type of a vehicle.
  enum Type {
    TYPE_UNSPECIFIED = 0;
    // Unknown vehicle type.
    TYPE_UNKNOWN = 1;
    // A truck.
    TRUCK = 2;
    // A bus.
    BUS = 3;
    // A van.//
    // This enum is not exhaustive. It identifies commonly used emission levels across
    // OEM-specific implementations of rFMS APIs.
    VAN = 4;
  }

  // The unknown type of the vehicle.
  // This is used when type is TYPE_UNKNOWN.
  string unknown_type = 8;

  // The model of the vehicle.
  // OEM-specific value.
  string model = 9;

  // The possible fuel types supported by this vehicle.
  // This does NOT indicate which fuel type that is presently being used.
  repeated FuelType possible_fuel_types = 10;

  // The unknown possible fuel types of the vehicle.
  // This is used when possible_fuel_types contains unknown fuel types.
  repeated string unknown_possible_fuel_types = 11;

  // The emission level of the vehicle.
  EmissionLevel emission_level = 12;

  // The unknown emission level of the vehicle.
  // This is used when emission_level is EMISSION_LEVEL_UNKNOWN.
  string unknown_emission_level = 13;

  // The telltale code indicates how the tell tales shall be interpreted.
  // The code is unique for each OEM. One OEM can have different interpretations
  // depending on vehicle type.
  string tell_tale_code = 14;

  // The chassis type of the vehicle.
  // This is used mainly for buses.
  string chassis_type = 15;

  // The number of axles on the vehicle.
  int32 axle_count = 16;

  // The total fuel tank volume of the vehicle. (ml)
  double total_fuel_tank_volume_ml = 17;

  // The total gas tank capacity of the vehicle. (kg)
  double total_fuel_tank_capacity_gaseous_kg = 18;

  // The total battery pack capacity of the vehicle. (Wh)
  // The value comes from the vehicle's specification.
  // The value is static, i.e. does not take aging into consideration.
  double total_battery_pack_capacity_wh = 19;

  // The type of tachograph in the vehicle.
  TachographType tachograph_type = 20;

  // The unknown tachograph type of the vehicle.
  // This is used when tachograph_type is TACH_TYPE_UNKNOWN.
  string unknown_tachograph_type = 21;

  // The type of gearbox in the vehicle.
  GearboxType gearbox_type = 22;

  // The unknown gearbox type of the vehicle.
  // This is used when gearbox_type is GEARBOX_TYPE_UNKNOWN.
  string unknown_gearbox_type = 23;

  // The type of body on the chassis.
  // This is used mainly for buses.
  BodyType body_type = 24;

  // The type of body on the chassis.
  // This is used mainly for buses.
  enum BodyType {
    // Default value. This value is not used.
    BODY_TYPE_UNSPECIFIED = 0;
    // Unknown body type.
    BODY_TYPE_UNKNOWN = 1;
    // City bus.
    CITY_BUS = 2;
    // Intercity bus.
    INTERCITY_BUS = 3;
    // Coach.
    COACH = 4;
  }

  // The unknown body type of the vehicle.
  // This is used when body_type is BODY_TYPE_UNKNOWN.
  string unknown_body_type = 25;

  // The door configuration of the vehicle. The door order definition is OEM
  // specific. E.g. [1, 2, 2] means the bus has 3 doors: 1 front door, double
  // doors for door 2 and 3. This is used mainly for buses.
  repeated int32 door_configuration = 26;

  // If the vehicle is equipped with a ramp or not. This is used mainly for buses.
  bool has_ramp_or_lift = 27;

  // Paths that the client is authorized to call.
  // Example: ["/vehiclestatuses", "/vehiclepositions"]
  repeated string authorized_paths = 28;
}
